<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>14-Mybatis</title>
      <link href="/2022/02/09/14-Mybatis/"/>
      <url>/2022/02/09/14-Mybatis/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>12-js</title>
      <link href="/2022/02/09/12-js/"/>
      <url>/2022/02/09/12-js/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>13-Mysql数据库</title>
      <link href="/2022/02/09/13-Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/02/09/13-Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初识MySQL"><a href="#1-初识MySQL" class="headerlink" title="1. 初识MySQL"></a>1. 初识MySQL</h1><blockquote><p>只会写代码的是码农；学好数据库，基本能混口饭吃；在此基础上再学好操作系统和计算机网络，就能当一个不错的程序员。如果能再把离散数学、数字电路、体系结构、数据结构/算法、编译原理学通透，再加上丰富的实践经验与领域特定知识，就能算是一个优秀的工程师了。</p></blockquote><h2 id="1-1-为什么学习数据库"><a href="#1-1-为什么学习数据库" class="headerlink" title="1.1 为什么学习数据库"></a>1.1 为什么学习数据库</h2><p>1、岗位技能需求</p><p>2、现在的世界,得数据者得天下</p><p>3、存储数据的方法</p><p>4、程序,网站中,大量数据如何长久保存? </p><p>5、<strong>数据库是几乎软件体系中最核心的一个存在。</strong></p><h2 id="1-2-什么是数据库"><a href="#1-2-什么是数据库" class="headerlink" title="1.2 什么是数据库"></a>1.2 什么是数据库</h2><p>数据库 ( <strong>DataBase</strong> , 简称<strong>DB</strong> )</p><p><strong>概念</strong> : 长期存放在计算机内,有组织,可共享的大量数据的集合,是一个数据 “仓库”</p><p><strong>作用</strong> : 保存,并能安全管理数据(如:增删改查等),减少冗余…</p><p><strong>数据库总览</strong> <strong>:</strong></p><ul><li>关系型数据库 ( SQL )</li></ul><p>MySQL , Oracle , SQL Server , SQLite , DB2 , …</p><p>关系型数据库通过外键关联来建立表与表之间的关系 ,学员信息表,考勤表</p><ul><li>非关系型数据库 ( NOSQL )not only sql</li></ul><p>Redis , MongoDB , …</p><p>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定,定位信息表,动态更新</p><h2 id="1-3-什么是DBMS"><a href="#1-3-什么是DBMS" class="headerlink" title="1.3 什么是DBMS"></a>1.3 什么是DBMS</h2><p>数据库管理系统 ( <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem )</p><p>数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-09_11-27-04.png" alt="Snipaste_2022-02-09_11-27-04"></p><h1 id="2-操作数据库"><a href="#2-操作数据库" class="headerlink" title="2.操作数据库"></a>2.操作数据库</h1><h2 id="2-1-基本的命令行操作"><a href="#2-1-基本的命令行操作" class="headerlink" title="2.1 基本的命令行操作"></a>2.1 基本的命令行操作</h2><p>连接数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -psecqin  --连接数据库</span><br></pre></td></tr></table></figure><p>修改用户密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and Host = <span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>所有的语句分号结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases; 显示所有数据库</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use dbname； 切换数据库</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables; 显示选中数据库中所有的表</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe user; 显示表mysql数据库中user表的列信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database name; 创建数据库</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exit; 退出Mysql</span><br><span class="line">? 命令关键词 : 寻求帮助</span><br><span class="line">-- 表示注释,单行注释(SQL本来的注释)</span><br><span class="line">/*</span><br><span class="line">SQL的多行注释</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>数据库xxx语言 CRUD 增删改查!!!   CV程序猿     API程序猿       CRUD程序猿(业务!)</p><p>DDL(定义)</p><p>DML(操作)</p><p>DQL(查询)</p><p>DCL(控制)</p><p><img src="https://gitee.com/secqin/img/raw/master/img/123.png" alt="123"></p><p>mysql关键字不区分大小写</p><h2 id="2-2-数据库操作"><a href="#2-2-数据库操作" class="headerlink" title="2.2 数据库操作"></a>2.2 数据库操作</h2><h4 id="命令行操作数据库"><a href="#命令行操作数据库" class="headerlink" title="命令行操作数据库"></a>命令行操作数据库</h4><p>创建数据库 : create database [if not exists] 数据库名;</p><p>删除数据库 : drop database [if exists] 数据库名;</p><p>查看数据库 : show databases;</p><p>使用数据库 : use `数据库名`;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``:在tab键的上方</span><br></pre></td></tr></table></figure><h2 id="2-3-列的数据类型讲解"><a href="#2-3-列的数据类型讲解" class="headerlink" title="2.3 列的数据类型讲解"></a>2.3 列的数据类型讲解</h2><blockquote><p>数值类型</p></blockquote><p><img src="https://gitee.com/secqin/img/raw/master/img/9eb50c783e0bb3da8bbbea8701815b1e.png" alt="9eb50c783e0bb3da8bbbea8701815b1e"></p><blockquote><p>字符串类型</p></blockquote><p><img src="https://gitee.com/secqin/img/raw/master/img/baf75f3c71d91173305f13fefe552e96.png" alt="img"></p><blockquote><p>日期和时间型数值类型</p></blockquote><p>java.util.Date</p><ul><li>date YYYY-MM-DD,日期格式</li><li>time HH:mm:ss 时间格式</li><li><strong>datetime YYYY-MM-DD HH:mm:ss(最常用的时间格式)</strong></li><li><strong>timestamp 时间戳,1970.1.1到现在的毫秒数(也较为常用)</strong></li><li>year 年份表示</li></ul><p><img src="https://gitee.com/secqin/img/raw/master/img/0c01a1b5a1cd1e11386bcb8da7f18af6.png" alt="img"></p><blockquote><p>NULL值</p></blockquote><ul><li><p>理解为 “没有值” 或 “未知值”</p></li><li><p>注意:不要用NULL进行算术运算(不是不能使用) , 结果仍为NULL,相当于0*0=0</p></li></ul><h2 id="2-4-数据库的字段属性"><a href="#2-4-数据库的字段属性" class="headerlink" title="2.4 数据库的字段属性"></a>2.4 数据库的字段属性</h2><h3 id="数据字段属性"><a href="#数据字段属性" class="headerlink" title="数据字段属性"></a>数据字段属性</h3><p><strong>UnSigned</strong></p><ul><li>无符号的</li><li>声明该数据列不允许负数 .</li></ul><p><strong>ZEROFILL</strong></p><ul><li>0填充的</li><li>不足位数的用0来填充 , 如int(3),5则为005</li></ul><p><strong>Auto_InCrement</strong></p><ul><li>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</li><li>通常用于设置<strong>主键</strong> , 且必须为整数类型</li><li>可定义起始值和步长</li><li><ul><li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li><li> SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li></ul></li></ul><p><strong>NULL 和 NOT NULL</strong></p><ul><li>默认为NULL , 即没有插入该列的数值</li><li>如果设置为NOT NULL , 则该列必须有值</li></ul><p><strong>DEFAULT</strong></p><ul><li>默认的</li><li>用于设置默认值</li><li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li><li>每一个表都必须存在一下5个字段!未来做项目用的,表示一个记录存在的意义</li></ul><p>id</p><p>`VERSION` 乐观锁</p><p>is_delete 伪删除</p><p>gmt_create 创建时间</p><p>gmt_update 修改时间 </p><p>拓展:听听就好</p><h2 id="2-4-创建数据表-重点"><a href="#2-4-创建数据表-重点" class="headerlink" title="2.4 创建数据表(重点)"></a>2.4 创建数据表(重点)</h2><p>属于DDL的一种，语法 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table [if not exists] `表名`(</span><br><span class="line">   &#x27;字段名1&#x27; 列类型 [属性][索引][注释],</span><br><span class="line">   &#x27;字段名2&#x27; 列类型 [属性][索引][注释],</span><br><span class="line">  #...</span><br><span class="line">   &#x27;字段名n&#x27; 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure><p><strong>说明 :</strong> 反引号(反单引号)用于区别MySQL保留字与普通字符而引入的 (键盘tab上面的键).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 目标 : 创建一个school数据库</span><br><span class="line">-- 创建学生表(列,字段)</span><br><span class="line">-- 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span><br><span class="line">-- 创建表之前 , 一定要先选择数据库</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS `student` (</span><br><span class="line">`id` int(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;, -- 自增</span><br><span class="line">`name` varchar(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;, -- 默认值,非空</span><br><span class="line">`pwd` varchar(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">`sex` varchar(2) NOT NULL DEFAULT &#x27;男&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">`birthday` datetime DEFAULT NULL COMMENT &#x27;生日&#x27;,</span><br><span class="line">`address` varchar(100) DEFAULT NULL COMMENT &#x27;地址&#x27;,</span><br><span class="line">`email` varchar(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 查看数据库的定义</span><br><span class="line">SHOW CREATE DATABASE school;</span><br><span class="line">-- 查看数据表的定义</span><br><span class="line">SHOW CREATE TABLE student;</span><br><span class="line">-- 显示表结构</span><br><span class="line">DESC student;  -- 设置严格检查模式(不能容错了)SET sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;;</span><br></pre></td></tr></table></figure><p>SHOW CREATE DATABASE school –查看创建数据库的语句</p><p>SHOW CREATE TABLE student – 查看student数据库的定义语句 </p><p>DESC student – 显示表的结构</p><h2 id="2-5-数据表的类型"><a href="#2-5-数据表的类型" class="headerlink" title="2.5 数据表的类型"></a>2.5 数据表的类型</h2><p>数据库引擎:ENGINE=InnoDB</p><p>InnoDB  默认使用</p><p>MYISAM </p><table><thead><tr><th></th><th>MYISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间的大小</td><td>较小</td><td>较大,约为2倍</td></tr></tbody></table><p>常规操作</p><ul><li>MYISAM 节约空间,速度较快</li><li>INNODB 安全性高,事务的处理,多表多用户操作</li></ul><blockquote><p>物理空间存在的位置</p></blockquote><p>所有数据库文件存在data目录下</p><p>本质还是文件的存储</p><p>MySQL引擎在物理                                              文                                                                                      件上的                                                                                                                                                                             区                                                                                                       别p><p>​                                                                                                                                                                                                                   </p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-批处理</title>
      <link href="/2022/02/09/11-%E6%89%B9%E5%A4%84%E7%90%86/"/>
      <url>/2022/02/09/11-%E6%89%B9%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>命令</p></blockquote><h1 id="1-常见cmd命令"><a href="#1-常见cmd命令" class="headerlink" title="1. 常见cmd命令"></a>1. 常见cmd命令</h1><ol><li><p><strong>dir</strong> 　　　列文件名 </p></li><li><p><strong>cd</strong>　　　　改变当前目录 </p></li><li><p><strong>ren</strong> 　　　改变文件名 </p></li><li><p><strong>copy</strong>　　　拷贝文件 </p></li><li><p><strong>del</strong> 　　　删除文件 </p></li><li><p><strong>md</strong>　　　　建立子目录 </p></li><li><p><strong>rd</strong>　　　　删除目录 </p></li><li><p><strong>deltree</strong>　 删除目录树 </p></li><li><p><strong>format</strong>　　格式化磁盘 </p></li><li><p><strong>edit</strong>　　　文本编辑 </p></li><li><p><strong>type</strong>　　　显示文件内容 </p></li><li><p><strong>mem</strong> 　　　查看内存状况 </p><p>以下是新增加的命令 </p></li><li><p><strong>help</strong>　　　显示帮助提示 </p></li><li><p><strong>cls</strong> 　　　清屏 </p></li><li><p><strong>move</strong>　　　移动文件，改目录名 </p></li><li><p><strong>more</strong>　　　分屏显示 </p></li><li><p><strong>xcopy</strong> 　　拷贝目录和文件</p></li></ol><p><strong>此时我们来尝试一下使用一些基本的DOS命令</strong><br>比如，键入 **dir (不区分大小写)**并按回车后，我们会得到当前文件夹下所有的子文件夹和文件的相关信息。输入 <strong>dir c:\windows</strong>  ，可以查看指定的路径文件夹(这里假定我们指定的文件夹是C盘的WINDOWS文件夹)中的信息。在输入该命令后，只见刷地一下啥也没看清，N多文件或文件夹就已一闪而过，因为一个屏幕无法显示这么多的文件或文件夹。好在在DOS5中我们可以用鼠标滚轮向前滚动查看更多的内容。然而，早期的DOS版本并不具有保存多页信息的功能，我们不妨使用 dir 的一些参数(适当的参数加在相应的命令后面可以实现更多的扩展功能)，比如 /p ，即输入 <strong>dir c:\windows /p</strong>  。这样就能在每显示一个屏幕的内容后暂停一下以便查看。 </p><p>只要输入 <strong>dir /?</strong> 就能得到关于dir命令完整的使用介绍，而且是中文的。同理，<strong>任何命令后面跟上 /? 的参数，都能得到该命令的完整说明</strong></p><p>输入 <strong>help dir</strong> 就能得到命令 dir 的具体参数及其用法(等同与 dir /? )</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol><li><p><strong>d:</strong> </p><p>转到驱动器D盘下，此时我们能看到 D:&gt; 的提示符(前提是您的电脑硬盘必须至少划分出D盘)。如果看到的不是就再输入下一行命令。 </p></li><li><p>*<em>cd\*</em> </p><p>这一条命令 cd 的作用是改变当前的工作目录，后面加上 \ 表示返回到该驱动器的最顶级目录。另外，一个句点 . 表示当前文件夹，两个连续的句点 .. 则表示上一级文件夹， cd.. 即目录向上一级。 </p></li><li><p><strong>md test</strong> </p><p>正如前文所说，命令 md 的作用是创建子目录，此时打开D盘看一看，是不是多了一个名叫test的文件夹(如果不是事先早已存在的话)。事实上该命令的完整写法为 md d:\test ，由于当前目录已经在D盘了，所以我们把具体的路径给简化了。 </p></li><li><p><strong>md “test my folder”</strong> </p><p>同理，在D盘创建一个名为test my  folder的文件夹。加双引号的目的是告诉计算机我们要创建一个名字中含有空格的文件夹，而不是分别创建名字分别为test、my和folder的3个不同的文件夹。注：除了空格以外，在路径或文件名中含有 &amp;()[]{}^=;!’+,`~ 特殊字符时也需要用双引号引用起来，以便机器能够正确地识别。 </p></li><li><p><strong>cd test</strong> </p><p>改变当前工作目录，此时不再是D盘了，而是在 D:\test 的目录下。 </p></li><li><p><strong>echo Hello world&gt;a.txt</strong> </p><p>遇到了一个新命令 echo ，它可以将某某内容显示出来。只考虑 echo Hello world 就是把字符串 Hello world  显示出来而已。后面使用了符号 &gt; 表示将这句 Hello world 写入到某文件中。结果为：在 D:\test 文件夹里多了一个叫  a.txt 的文件，其内容为 Hello world 。 </p></li><li><p><strong>copy a.txt “d:\test my folder”</strong> </p><p>这就是将当前文件夹里的那个 a.txt 文件复制到 D:\test my folder 文件夹中 </p></li><li><p><strong>copy a.txt “..\test my folder\b.txt”</strong> </p><p>还是复制 a.txt ，但这次的路径与上一条命令的写法不同。 .. 表示先向上一级，再挪到 test my folder  文件夹里。其实还是复制到 D:\test my folder  这个文件夹里了。这次复制过去的文件名也不一样，因为这次我们指定了要复制过去的目标文件名为 b.txt 。 </p></li><li><p><strong>copy a.txt “..\test my folder\c.bmp”</strong> </p><p>再次复制 a.txt 到同样的文件夹里。不过这次不光改文件的标题名了，连文件的后缀名也改了。打开 D:\test my folder 文件夹检查一下，是不是多了名字分别叫 a.txt b.txt c.bmp 的3个文件。 </p></li><li><p><strong>cd..</strong> </p><p>向上一级 </p></li><li><p><strong>cd “test my folder”</strong> </p><p>进入 D:\test my folder 文件夹 </p></li><li><p><strong>ren c.bmp d.bin</strong> </p><p>重新命名文件 c.bmp 为 d.bin 。完整地写法为 ren “d:\test my folder\c.bmp” d.bin 。 </p></li><li><p>*<em>del <em>.txt</em></em> </p><p>删除当前工作目录中所有文件后缀名为 .txt 的文件。 * 表示通配符。例如：a.* 表示所有文件标题为 a 的文件，不论后缀名。  <em>.</em> 则表示任何标题名和任何后缀名的文件，即所有文件。此时结果应为：该目录里的 a.txt b.txt  这两个文件已经不存在了，即使是在回收站里也找不到了。 </p></li><li><p><strong>cd..</strong> </p><p>向上一级 </p></li><li><p><strong>rd test “test my folder”</strong> </p><p>这一条命令是想同时移除 test 和 test my folder 这两个文件夹。不过结果并没有成功，因为它会提示：目录不是空的。test 文件夹中有 a.txt ，test my folder 文件夹中还有 d.bin ，因此文件夹删不掉。 </p></li><li><p><strong>rd test “test my folder” /s</strong> </p><p>如果加上 /s 这个参数后就能删除这两个文件夹以及其文件夹中所包含的所有内容了。注意：删除前请确认这些文件夹是否是您以前就有的文件夹，或者说里面是否存有任何有用文件，不要因为这个测试而丢掉了重要文件。 </p></li></ol><h1 id="2-我们的第一个批处理"><a href="#2-我们的第一个批处理" class="headerlink" title="2. 我们的第一个批处理"></a>2. 我们的第一个批处理</h1><ol><li><p>我们在桌面建一个文件MyFirstBatch.bat</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md</span> &quot;d:\test&quot; &quot;d:\test my folder&quot;</span><br><span class="line"><span class="built_in">echo</span> Hello world&gt;&quot;d:\test\a.txt&quot;</span><br><span class="line"><span class="built_in">copy</span> &quot;d:\test\a.txt&quot; &quot;d:\test my folder&quot;</span><br><span class="line"><span class="built_in">copy</span> &quot;d:\test\a.txt&quot; &quot;d:\test my folder\b.txt&quot;</span><br><span class="line"><span class="built_in">copy</span> &quot;d:\test\a.txt&quot; &quot;d:\test my folder\c.bmp&quot;</span><br><span class="line"><span class="built_in">ren</span> &quot;d:\test my folder\c.bmp&quot; d.bin </span><br></pre></td></tr></table></figure></li></ol><p>双击后，显示的只是一闪就关闭了。正确的结果是在D盘多了名字分别为 test 和 test my folder 的两个文件夹。文件夹 test  里有一个叫 a.txt 的文件。而文件夹 test my folder 里有名字分别为 a.txt b.txt 和 d.bin 的3个文件。</p><h1 id="3-显示"><a href="#3-显示" class="headerlink" title="3. 显示"></a>3. 显示</h1><p>先看一下 <strong>echo、@、pause、&gt;、&gt;&gt;、title 、rem</strong> 这几个命令或符号的用法。</p>]]></content>
      
      
      <categories>
          
          <category> 批处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-git入门</title>
      <link href="/2022/02/09/10-git%E5%85%A5%E9%97%A8/"/>
      <url>/2022/02/09/10-git%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1.版本控制"></a>1.版本控制</h1><blockquote><p>什么是版本控制</p></blockquote><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历</p><p>史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li><p>实现跨区域多人协同开发</p></li><li><p>追踪和记载一个或者多个文件的历史记录</p></li><li><p>组织和保护你的源代码和文档</p></li><li><p>统计工作量</p></li><li><p>并行开发、提高开发效率</p></li><li><p>跟踪记录整个软件的开发过程</p></li><li><p>减轻开发人员的负担，节省时间，同时降低人为错误</p></li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软</p><p>件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全</p><p>性，以及软件的整合等问题。</p><p>多人开发必须使用版本控制,否则代价会比较大!</p><blockquote><p>常见的版本控制工具</p></blockquote><p>我们学习的东西一定要是最新的</p><p><strong>Git</strong></p><p><strong>SVN</strong>（Subversion）</p><p><strong>CVS</strong>（Concurrent Versions System）</p><p><strong>VSS</strong>（Micorosoft Visual SourceSafe）</p><p><strong>TFS</strong>（</p><p>Team Foundation Server）</p><p>Visual Studio Online</p><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、</p><p>Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在</p><p>影响力最大且使用最广泛的是Git与SVN</p><blockquote><p>版本控制分类</p></blockquote><p><strong>1.本地版本控制</strong></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS</p><p><strong>2、集中版本控制</strong></p><p>有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看</p><p>不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器</p><p>上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：</p><p>SVN、CVS、VSS</p><p><strong>3、分布式版本控制</strong></p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地</p><p>提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数</p><p>据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><blockquote><p>Git与SVN最主要区别</p></blockquote><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，</p><p>所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服</p><p>务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-09_10-50-00.png" alt="Snipaste_2022-02-09_10-50-00"></p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要</p><p>联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也</p><p>在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改</p><p>了。</p><p>Git是目前世界上最先进的分布式版本控制系统。</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-09_10-49-30.png" alt="Snipaste_2022-02-09_10-49-30"></p><h1 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h1><blockquote><p>软件下载</p></blockquote><p>打开 [git官网] <a href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">https://git-scm.com/，下载git对应操作系统的版本。</a></p><p>所有下载慢的软件都可以这样</p><p>官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><blockquote><p>启动git</p></blockquote><p>Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多</p><p>Git CMD：Windows风格的命令行</p><p>Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><blockquote><p>基本的Linux命令学习</p></blockquote><p>1）、cd : 改变目录。</p><p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3）、pwd : 显示当前所在的目录路径。</p><p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p><p>5）、touch : 新建一个文件如 touch index.js 就会在当前目录下新建一个index.js文件。</p><p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p><p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p><p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,</p><p>必须保证文件和目标文件夹在同一目录下。</p><p>10）、reset 重新初始化终端/清屏。</p><p>11）、clear 清屏。</p><p>12）、history 查看命令历史。</p><p>13）、help 帮助。</p><p>14）、exit 退出。</p><p>15）、#表示注释</p><blockquote><p>git配置</p></blockquote><p>查看配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-spring5全部基础</title>
      <link href="/2022/02/08/9-spring5%E5%85%A8%E9%83%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/08/9-spring5%E5%85%A8%E9%83%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="7-bean的自动装配"><a href="#7-bean的自动装配" class="headerlink" title="7.bean的自动装配"></a>7.bean的自动装配</h1><ul><li>自动装配是spring满足bean依赖的一种方式!</li><li>spring会在上下文中自动寻找bean,并自动给bean装配属性</li></ul><ul><li>在spring中有三种装配方式<ol><li>在xml中显示的配置</li><li>在Java中显示的配置</li><li>隐式的自动装配bean[重要]</li></ol></li></ul><h2 id="7-1-测试"><a href="#7-1-测试" class="headerlink" title="7.1 测试"></a>7.1 测试</h2><ul><li>环境搭建:一个人有两个宠物</li></ul><p>未实现自动装配时的普通写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小狂神&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>byname来实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>byname会在容器上下文中自动查找,和自己对象set方法后面的值对应的beanid!</p></blockquote><p>byname注入失败的情况,id改了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bytype来实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>bytype在容器上下文中自动查找,和自己对象属性类型相同的bean!</p></blockquote><p>假设有两个dog就失败了,要保证全局唯一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去掉id依然可以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小结:</p><ul><li>byname的时候,需要保证所有bean的id唯一,并且这个bean需要和自动注入的属性的set方法的值一致</li><li>bytype的时候,需要保证所有bean的class唯一,并且这个bean需要和自动注入的属性的类型一致</li></ul><h2 id="7-2-使用注解实现自动装配"><a href="#7-2-使用注解实现自动装配" class="headerlink" title="7.2 使用注解实现自动装配"></a>7.2 使用注解实现自动装配</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> //注解的约束</span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span> // 开启约束,这个千万别忘记</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>jdk1.5,spring2.5开始支持注解</p></blockquote><p>要使用注解须知:</p><ol><li>导入约束</li><li>配置注解的支持:<strong><a href="context:annotation-config/">context:annotation-config/</a></strong></li></ol><p>如何使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>@Autowired</p><p>在属性上用,也可以在set方法上面用,就可以注解实现自动装配</p><p><strong>使用Autowired后,我们可以不用写set方法了,前提是你这个自动装配的属性在IOC(spring)容器中存在,且符合类型bytype</strong></p><p>科普:一般用不到</p><blockquote><p>@Nullable 加了这个注解,字段可以为null</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(<span class="meta">@Nullable</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><em>@Autowired源码</em>,required默认为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span> 然后这样定义了,说明属性可以为<span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>可以显示指定一个唯一的装配的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value=&quot;dog222&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>如果@Autowired自动装配的环境很复杂,自动装配无法通过一个注解完成的时候,五年可以采用@Qualifier(value=”xxx”),去配合@Autowired的使用,指定一个唯一的bean对象注入!</p><p>上面是spring的注解</p><p>java的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>   效率略低一点</span><br></pre></td></tr></table></figure><p>先通过名字,再通过类型查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;cat&quot;)</span></span><br></pre></td></tr></table></figure><p><strong>小结</strong>:@R和@A的区别</p><ul><li>都是用来自动装配的,都可以放在属性字段上</li><li>A默认通过bytype,而且必须要求这个对象存在</li><li>R默认先通过byname,然后给找不到再bytype,如果两个都找不到就报错</li><li>R是A与Q的集合体</li><li>执行顺序不同</li></ul><h1 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8. 使用注解开发"></a>8. 使用注解开发</h1><p>在spring4 之后,要使用注解开发,必须保证aop的包导入了</p><p>在使用注解需要导入context约束,增加注解的支持</p><ol><li><p>bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qin.pojo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于    &lt;bean id=&quot;user&quot; class=&quot;com.qin.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//组件,放在类上,说明这个类被spring管理了</span></span><br></pre></td></tr></table></figure></li><li><p>属性如何注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;liqin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="comment">//等价于 &lt;property name=&quot;name&quot; value=&quot;xxx&quot;/&gt;</span></span><br></pre></td></tr></table></figure><p>简单的可以这样来,如果比较复杂就不行</p><p>@Value也可以写在get方法上</p></li><li><p>衍生的注解</p><p>@Component有几个衍生注解,我们在web开发中,会按照mvc三层架构分层</p><ul><li>dao        [@Repository]</li><li>service       [@Service]</li><li>controller       [@Controller]</li></ul><p>这四个注解功能一样,表示被装配了,被spring接管了</p></li><li><p>自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Resource</span></span><br></pre></td></tr></table></figure></li><li><p>作用域</p><p>@Scope</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Scope(&quot;singleton&quot;) //单例</span><br><span class="line">@Scope(&quot;prototype&quot;) //原型</span><br></pre></td></tr></table></figure></li><li><p>小结</p><p>xml与注解</p><ul><li>xml适用于一切场合!维护简单方便</li><li>注解不是自己的类使用不了,其他的类引用不了,维护相对复杂</li></ul></li></ol><p>xml与注解最佳实践:</p><ul><li>xml用来管理bean</li><li>注解只负责完成属性的注入</li><li>我们在使用的过程中,只需要注意一个问题,必须让注解生效:就要开启注解的支持</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qin.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="9-完全使用java的方式配置Spring"><a href="#9-完全使用java的方式配置Spring" class="headerlink" title="9. 完全使用java的方式配置Spring"></a>9. 完全使用java的方式配置Spring</h1><p>我们现在要完全不使用spring的xml配置了,全权交给java来做</p><p>javaconfig是spring的一个子项目,在spring4之后,他成为了一个核心功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Configuration代表这是一个配置类，就和我们之前看的beans.xml,这也会被spring托管,注册到容器中</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br></pre></td></tr></table></figure><blockquote><p>扫描包</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.kuang.pojo&quot;)</span></span><br></pre></td></tr></table></figure><blockquote><p>注册一个bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(); <span class="comment">//就是返回要注入到bean的对象！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个方法的名字就相当于bean标签中的id属性</strong></p><p><strong>这个方法的返回值就相当于bean标签中的class属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(KuangConfig.class);</span><br><span class="line">User getUser = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(KuangConfig2.class)</span> <span class="comment">//融合配置类</span></span><br></pre></td></tr></table></figure><p>新特性,年纪大的程序员基本不会学到这里</p><p>这种纯java的配置方式,在springboot中随处可见</p><p>自学失败的原因,注解上手spring boot,不了解底层,必须完全掌握spring以及springmvc才可以学习spring boot</p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-bean作用域</title>
      <link href="/2022/02/08/8-bean%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2022/02/08/8-bean%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-单例"><a href="#1-单例" class="headerlink" title="1.单例"></a>1.单例</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;黎钦&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>即hashcode相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student student = context.getBean(<span class="string">&quot;stu&quot;</span>,Student.class);</span><br><span class="line">Student student1 = context.getBean(<span class="string">&quot;stu&quot;</span>,Student.class);</span><br><span class="line">System.out.println(student == student1);</span><br></pre></td></tr></table></figure><blockquote><p>true</p></blockquote><p>没有写的话,默认单例</p><h1 id="2-原型模式"><a href="#2-原型模式" class="headerlink" title="2.原型模式"></a>2.原型模式</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;黎钦&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student student = context.getBean(<span class="string">&quot;stu&quot;</span>,Student.class);</span><br><span class="line">Student student1 = context.getBean(<span class="string">&quot;stu&quot;</span>,Student.class);</span><br><span class="line">System.out.println(student == student1);</span><br></pre></td></tr></table></figure><blockquote><p>false</p></blockquote><p>每次从容器中get的时候都会产生一个新对象!</p><h1 id="3-其余的request-session-application"><a href="#3-其余的request-session-application" class="headerlink" title="3.其余的request,session,application"></a>3.其余的request,session,application</h1><p>这些只能在web开发中使用</p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.DI依赖注入</title>
      <link href="/2022/02/06/7-DI%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/02/06/7-DI%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-依赖注入"><a href="#1-依赖注入" class="headerlink" title="1. 依赖注入"></a>1. 依赖注入</h1><h2 id="1-1-构造器注入"><a href="#1-1-构造器注入" class="headerlink" title="1.1 构造器注入"></a>1.1 构造器注入</h2><p>前面已经说过了,3种</p><h2 id="1-2-set方式注入-重点"><a href="#1-2-set方式注入-重点" class="headerlink" title="1.2 set方式注入[重点]"></a>1.2 set方式注入[重点]</h2><p>依赖注入:set注入!(依赖set方法)</p><ul><li><p>依赖:bean对象的创建依赖容器</p></li><li><p>注入:bean对象中的属性,由容器来注入</p></li></ul><p>[环境搭建]</p><ol><li><p>复杂类型</p><blockquote><p>Student</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 已掌握,value</span></span><br><span class="line"><span class="keyword">private</span> Address address; <span class="comment">// ref</span></span><br><span class="line"><span class="keyword">private</span> String[] books;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line"><span class="keyword">private</span> String wife; <span class="comment">// 空指针</span></span><br><span class="line"><span class="keyword">private</span> Properties info; <span class="comment">// 配置类</span></span><br></pre></td></tr></table></figure><blockquote><p>Address</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>beans.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;湖北&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        第一种，普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        第二种，bean注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第三种，数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>美国历史<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>金瓶梅<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第四种，list数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第四种，Map注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1243345345345435345345&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;代号&quot;</span> <span class="attr">value</span>=<span class="string">&quot;921&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wqeqwe&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第四种,set注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>coc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第四种,null注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第四种,properties注入--&gt;</span> 属性类注入</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;nums&quot;</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;vo&quot;</span>&gt;</span>qwefsdf<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>真实测试对象</p></li></ol><h2 id="1-3-拓展方式注入"><a href="#1-3-拓展方式注入" class="headerlink" title="1.3 拓展方式注入"></a>1.3 拓展方式注入</h2><h2 id="c命名和p命名空间-不是重点"><a href="#c命名和p命名空间-不是重点" class="headerlink" title="c命名和p命名空间(不是重点)"></a>c命名和p命名空间(不是重点)</h2><p>p:perproty</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span> //关键</span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span> //关键,导入头文件约束</span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    property--&gt;</span>   直接注入属性的值</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;黎钦&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    constructs--&gt;</span>   通过构造器注入</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>快捷键:<em>CPX</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student student = (Student) context.getBean(<span class="string">&quot;stu&quot;</span>);</span><br><span class="line">Student student = context.getBean(<span class="string">&quot;stu&quot;</span>,Student.class);</span><br></pre></td></tr></table></figure><blockquote><p>这两种方式均可</p></blockquote><p>我们可以使用p命名空间和c命名空间进行注入</p><p><strong>注意点:</strong></p><p>p命名和c命名空间不能直接使用,需要导入xml头约束</p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Spring的配置说明</title>
      <link href="/2022/02/06/6-Spring%E7%9A%84%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/"/>
      <url>/2022/02/06/6-Spring%E7%9A%84%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring配置"><a href="#1-Spring配置" class="headerlink" title="1.Spring配置"></a>1.Spring配置</h1><h2 id="1-1-别名"><a href="#1-1-别名" class="headerlink" title="1.1 别名"></a>1.1 别名</h2><p>如果添加了别名,我们也可以通过别名取得对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;li&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-bean的配置"><a href="#1-2-bean的配置" class="headerlink" title="1.2 bean的配置"></a>1.2 bean的配置</h2><p>id是bean的唯一标识符,也就是相当于我们学的对象名</p><p>class:bean 对象所对应的权限定名:包名加类名</p><p>name:也是别名,而且name更高级,可以同时取多个别名,一般不用alias</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2,u2 u3;u4&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>逗号,空格,分号均可分割</p><h2 id="1-3-import"><a href="#1-3-import" class="headerlink" title="1.3 import"></a>1.3 import</h2><p>这个import一般用于团队开发使用,可以将多个配置文件导入合并为一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>假设,现在项目中有多个人开发,这三个人复制不同的类开发,不同的类需要注册在不同的bean中,我们可以利用import讲所有人的beans.xm合并为一个总的</p><p>使用的时候用总的即可,内容相同也会被合并</p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.IOC创建对象的方式</title>
      <link href="/2022/02/06/5-IOC%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/02/06/5-IOC%E5%88%9B%E5%BB%BA%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-创建方式"><a href="#1-创建方式" class="headerlink" title="1.创建方式"></a>1.创建方式</h1><p>通过无参方式构造</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>第一种构造器:下标赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦说Java&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过类型创建(不建议使用)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦说Java123&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>直接通过参数名来设置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>创建bean的时候已经初始化了,在配置文件加载的时候,容器里面的类就已经初始化了</p><p>内存中只有一个实例,就取那一个</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-HelloSpring</title>
      <link href="/2022/02/06/4-HelloSpring/"/>
      <url>/2022/02/06/4-HelloSpring/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HelloSpring"><a href="#1-HelloSpring" class="headerlink" title="1.HelloSpring"></a>1.HelloSpring</h1><blockquote><p>mytest.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qin.pojo.Hello;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取spring上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//我们的对象现在都在spring中的管理了，我们要使用，直接去里面取出来就可以了</span></span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Hello对象是谁创建的?</p></blockquote><p>spring创建的</p><p>bean=对象</p><p>类型 变量名 = new 类型();</p><p>id就是变量名</p><p>class就是要new的对象</p><p>property 相当于给对象中的属性设置一个值</p><blockquote><p>beans.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    使用spring来创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>hello.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键是靠这个set对象,如果去掉就不能注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        ref引用spring容器中创建好的对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        value:具体的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;asd&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用类型用ref</p><blockquote><p>拿到spring容器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>对象由spring创建,管理以及装配</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.smbms项目搭建</title>
      <link href="/2022/02/03/3-smbms%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/02/03/3-smbms%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="1-项目搭建"><a href="#1-项目搭建" class="headerlink" title="1.项目搭建"></a>1.项目搭建</h1><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-03_21-44-56.png" alt="Snipaste_2022-02-03_21-44-56"></p><p>使不使用maven?</p><ol><li><p>搭建一个maven webapp项目</p></li><li><p>配置tomcat</p></li><li><p>测试项目可不可以跑起来</p></li><li><p>导入项目中会遇到的jar包</p><p>jsp,servlet,mysql驱动,jstl</p></li><li><p>创建项目包结构</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-03_21-59-33.png"></p></li><li><p>编写实体类</p><p>ORM映射:表-&gt;类映射</p></li><li><p>编写基础公共类</p><ol><li><p>数据库配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">user=root</span><br><span class="line">password=secqin</span><br></pre></td></tr></table></figure></li><li><p>读取数据库配置文件</p></li><li><p>编写数据库公共类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.dao;</span><br><span class="line"><span class="comment">//操作数据库公共类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作数据库的基类--静态类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//静态代码块,在类加载的时候执行</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化连接参数,从配置文件里获得</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">Properties params=<span class="keyword">new</span> Properties();</span><br><span class="line">String configFile = <span class="string">&quot;database.properties&quot;</span>;</span><br><span class="line">InputStream is= BaseDao.class.getClassLoader().getResourceAsStream(configFile); <span class="comment">//资源变成流</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">params.load(is); <span class="comment">//加载流</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">driver=params.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">url=params.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">user=params.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">password=params.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数据库连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(driver); <span class="comment">//反射</span></span><br><span class="line">connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pstm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">execute</span><span class="params">(Connection connection,PreparedStatement pstm,ResultSet rs,</span></span></span><br><span class="line"><span class="params"><span class="function">String sql,Object[] params)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">pstm = connection.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++)&#123;</span><br><span class="line">pstm.setObject(i+<span class="number">1</span>, params[i]);</span><br><span class="line">&#125;</span><br><span class="line">rs = pstm.executeQuery();</span><br><span class="line"><span class="keyword">return</span> rs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pstm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(Connection connection,PreparedStatement pstm,</span></span></span><br><span class="line"><span class="params"><span class="function">String sql,Object[] params)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">int</span> updateRows = <span class="number">0</span>;</span><br><span class="line">pstm = connection.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++)&#123;</span><br><span class="line">pstm.setObject(i+<span class="number">1</span>, params[i]);</span><br><span class="line">&#125;</span><br><span class="line">updateRows = pstm.executeUpdate();</span><br><span class="line"><span class="keyword">return</span> updateRows;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pstm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">closeResource</span><span class="params">(Connection connection,PreparedStatement pstm,ResultSet rs)</span></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">rs = <span class="keyword">null</span>;<span class="comment">//GC回收</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pstm != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pstm.close();</span><br><span class="line">pstm = <span class="keyword">null</span>;<span class="comment">//GC回收</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close();</span><br><span class="line">connection = <span class="keyword">null</span>;<span class="comment">//GC回收</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>导入静态资源,导入到webapp下面</p></li></ol><h1 id="2-登录功能实现"><a href="#2-登录功能实现" class="headerlink" title="2.登录功能实现"></a>2.登录功能实现</h1><ol><li><p>编写前端页面</p></li><li><p>设置首页</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.web.xml的头部信息</title>
      <link href="/2022/02/03/2-web-xml%E7%9A%84%E5%A4%B4%E9%83%A8%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/02/03/2-web-xml%E7%9A%84%E5%A4%B4%E9%83%A8%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.需要的maven仓库包</title>
      <link href="/2022/02/03/1-%E9%9C%80%E8%A6%81%E7%9A%84maven%E4%BB%93%E5%BA%93%E5%8C%85/"/>
      <url>/2022/02/03/1-%E9%9C%80%E8%A6%81%E7%9A%84maven%E4%BB%93%E5%BA%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javaweb环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helloservlet</title>
      <link href="/2022/02/03/helloservlet/"/>
      <url>/2022/02/03/helloservlet/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1.Servlet"></a>1.Servlet</h1><h2 id="1-1-servlet简介"><a href="#1-1-servlet简介" class="headerlink" title="1.1 servlet简介"></a>1.1 servlet简介</h2><ul><li><p>Servlet就是sun公司开发动态web的技术</p></li><li><p>sun公司在这些API中提供了一个接口叫做:servlet,如果你想开发一个servlet程序,只需要完成两个小步骤:</p></li></ul><ol><li>编写一个类实现servlet接口</li><li>把开好的类部署到web服务器中</li></ol><p><strong>把实现了servlet接口的Java程序叫servlet</strong></p><h2 id="1-2-HelloServlet"><a href="#1-2-HelloServlet" class="headerlink" title="1.2 HelloServlet"></a>1.2 HelloServlet</h2><p>servlet接口sun公司有两个默认的实现类:httpservlet</p><ol><li>构建一个普通Maven项目</li><li>删除src文件夹</li><li>以后我们的学习就在这个项目里面建立moudel;这个空的工程就是maven的主工程</li></ol><p><a href="https://mvnrepository.com/">maven仓库</a></p><blockquote><p>关于maven父子工程的理解</p></blockquote><p>父项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>javaweb-01-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父项目中的Java子项目jar包可以直接使用</p><p>在main下面新建java和资源文件夹</p><p>Maven环境优化</p><p>1.修改web.xml为最新的</p><p>2.将maven的结构搭建完整</p><p>编写一个servlet程序</p><p>编写一个普通类</p><p>实现servlet接口,这里我们注解继承httpservlet</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-03_17-44-46.png" alt="Snipaste_2022-02-03_17-44-46"></p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊Java这条路(狂神说)</title>
      <link href="/2022/02/03/%E8%81%8A%E8%81%8AJava%E8%BF%99%E6%9D%A1%E8%B7%AF-%E7%8B%82%E7%A5%9E%E8%AF%B4/"/>
      <url>/2022/02/03/%E8%81%8A%E8%81%8AJava%E8%BF%99%E6%9D%A1%E8%B7%AF-%E7%8B%82%E7%A5%9E%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="聊聊Java这条路"><a href="#聊聊Java这条路" class="headerlink" title="聊聊Java这条路"></a>聊聊Java这条路</h1><p><img src="https://raw.githubusercontent.com/liqincoding/img/master/1.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java SE</title>
      <link href="/2022/02/02/15-Java%20SE/"/>
      <url>/2022/02/02/15-Java%20SE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h1><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_12-10-21.png" alt="Snipaste_2022-01-29_12-10-21"></p><p><em>ctrl+d:复制当前行到下一行</em></p><p><img src="C:/Users/secqin/Desktop/Snipaste_2022-01-29_14-42-28.png" alt="Snipaste_2022-01-29_14-42-28"></p><p>cast:转换</p><p><strong>自动升为混合运算的最高优先级</strong></p><h2 id="1-1-自增自减运算符-一元运算符"><a href="#1-1-自增自减运算符-一元运算符" class="headerlink" title="1.1 自增自减运算符(一元运算符)"></a>1.1 自增自减运算符(一元运算符)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line"><span class="keyword">int</span> c == ++a</span><br></pre></td></tr></table></figure><blockquote><p>5</p><p>3</p><p>5</p></blockquote><h3 id="1-2-幂运算"><a href="#1-2-幂运算" class="headerlink" title="1.2 幂运算"></a>1.2 幂运算</h3><p>2^3:java不能这样写</p><p>很多运算需要工具类来操作</p><p>math类厉害的一批</p><p>Math.pow(2,3);这是java的正确表述</p><h3 id="1-3-逻辑运算符"><a href="#1-3-逻辑运算符" class="headerlink" title="1.3 逻辑运算符"></a>1.3 逻辑运算符</h3><p>&amp;&amp;                             ||                              !</p><p>短路运算&amp;&amp;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">boolean</span> d = (c&lt;<span class="number">4</span>)&amp;&amp;(c++&lt;<span class="number">4</span>);</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure><blockquote><p>false</p><p>5</p></blockquote><h3 id="1-4-位运算"><a href="#1-4-位运算" class="headerlink" title="1.4 位运算"></a>1.4 位运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">00111100</span>;</span><br><span class="line">B = <span class="number">00001101</span>;</span><br><span class="line">A&amp;B</span><br><span class="line">A|B</span><br><span class="line">A^B <span class="comment">// 异或,相同为0,不同为1</span></span><br><span class="line">~B</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);<span class="comment">//16</span></span><br></pre></td></tr></table></figure><p>&lt;&lt; (左移)*2;    &gt;&gt;(右移)/2;</p><h3 id="1-5-条件运算符"><a href="#1-5-条件运算符" class="headerlink" title="1.5 条件运算符"></a>1.5 条件运算符</h3><p><strong>x?y:z</strong></p><p>如果x==true则结果为y,否者结果为z</p><h3 id="1-6-字符串连接符"><a href="#1-6-字符串连接符" class="headerlink" title="1.6 字符串连接符"></a>1.6 字符串连接符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b);</span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>1020</p><p>30</p></blockquote><h3 id="1-7-运算符优先级"><a href="#1-7-运算符优先级" class="headerlink" title="1.7 运算符优先级"></a>1.7 运算符优先级</h3><p>不用刻意记忆,多用一些括号</p><h1 id="2-常量-变量-作用域"><a href="#2-常量-变量-作用域" class="headerlink" title="2. 常量,变量,作用域"></a>2. 常量,变量,作用域</h1><h2 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h2><p>变量是什么:可以变化的量</p><p>java是一种强类型语言,每个变量都必须声明其类型(基本+引用)</p><p>Java变是程序中最基本的存储单元,其要素包括变量名,变量类型和<strong>作用域</strong></p><p>注意:</p><p>1.变量名必须是合法标识符</p><p>2.;结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int a,b,c;</span></span><br><span class="line"><span class="comment">//int a=1,b=2,c=3;可以一行,但不提倡,可读性</span></span><br><span class="line">String name = <span class="string">&quot;qingjiang&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>变量作用域</strong></p><p>类变量</p><p>实例变量</p><p>局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性:变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    类变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> salary = <span class="number">100000</span>;</span><br><span class="line">    <span class="comment">//实例变量:从属于对象;如果不自行初始化,就是这个类型的默认值0 0.0</span></span><br><span class="line">    <span class="comment">//布尔值:默认是false</span></span><br><span class="line">    <span class="comment">//除了基本类型,其余默认值都是null</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//局部变量:必须声明和初始化值</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">10</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//变量类型  变量名字</span></span><br><span class="line">        test01 test01 = <span class="keyword">new</span> test01();</span><br><span class="line">        System.out.println(test01.age);</span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-常量"><a href="#2-2-常量" class="headerlink" title="2.2 常量"></a>2.2 常量</h2><p>初始化后不能改变值 final</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI =<span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> PI2 = <span class="number">3.15</span>;</span><br><span class="line">    <span class="comment">//修饰符,不存在先后顺序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3变量的命名规范"><a href="#2-3变量的命名规范" class="headerlink" title="2.3变量的命名规范"></a>2.3变量的命名规范</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_11-53-25.png" alt="Snipaste_2022-01-29_11-53-25"></p><h1 id="3-包机制"><a href="#3-包机制" class="headerlink" title="3.包机制"></a>3.包机制</h1><p>包的本质是文件夹</p><p>package开头</p><p>import:导入一个包</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_15-14-59.png" alt="Snipaste_2022-01-29_15-14-59"></p><h1 id="4-用户交互scanner"><a href="#4-用户交互scanner" class="headerlink" title="4.用户交互scanner"></a>4.用户交互scanner</h1><h2 id="4-1-Scanner对象"><a href="#4-1-Scanner对象" class="headerlink" title="4.1 Scanner对象"></a>4.1 Scanner对象</h2><p>java.util.Scanner:获得用户的输入</p><p>Scanner s = new Scanner(System.in);</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_15-23-47.png" alt="Snipaste_2022-01-30_15-23-47"></p><h2 id="4-2-代码"><a href="#4-2-代码" class="headerlink" title="4.2 代码"></a>4.2 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式接收:&quot;</span>);</span><br><span class="line"><span class="comment">//        判断用户有没有输入字符串</span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext()==<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//使用next方式接收用户输入</span></span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为:&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-next和nextLine的区别"><a href="#4-3-next和nextLine的区别" class="headerlink" title="4.3 next和nextLine的区别"></a>4.3 next和nextLine的区别</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_15-31-26.png" alt="Snipaste_2022-01-30_15-31-26"></p><h2 id="4-4-判断输入是否是整数-小数"><a href="#4-4-判断输入是否是整数-小数" class="headerlink" title="4.4 判断输入是否是整数(小数)"></a>4.4 判断输入是否是整数(小数)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入整数:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(scanner.hasNextInt())&#123;</span><br><span class="line">    i = scanner.nextInt();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;输入的不是整数数据&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入小数:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(scanner.hasNextFloat())&#123;</span><br><span class="line">    f = scanner.nextFloat();</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;输入的不是小数数据&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-选择结构"><a href="#5-选择结构" class="headerlink" title="5. 选择结构"></a>5. 选择结构</h1><h2 id="5-1-if"><a href="#5-1-if" class="headerlink" title="5.1 if"></a>5.1 if</h2><p>if{}else if{}else if{}else{}</p><h2 id="5-2-switch"><a href="#5-2-switch" class="headerlink" title="5.2 switch"></a>5.2 switch</h2><h3 id="5-2-1case穿透"><a href="#5-2-1case穿透" class="headerlink" title="5.2.1case穿透"></a>5.2.1case穿透</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;挂科&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="5-2-2-switch注意点"><a href="#5-2-2-switch注意点" class="headerlink" title="5.2.2 switch注意点"></a>5.2.2 switch注意点</h3><p><code>break;</code>全部加上</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_16-11-51.png" alt="Snipaste_2022-01-30_16-11-51"></p><p>字符的本质还是数字</p><p>java—-class(字节码文件) —反编译(IDEA)<img src="C:/Users/secqin/Desktop/Snipaste_2022-01-30_16-16-38.png" alt="Snipaste_2022-01-30_16-16-38"></p><h2 id="5-3-怎么看反编译文件"><a href="#5-3-怎么看反编译文件" class="headerlink" title="5.3 怎么看反编译文件?"></a>5.3 怎么看反编译文件?</h2><p>IDEA里面打开项目结构</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_16-19-19.png" alt="Snipaste_2022-01-30_16-19-19"></p><p>反编译文件和自己写的代码对比</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_16-20-48.png" alt="Snipaste_2022-01-30_16-20-48"></p><h1 id="6-java数据类型讲解"><a href="#6-java数据类型讲解" class="headerlink" title="6. java数据类型讲解"></a>6. java数据类型讲解</h1><h2 id="6-1-数据类型"><a href="#6-1-数据类型" class="headerlink" title="6.1 数据类型"></a>6.1 数据类型</h2><p><strong>强类型语言</strong></p><p>要求变量使用要严格符合规定,所有变量必须先定义后才能使用</p><p><strong>弱类型语言</strong></p><p><strong>Java数据类型分为两大类</strong></p><p>基本类型</p><p>引用类型</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_09-44-15.png" alt="Snipaste_2022-01-29_09-44-15"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num1 = <span class="number">30L</span>;</span><br><span class="line"><span class="keyword">float</span> num3 = <span class="number">3.14F</span></span><br></pre></td></tr></table></figure><p>String不是关键字,是类</p><p>String在idea里面不会报蓝,关键字在idea里面会报蓝</p><p>Integer:int对应的类</p><p>Byte:byte对应的类</p><p>什么是字节?</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_09-54-04.png" alt="Snipaste_2022-01-29_09-54-04"></p><h2 id="6-2-数据类型拓展"><a href="#6-2-数据类型拓展" class="headerlink" title="6.2 数据类型拓展"></a>6.2 数据类型拓展</h2><h3 id="6-2-1-整数拓展"><a href="#6-2-1-整数拓展" class="headerlink" title="6.2.1 整数拓展"></a>6.2.1 整数拓展</h3><p>表示:二进制0b     十进制    八进制0         十六进制0x</p><p>int i = 10;</p><p>int i2 = 010; //八进制0</p><p>int i3 = 0x10; //十六进制0x 0<del>9 A</del>F</p><p>sout打印的都是十进制</p><h3 id="6-2-2-浮点数拓展"><a href="#6-2-2-浮点数拓展" class="headerlink" title="6.2.2 浮点数拓展"></a>6.2.2 浮点数拓展</h3><p>float:</p><p>double:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.1f</span>;  <span class="comment">//0.1</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">1.0</span>/<span class="number">10</span>;  <span class="comment">//0.1</span></span><br><span class="line">        System.out.println(f == d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">12412414143242342234234f</span>;</span><br><span class="line"><span class="keyword">double</span> d = f+<span class="number">1</span>;  </span><br><span class="line">System.out.println(f == d);</span><br></pre></td></tr></table></figure><p>输出:true</p><p>浮点数:float 有限   离散   舍入误差     大约     接近但不等于</p><p>double</p><p>最好完全使用浮点数进行比较</p><p>银行业务:</p><p>BigDecimal</p><h3 id="6-2-3-字符拓展"><a href="#6-2-3-字符拓展" class="headerlink" title="6.2.3 字符拓展"></a>6.2.3 字符拓展</h3><p>char c1 = ‘a’;</p><p>char c2 = ‘中’</p><p>//所有的字符本质还是数字</p><p>//编码     Unicode     2字节    0-65535    Excel    2^16 = 65536</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c3 = <span class="string">&#x27;\u0061&#x27;</span>;</span><br><span class="line">System.out.println(c3);</span><br></pre></td></tr></table></figure><h3 id="6-2-4-转义字符"><a href="#6-2-4-转义字符" class="headerlink" title="6.2.4 转义字符"></a>6.2.4 转义字符</h3><p>\t:制表符</p><p>\n:换行</p><h3 id="6-2-5-问题"><a href="#6-2-5-问题" class="headerlink" title="6.2.5 问题"></a>6.2.5 问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String sa = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">String sb = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(sa == sb);</span><br><span class="line">String sc = <span class="string">&quot;he&quot;</span>;</span><br><span class="line">String sd = <span class="string">&quot;he&quot;</span>;</span><br><span class="line">System.out.println(sc==sd);</span><br></pre></td></tr></table></figure><p>Less is more!代码要精简易读!</p><h2 id="6-3-类型转换"><a href="#6-3-类型转换" class="headerlink" title="6.3 类型转换"></a>6.3 类型转换</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_10-43-48.png" alt="Snipaste_2022-01-29_10-43-48"></p><p>double优先级最高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">128</span>;</span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>输出(内存溢出):</p><p>-128</p><p>128</p><p>//强制转换:(类型)变量名</p><p>高-&gt;低:强制类型转换</p><p>低-&gt;高:自动类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">128</span>;</span><br><span class="line"><span class="keyword">double</span> b =i;</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>注意点:</p><p>不能对布尔值进行转换</p><p>不能把对象类型转换为不相干的类型</p><p>在把高容量转到低容量的时候,强制转换</p><p>转换的时候可能存在内存溢出,或者精度问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(((<span class="keyword">int</span>)<span class="number">23.7</span>));</span><br><span class="line">System.out.println((<span class="keyword">int</span>)-<span class="number">45.89f</span>);</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">int</span> d = c+<span class="number">1</span>;</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println((<span class="keyword">char</span>)d);</span><br></pre></td></tr></table></figure><p>jdk7的新特性,数字之间可以用下划线分割</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> money=<span class="number">10_0000_0000</span>;</span><br><span class="line"><span class="keyword">int</span> year = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> total = money*year;</span><br><span class="line">System.out.println(total);  <span class="comment">//-1474836480</span></span><br><span class="line"><span class="keyword">long</span> total2 = money*year; <span class="comment">//默认是int,转换的时候已经出问题了</span></span><br><span class="line"><span class="keyword">long</span> total3 = money*((<span class="keyword">long</span>)year); <span class="comment">//先把一个数字转换为long</span></span><br><span class="line">System.out.println(total3);</span><br><span class="line"><span class="comment">//L,l小写可能看为1</span></span><br></pre></td></tr></table></figure><h1 id="7-数组"><a href="#7-数组" class="headerlink" title="7. 数组"></a>7. 数组</h1><h2 id="7-1-一维数组"><a href="#7-1-一维数组" class="headerlink" title="7.1 一维数组"></a>7.1 一维数组</h2><h3 id="7-1-1-数组定义"><a href="#7-1-1-数组定义" class="headerlink" title="7.1.1 数组定义"></a>7.1.1 数组定义</h3><p>int[] nums;</p><p>int nums[];</p><p>nums = new int[10];//这里面可以存放十个int类型的数字</p><h3 id="7-1-2-开辟一个空间"><a href="#7-1-2-开辟一个空间" class="headerlink" title="7.1.2 开辟一个空间"></a>7.1.2 开辟一个空间</h3><p>nums = new int[10];</p><h3 id="7-1-3-给数组元素赋值"><a href="#7-1-3-给数组元素赋值" class="headerlink" title="7.1.3 给数组元素赋值"></a>7.1.3 给数组元素赋值</h3><p>没有赋值默认值是0</p><h3 id="7-1-4-通过下标去取"><a href="#7-1-4-通过下标去取" class="headerlink" title="7.1.4 通过下标去取"></a>7.1.4 通过下标去取</h3><p>num[0]</p><h3 id="7-1-5-计算所有元素的和"><a href="#7-1-5-计算所有元素的和" class="headerlink" title="7.1.5 计算所有元素的和"></a>7.1.5 计算所有元素的和</h3><p>arrays.Length //计算数组长度</p><p>数组的四个基本特点</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-20-53.png" alt="Snipaste_2022-01-30_17-20-53"></p><h2 id="7-2-内存"><a href="#7-2-内存" class="headerlink" title="7.2 内存"></a>7.2 内存</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-21-58.png" alt="Snipaste_2022-01-30_17-21-58"></p><p>声明数组</p><p>int[] array = null;</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-25-19.png" alt="Snipaste_2022-01-30_17-25-19"></p><p>创建数组</p><p>array = new int[10]; //默认初始化</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-35-01.png" alt="Snipaste_2022-01-30_17-35-01"></p><p>3.给数组元素中赋值</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-27-39.png" alt="Snipaste_2022-01-30_17-27-39"></p><h2 id="7-3-数组越界"><a href="#7-3-数组越界" class="headerlink" title="7.3 数组越界"></a>7.3 数组越界</h2><blockquote><p>java.lang.ArrayIndexOutOfBoundsException</p></blockquote><h2 id="7-4-数组三种初始化方式"><a href="#7-4-数组三种初始化方式" class="headerlink" title="7.4 数组三种初始化方式"></a>7.4 数组三种初始化方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//静态初始化:创建+赋值</span></span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">//动态初始化:包含默认初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">19</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-33-15.png" alt="Snipaste_2022-01-30_17-33-15"></p><p>没有被初始化的空间默认值都是0;</p><h2 id="7-5-下标越界"><a href="#7-5-下标越界" class="headerlink" title="7.5 下标越界"></a>7.5 下标越界</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-38-37.png" alt="Snipaste_2022-01-30_17-38-37"></p><h2 id="7-6-数组的使用"><a href="#7-6-数组的使用" class="headerlink" title="7.6 数组的使用"></a>7.6 数组的使用</h2><h3 id="7-6-1-for循环"><a href="#7-6-1-for循环" class="headerlink" title="7.6.1 for循环"></a>7.6.1 for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印全部的数组元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">    System.out.println(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-2-增强型for循环-for-each循环"><a href="#7-6-2-增强型for循环-for-each循环" class="headerlink" title="7.6.2 增强型for循环(for-each循环)"></a>7.6.2 增强型for循环(for-each循环)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强型for循环,没有下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-7-多维数组"><a href="#7-7-多维数组" class="headerlink" title="7.7 多维数组"></a>7.7 多维数组</h2><h2 id="7-8-Arrays类"><a href="#7-8-Arrays类" class="headerlink" title="7.8 Arrays类"></a>7.8 Arrays类</h2><h2 id="7-9-稀疏数组"><a href="#7-9-稀疏数组" class="headerlink" title="7.9 稀疏数组"></a>7.9 稀疏数组</h2><h1 id="8-方法"><a href="#8-方法" class="headerlink" title="8. 方法"></a>8. 方法</h1><h2 id="8-1-方法的组成"><a href="#8-1-方法的组成" class="headerlink" title="8.1 方法的组成"></a>8.1 方法的组成</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_16-38-23.png" alt="Snipaste_2022-01-30_16-38-23"></p><p>return 可以终止方法</p><h2 id="8-2-命令行传参"><a href="#8-2-命令行传参" class="headerlink" title="8.2 命令行传参"></a>8.2 命令行传参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span>+i+<span class="string">&quot;]:&quot;</span>+args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_16-57-47.png" alt="Snipaste_2022-01-30_16-57-47"></p><h2 id="8-3-可变参数"><a href="#8-3-可变参数" class="headerlink" title="8.3 可变参数"></a>8.3 可变参数</h2><p>不定项参数</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-00-17.png" alt="Snipaste_2022-01-30_17-00-17"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test01 t1 = <span class="keyword">new</span> test01();</span><br><span class="line">        t1.test(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">23</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>... i)</span></span>&#123;</span><br><span class="line">        System.out.println(i[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-什么是面向对象编程"><a href="#9-什么是面向对象编程" class="headerlink" title="9.什么是面向对象编程"></a>9.什么是面向对象编程</h1><h2 id="9-1-OOP-面向对象编程"><a href="#9-1-OOP-面向对象编程" class="headerlink" title="9.1 OOP(面向对象编程)"></a>9.1 OOP(面向对象编程)</h2><p>一个项目应该只存在一个main方法</p><p>以类的方式组织代码</p><p>以对象的方式封装数据</p><h2 id="9-2-构造器"><a href="#9-2-构造器" class="headerlink" title="9.2 构造器"></a>9.2 构造器</h2><p>也叫构造方法</p><blockquote><p>test1.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Man man = <span class="keyword">new</span> Man();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Man.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下反编译的文件(out里面的.class文件)</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-02_16-52-24.png" alt="Snipaste_2022-02-02_16-52-24"></p><p>一个类即使什么都不写,它也会存在一个方法,构造方法</p><p>显示的定义构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.使用new关键字,本质是在调用构造器</p><p>干掉无参:定义有参构造器</p><p><strong>一旦定义了有参构造,无参就必须显示定义</strong></p><p><em>alt+insert可以快速无参和有参构造</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点:</p><p>构造器:1.和类名相同</p><p>2.没有返回值</p><p>作用:</p><p>new的本质是调用构造方法</p><p>2.初始化对象的值</p><p>3.定了有参后,一定要显示调用无参</p><h2 id="9-3-内存分析"><a href="#9-3-内存分析" class="headerlink" title="9.3 内存分析"></a>9.3 内存分析</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-02_19-09-57.png" alt="Snipaste_2022-02-02_19-09-57"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-02_19-10-48.png" alt="Snipaste_2022-02-02_19-10-48"></p><p>对象是通过引用来操作的:栈-&gt;堆</p><p>类:</p><p>静态的属性   属性</p><p>动态的行为   方法</p><h1 id="10-封装"><a href="#10-封装" class="headerlink" title="10. 封装"></a>10. 封装</h1><p><strong>高内聚,低耦合</strong></p><p>该漏的漏,该藏的藏</p><p>属性私有</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-02_19-23-23.png" alt="Snipaste_2022-02-02_19-23-23"></p><p>要提供一些操作这个数据的方法</p><p>属性私有,get/set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> String name;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><em>alt+insert</em></p><p>提高程序的安全性,保护数据</p><p>隐藏代码的实现细节</p><p>统一接口</p><p>系统可维护性增加了</p><h1 id="11-继承"><a href="#11-继承" class="headerlink" title="11. 继承"></a>11. 继承</h1><p>JAVA中类只有单继承,没有多继承</p><p>但可以简介继承多个(爷爷辈)</p><p>子类(派生类)和父类(基类)</p><p>extends</p><p>继承和组合</p><blockquote><p>public class Student extends Man</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    Man man = <span class="keyword">new</span> Man();</span><br></pre></td></tr></table></figure><p>子类可以继承父类的所有方法</p><p>四个修饰符:</p><p>public</p><p>protected</p><p>default</p><p>private</p><p><em>ctrl+h</em>:打开类树</p><p>在Java中所有的类都默认直接或者间接继承Object类</p><p>一个儿子只能有一个爸爸,一个爸爸可以有多个儿子</p><h1 id="12-Super"><a href="#12-Super" class="headerlink" title="12. Super"></a>12. Super</h1><p>调父类的方法或者属性</p><p>私有的东西无法被继承</p><p><strong>隐藏代码,先调父类的无参构造,而且父类的构造器必须在第一行,如果不是第一行就会报错</strong></p><p><strong>父类和子类的构造函数有点意思,重点和难点</strong></p><p>注意点:</p><p>1.super调用父类的构造方法,必须在构造方法的第一个</p><p>2.super必须只能出现在子类的方法或者构造方法中</p><p>3.super和this不能同时调用构造方法</p><p>this:</p><p>代表的对象不同</p><p>this:本身调用者这个对象</p><p>super:代表父类对象的应用</p><p>前提</p><p>this:没有继承也可以使用</p><p>super:只能在继承条件下可以使用</p><p>构造方法</p><p>this();本类的构造</p><p>super():父类的构造</p><h1 id="13-方法的重写"><a href="#13-方法的重写" class="headerlink" title="13. 方法的重写"></a>13. 方法的重写</h1><p><strong>重写都是方法的重写,和属性无关</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">a.test();</span><br><span class="line">B b = <span class="keyword">new</span> A();</span><br><span class="line">b.test();</span><br></pre></td></tr></table></figure><p>@Override 重写</p><p>静态方法和非静态方法区别很大</p><p>重写与静态方法无关,只和非静态有关</p><p>重写只能public,并且不能是静态方法,和重载不一样</p><p><strong>总结</strong></p><p>重写:</p><ul><li>需要有继承关系</li><li>子类重写父类方法</li><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符:范围可以扩大,但是不能缩小     public-&gt;protected-&gt;default-&gt;private</li><li>抛出的异常:范围可以被缩小,但不能扩大</li><li>重写,子类的方法和父类必须要一致:方法体不同!</li></ul><p>为什么需要重写?</p><ol><li><p>父类的功能子类不一定需要,或者不一定满足!</p><p>快捷键:<em>Alt + Insert        :     override</em></p></li></ol><h1 id="14-多态"><a href="#14-多态" class="headerlink" title="14. 多态"></a>14. 多态</h1><p>动态编译类型:可扩展性更强</p><blockquote><p>Student.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;liyixin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;est&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Person.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;liqin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>test.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//        一个对象的实际类型是确定的</span></span><br><span class="line"><span class="comment">//        可以指向的引用类型就不确定了</span></span><br><span class="line"><span class="comment">//        可以指向的引用类型就不确定了:父类的引用指向子类</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.run(); <span class="comment">//子类重写了父类的方法,执行子类的方法</span></span><br><span class="line"><span class="comment">//        对象能执行哪些方法,主要看对象左边的类型,和右边关系不大</span></span><br><span class="line"><span class="comment">//        Student 能调用的方法都是自己的或者继承父类的,</span></span><br><span class="line"><span class="comment">//        person 父类型,可以调用子类,但是不能调用子类独有的方法</span></span><br><span class="line">        s1.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((Student) s2).eat();</span><br></pre></td></tr></table></figure><p>如果强转可以用</p><p>多态注意事项:</p><ol><li>多态的方法的多态,属性无多态</li><li>父类和子类必须有联系,否则类型转换异常(String)ClassCastException</li><li>存在条件:继承关系,方法需要重写,父类的引用,指向子类对象! <strong>父亲 f1 = new 儿子()</strong></li></ol><p>三种方法不能重写</p><ol><li>static方法属于类,不属于任何一个实例</li><li>final 常量池</li><li>private 私有方法</li></ol><h1 id="15-instanceof和类型转换"><a href="#15-instanceof和类型转换" class="headerlink" title="15. instanceof和类型转换"></a>15. instanceof和类型转换</h1><p>判断一个对象是什么类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object &gt; String</span></span><br><span class="line"><span class="comment">//        Object &gt; Person &gt; Teacher</span></span><br><span class="line"><span class="comment">//        Object &gt; Person &gt; Student</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student); <span class="comment">//T</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person); <span class="comment">//T</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);<span class="comment">//F</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);<span class="comment">//T</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);<span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student); <span class="comment">//t</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person); <span class="comment">//t</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);<span class="comment">//F</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);<span class="comment">//T</span></span><br><span class="line"><span class="comment">//        System.out.println(person instanceof String);//F 编译就报错</span></span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student); <span class="comment">//t</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person); <span class="comment">//t</span></span><br><span class="line"><span class="comment">//        System.out.println(student instanceof Teacher); // 编译就报错</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object);<span class="comment">//T</span></span><br><span class="line"><span class="comment">//        System.out.println(person instanceof String);//F 编译就报错</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>X instanceof Y</strong>:X与Y见是否存在父子关系,决定是否编译可以通过 和接口对比理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类型之间的转换,基本类型的转换 高低 父类与子类,父类代表高</span></span><br><span class="line"><span class="comment">//        高            低</span></span><br><span class="line">        Person obj = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//将这个对转换为student类型,我们就可以使用student类型的方法了</span></span><br><span class="line">        ((Student) obj).go();</span><br><span class="line">        Student student = (Student) obj;</span><br><span class="line">        student.go();</span><br><span class="line"><span class="comment">//        子类转父类可能丢失自己的一些方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结:</p><ol><li>父类引用指向子类的对象</li><li>把子类转换为父类,向上转型,不用强制转换</li><li>把父类转换为子类,向下转型:强制转换</li><li>方便方法的调用,减少重复的代码!科有效提升代码利用率</li></ol><p>封装,继承,多态! 抽象类,接口</p><h1 id="16-static"><a href="#16-static" class="headerlink" title="16.static"></a>16.static</h1><p>第一段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age; <span class="comment">//静态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        go();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(Student.age);</span><br><span class="line">        System.out.println(student.age);</span><br><span class="line">        go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//代码块(匿名代码块)</span></span><br><span class="line">        <span class="comment">//赋初始值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//静态代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态导入包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br></pre></td></tr></table></figure><p>被final定义,直接断子绝孙,不能被继承</p><h1 id="17-抽象类"><a href="#17-抽象类" class="headerlink" title="17.抽象类"></a>17.抽象类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//    约束,有人帮我们实现</span></span><br><span class="line"><span class="comment">//    抽象方法,只有方法名字,没有方法的实现</span></span><br><span class="line">    <span class="comment">//抽象类,extents:单继承,无多继承,接口可以多继承,插座</span></span><br><span class="line"><span class="comment">//    不能new这个抽象类,只能靠子类去实现他,约束</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//    一旦有抽象方法,就必须是抽象类</span></span><br><span class="line"><span class="comment">//    抽象类可以写普通方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    思考题? new存在构造器么?</span></span><br><span class="line"><span class="comment">//    存在的意义  抽象出来  提高开发效率</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>思考</p></blockquote><p>new抽象类存在构造器么?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类的所有方法,继承了他的子类,都必须要实现他的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-接口-OO"><a href="#18-接口-OO" class="headerlink" title="18.接口(OO)"></a>18.接口(OO)</h1><p>接口,只有规范!自己无法写方法,专业的约束,约束和实现分离,面向接口的编程</p><p>接口的本质是契约,接口的精髓是对对象的抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//    抽象的思维锻炼~ Java,架构师</span></span><br><span class="line"><span class="comment">//    接口中所有的定义其实都是抽象的public</span></span><br><span class="line"><span class="comment">//    接口都需要有实现类</span></span><br><span class="line"><span class="comment">//    接口中定义的属性,都是常量public static final ~</span></span><br><span class="line">    <span class="keyword">int</span> AGE = <span class="number">99</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类的所有方法,继承了他的子类,都必须要实现他的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonImpl</span> <span class="keyword">implements</span> <span class="title">Person</span>,<span class="title">Student</span></span>&#123; <span class="comment">//利用接口实现多继承,接口只有方法的定义,</span></span><br><span class="line"><span class="comment">//    实现了接口的类,就需要重写接口的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>作用:</strong></p><ol><li>约束</li><li>定义一些方法,让不同的人实现~</li><li>public abstract</li><li>public static final</li><li>接口不能被实例化,接口中没有构造方法</li><li>可以实现多个接口</li><li>必须要重写接口中的方法</li></ol><h1 id="19-内部类"><a href="#19-内部类" class="headerlink" title="19.内部类"></a>19.内部类</h1><ol><li>成员内部类</li><li>静态内部类’</li><li>局部内部类</li><li>匿名内部类’</li></ol><h1 id="20-异常"><a href="#20-异常" class="headerlink" title="20.异常"></a>20.异常</h1><h2 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1.什么是异常"></a>1.什么是异常</h2>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解软件合集</title>
      <link href="/2022/01/30/%E7%A0%B4%E8%A7%A3%E8%BD%AF%E4%BB%B6%E5%90%88%E9%9B%86/"/>
      <url>/2022/01/30/%E7%A0%B4%E8%A7%A3%E8%BD%AF%E4%BB%B6%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><h2 id="Navicat-15"><a href="#Navicat-15" class="headerlink" title="Navicat 15"></a>Navicat 15</h2><p>链接：<a href="https://pan.baidu.com/s/1wzoYWUvdzjACbhade_GYPA">https://pan.baidu.com/s/1wzoYWUvdzjACbhade_GYPA</a><br>提取码：1234 </p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>链接：<a href="https://pan.baidu.com/s/1ditBXPwn7K_QaKpyeK8Akg">https://pan.baidu.com/s/1ditBXPwn7K_QaKpyeK8Akg</a><br>提取码：1234 </p><h2 id="xshell"><a href="#xshell" class="headerlink" title="xshell"></a>xshell</h2><p>链接：<a href="https://pan.baidu.com/s/13_hF4doPZdIYHHEj1TwCVA">https://pan.baidu.com/s/13_hF4doPZdIYHHEj1TwCVA</a><br>提取码：1234 </p><h2 id="xmind"><a href="#xmind" class="headerlink" title="xmind"></a>xmind</h2><p>链接：<a href="https://pan.baidu.com/s/1ZQgMMAq878HRXMtczw1c3g">https://pan.baidu.com/s/1ZQgMMAq878HRXMtczw1c3g</a><br>提取码：1234 </p><h2 id="IDEA-2021-03版本以下全破解"><a href="#IDEA-2021-03版本以下全破解" class="headerlink" title="IDEA(2021.03版本以下全破解)"></a>IDEA(2021.03版本以下全破解)</h2><p>链接：<a href="https://pan.baidu.com/s/1576LM-6vtiYFTICL2ZT4YQ">https://pan.baidu.com/s/1576LM-6vtiYFTICL2ZT4YQ</a><br>提取码：1234 </p>]]></content>
      
      
      <categories>
          
          <category> 破解软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8.2上面安装java8</title>
      <link href="/2022/01/29/centos8-2%E4%B8%8A%E9%9D%A2%E5%AE%89%E8%A3%85java8/"/>
      <url>/2022/01/29/centos8-2%E4%B8%8A%E9%9D%A2%E5%AE%89%E8%A3%85java8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-jdk8-linux链接"><a href="#1-jdk8-linux链接" class="headerlink" title="1.jdk8(linux链接)"></a>1.jdk8(linux链接)</h1><p>链接：<a href="https://pan.baidu.com/s/1qIogUyhH8vicHgBKwKw0Uw">https://pan.baidu.com/s/1qIogUyhH8vicHgBKwKw0Uw</a><br>提取码：1234 </p>]]></content>
      
      
      <categories>
          
          <category> linux开发环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux开发环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在华为云上面安装kali</title>
      <link href="/2022/01/29/%E5%9C%A8%E5%8D%8E%E4%B8%BA%E4%BA%91%E4%B8%8A%E9%9D%A2%E5%AE%89%E8%A3%85kali/"/>
      <url>/2022/01/29/%E5%9C%A8%E5%8D%8E%E4%B8%BA%E4%BA%91%E4%B8%8A%E9%9D%A2%E5%AE%89%E8%A3%85kali/</url>
      
        <content type="html"><![CDATA[<p>39元买了一台华为云耀云服务器1年,香的一批</p><p>第一步:检查自己的服务器在那个城市,哪个可用区</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-03-01.png" alt="Snipaste_2022-01-29_23-03-01"></p><p>然后去购买额外的磁盘(和自己的服务器在同一个城市,同一个可用区)</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-05-01.png" alt="Snipaste_2022-01-29_23-05-01"></p><p>然后来对应的服务器挂载磁盘</p><p><img src="C:/Users/secqin/Desktop/Snipaste_2022-01-29_23-06-46.png" alt="Snipaste_2022-01-29_23-06-46"></p><p>然后通过登录界面登录,然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.163.com/kali-images/kali-2021.4a/kali-linux-2021.4a-installer-amd64.iso</span><br></pre></td></tr></table></figure><p>下载到当前目录</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-14-59.png" alt="Snipaste_2022-01-29_23-14-59"></p><p>这个速度还是很猛的,不能使用kali的官方源,官方源蜗速,用163的下载</p><p>挂载好我们添加的数据盘之后，首先执行一下<code>fdisk -l</code>看一下磁盘的情况：<img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-20-53.png" alt="Snipaste_2022-01-29_23-20-53"></p><p>突然发现我那个10GB的硬盘没有挂载上去,挂载一下硬盘<img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-27-12.png" alt="Snipaste_2022-01-29_23-27-12"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-28-07.png" alt="Snipaste_2022-01-29_23-28-07"></p><p>在这里我将把镜像写入<code>vdb</code>这块数据盘，请确保里面没有需要的数据了，所以更加建议创建一个临时的云硬盘来做这件事情。Linux 下写 ISO 是很简单的，用<code>dd</code>就可以了，非 root 的情况下别忘了<code>sudo</code>哦。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=kali-linux-2021.4a-installer-amd64.iso of=/dev/vdb</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-32-16.png" alt="Snipaste_2022-01-29_23-32-16"></p><p>接下来我们需要把安装程序跑起来，途径也是多样的，我选择直接操作 GRUB 2 的命令行。不过，先调整一下超时时间来避免来不及操作。编辑<code>/etc/default/grub</code>这个文件，将<code>GRUB_TIMEOUT</code>调得足够长，例如 60 秒。然后运行<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code>写入配置。</p><blockquote><p><strong>引导进入安装程序</strong></p></blockquote><p>这时可以<code>reboot</code>了，然后登录华为云的控制台，在对应的云主机处点击 “操作” 下的 “登录” 即可以进入网页 VNC。若之前配置无误，现在应该正处于 GRUB 菜单，看起来就像这样：<img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-35-39.png" alt="Snipaste_2022-01-29_23-35-39"></p><p>然后我们按<code>c</code>键进入命令行模式，来手动引导。现在的发行版基本都是使用 GRUB 2 了，如果还是 GRUB 的话要把下面的<code>set root=(hd1)</code>改成<code>root (hd1)</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grub&gt; set root=(hd1)</span><br><span class="line">grub&gt; chainloader +1</span><br><span class="line">grub&gt; boot</span><br></pre></td></tr></table></figure><p>进入安装目录</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-36-08.png" alt="Snipaste_2022-01-29_23-36-08"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-39-31.png" alt="Snipaste_2022-01-29_23-39-31"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-41-58.png" alt="Snipaste_2022-01-29_23-41-58"></p><p>到这一步 kali会检测安装安装光盘，这时候我们选择手动探测加载光盘，然后我们选 none</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-40-18.png" alt="Snipaste_2022-01-29_23-40-18"></p><p>注意这个地方是<code>/dev/vdb1</code></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-42-46.png" alt="Snipaste_2022-01-29_23-42-46"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-44-08.png" alt="Snipaste_2022-01-29_23-44-08"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-44-13.png" alt="Snipaste_2022-01-29_23-44-13"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-44-27.png" alt="Snipaste_2022-01-29_23-44-27"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-44-49.png" alt="Snipaste_2022-01-29_23-44-49"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-45-36.png" alt="Snipaste_2022-01-29_23-45-36"></p><p>然后回车后就可以接着安装，磁盘分区的位置我们选我们的系统盘。</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-46-04.png" alt="Snipaste_2022-01-29_23-46-04"></p><p>然后将所有文件放在同一个分区中</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-46-13.png" alt="Snipaste_2022-01-29_23-46-13"></p><p>最后结束分区设定并将修改写入磁盘</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-46-23.png" alt="Snipaste_2022-01-29_23-46-23"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-46-32.png" alt="Snipaste_2022-01-29_23-46-32"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-49-05.png" alt="Snipaste_2022-01-29_23-49-05"></p><p>下面这里安装grub启动器也是安装到第一个磁盘</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_00-00-16.png" alt="Snipaste_2022-01-30_00-00-16"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_00-00-48.png" alt="Snipaste_2022-01-30_00-00-48"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_00-01-51.png" alt="Snipaste_2022-01-30_00-01-51"></p><p>登录</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_00-03-19.png" alt="Snipaste_2022-01-30_00-03-19"></p><blockquote><p>在腾讯云下面:提示光盘一直挂载报错。可以终止安装 进入kali安装界面的 shell 里面执行这个 mount /dev/vdb1 /cdrom  先挂载到cdrom 然后再去安装就好了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kali_linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali_linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea快捷键</title>
      <link href="/2022/01/29/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/01/29/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>psvm</p><p>sout</p>]]></content>
      
      
      <categories>
          
          <category> idea </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOC理论推导</title>
      <link href="/2022/01/29/IOC%E7%90%86%E8%AE%BA%E6%8E%A8%E5%AF%BC/"/>
      <url>/2022/01/29/IOC%E7%90%86%E8%AE%BA%E6%8E%A8%E5%AF%BC/</url>
      
        <content type="html"><![CDATA[<ol><li>UserDao接口</li><li>UserDaoImpl实现类</li><li>UserService业务接口</li><li>UserServiceImpl业务实现类</li></ol><p>导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户实际调用的是业务层,不直接接触Dao层</p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring5的组成和拓展</title>
      <link href="/2022/01/27/spring5%E7%9A%84%E7%BB%84%E6%88%90%E5%92%8C%E6%8B%93%E5%B1%95/"/>
      <url>/2022/01/27/spring5%E7%9A%84%E7%BB%84%E6%88%90%E5%92%8C%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="1-spring7大模块"><a href="#1-spring7大模块" class="headerlink" title="1.spring7大模块"></a>1.spring7大模块</h1><p><img src="https://gitee.com/secqin/img/raw/master/img/20170713150400373.bmp" alt="20170713150400373"></p><p>在Spring的官网有这个介绍:现代化Java开发!说白了就是基于spring的开发</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-03_16-52-03.png" alt="Snipaste_2022-02-03_16-52-03"></p><h1 id="2-spring-Coot"><a href="#2-spring-Coot" class="headerlink" title="2.spring Coot"></a>2.spring Coot</h1><p>一个快速开发的脚手架</p><p>基于spring boot可以快速开发单个微服务</p><p>约定大于配置</p><h1 id="3-spring-Cloud"><a href="#3-spring-Cloud" class="headerlink" title="3.spring Cloud"></a>3.spring Cloud</h1><p>springcloud是基于spring boot实现的</p><p>因为现在大多数公司都在使用spring boot进行快速开发,学习spring boot是前提,需要完全掌握spring和springmvc!承上启下的作用!</p><p><em>spring弊端:发展了太久后违背的原来的理念!</em></p><p><em>配置十分繁琐,人称”配置地狱”</em></p><p><strong>现在大多数公司都在使用spring boot进行开发,学习spring boot的前提,需要完全掌握spring,以及springmvc!承上启下是作用!</strong></p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring简介</title>
      <link href="/2022/01/27/spring%E7%AE%80%E4%BB%8B/"/>
      <url>/2022/01/27/spring%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-spring简介"><a href="#1-spring简介" class="headerlink" title="1.spring简介"></a>1.spring简介</h1><p>Spring框架以interface21为基础</p><p>不要重复造轮子</p><p>有强大的向后兼容性,整合了现有的技术框架</p><p>spring为了简化开发,使现有的技术更容易使用,本身是一个大杂烩</p><p>SSH:Struct2+Spring+Hibernate</p><p>SSM:SpringMVC+Spring+Mybatis</p><p><a href="https://spring.io/">spring官网</a></p><p><a href="https://repo.spring.io/ui/native/release/org/springframework/spring">spring全版本下载</a></p><h1 id="2-maven仓库里面的spring-web-mvc"><a href="#2-maven仓库里面的spring-web-mvc" class="headerlink" title="2.maven仓库里面的spring web mvc"></a>2.maven仓库里面的spring web mvc</h1><p><a href="https://mvnrepository.com/artifact/org.springframework/spring-webmvc">https://mvnrepository.com/artifact/org.springframework/spring-webmvc</a></p><h1 id="3-spring优点"><a href="#3-spring优点" class="headerlink" title="3.spring优点"></a>3.spring优点</h1><p>spring是一个免费开源的框架</p><p>spring是一个轻量级,非入侵式的框架</p><p>控制反转(IOC),面向切面编程(AOP)</p><p>支持事务的处理,对框架整合的支持</p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>注解和反射</title>
      <link href="/2022/01/22/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/01/22/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> javase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javase </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
