<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>18-左神的算法课</title>
      <link href="/2022/03/08/18-%E5%B7%A6%E7%A5%9E%E7%9A%84%E7%AE%97%E6%B3%95%E8%AF%BE/"/>
      <url>/2022/03/08/18-%E5%B7%A6%E7%A5%9E%E7%9A%84%E7%AE%97%E6%B3%95%E8%AF%BE/</url>
      
        <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>c++选择排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    arr[i]=arr[i]^arr[j];</span><br><span class="line">    arr[j]=arr[i]^arr[j];</span><br><span class="line">    arr[i]=arr[i]^arr[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">123</span>,<span class="number">34</span>,<span class="number">45</span>,<span class="number">123</span>,<span class="number">123</span>,<span class="number">456</span>,<span class="number">767</span>,<span class="number">43</span>,<span class="number">34</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> min = a[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;<span class="number">10</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;min)&#123;</span><br><span class="line">                <span class="built_in">swap</span>(a,i,j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c:a)&#123;</span><br><span class="line">        cout &lt;&lt; c &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h1><p>c++冒泡排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> *arr,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>&#123;</span><br><span class="line">    arr[i]=arr[i]^arr[j];</span><br><span class="line">    arr[j]=arr[i]^arr[j];</span><br><span class="line">    arr[i]=arr[i]^arr[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">123</span>,<span class="number">34</span>,<span class="number">45</span>,<span class="number">123</span>,<span class="number">123</span>,<span class="number">456</span>,<span class="number">767</span>,<span class="number">43</span>,<span class="number">34</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">9</span>;i&gt;<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j]&gt;a[j+<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="built_in">swap</span>(a,j,j+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c:a)&#123;</span><br><span class="line">        cout &lt;&lt; c &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>插入排序c++</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"># 归并排序</span><br><span class="line"></span><br><span class="line">```c++</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> m,<span class="keyword">int</span> r)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeSort</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = l + ((r-l) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">mergeSort</span>(arr,l,mid);</span><br><span class="line">    <span class="built_in">mergeSort</span>(arr,mid+<span class="number">1</span>,r);</span><br><span class="line">    <span class="built_in">merge</span>(arr,l,mid,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> arr[],<span class="keyword">int</span> l,<span class="keyword">int</span> m,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> help[r-l+<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>; <span class="comment">// 辅助函数的指针</span></span><br><span class="line">    <span class="keyword">int</span> p1 = l; <span class="comment">//左指针</span></span><br><span class="line">    <span class="keyword">int</span> p2 = m+<span class="number">1</span>; <span class="comment">//右指针</span></span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;= m&amp;&amp; p2 &lt;=r)&#123;</span><br><span class="line">        help[i++] = arr[p1] &lt; arr [p2] ? arr[p1++] : arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (p1 &lt;=m)&#123;   <span class="comment">//当左边指针没有越界,就把左边全部考入进</span></span><br><span class="line">        help[i++] = arr[p1++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(p2&lt;=r)&#123;</span><br><span class="line">        help[i++] = arr[p2++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(help)/<span class="built_in"><span class="keyword">sizeof</span></span>(help[<span class="number">0</span>]);i++)&#123;</span><br><span class="line">        arr[l+i] = help[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">123</span>,<span class="number">125</span>,<span class="number">12</span>,<span class="number">34</span>,<span class="number">32</span>,<span class="number">56</span>,<span class="number">789</span>,<span class="number">123</span>,<span class="number">456</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="built_in">mergeSort</span>(a,<span class="number">0</span>,<span class="number">9</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">        cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="树-2022-03-20"><a href="#树-2022-03-20" class="headerlink" title="树(2022.03.20)"></a>树(2022.03.20)</h1><blockquote><p>前段时间自己整了一个打印机,所以很长时间没有更新博客,感觉有些内容还是要写在博客上面,写波杰克上一个关键的问题是无法方便的画图,左神的算法课真是博大精深</p></blockquote><h2 id="数的前中后序遍历的两种实现方式"><a href="#数的前中后序遍历的两种实现方式" class="headerlink" title="数的前中后序遍历的两种实现方式"></a>数的前中后序遍历的两种实现方式</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><blockquote><p>递归方法其实蛮好理解的,递归就相当于系统帮我们压栈</p></blockquote><blockquote><p>树的节点</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">right</span>;</span></span><br><span class="line">    <span class="built_in">Node</span> (<span class="keyword">int</span> v,struct Node* l,struct Node* r)    <span class="comment">// 构造函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        left = l;</span><br><span class="line">        right = r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>整棵树</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">head</span> =</span> <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">5</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">head-&gt;left = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">3</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">head-&gt;right = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">8</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">head-&gt;left-&gt;left = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">2</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">head-&gt;left-&gt;right = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">4</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">head-&gt;left-&gt;left-&gt;left = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">1</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">head-&gt;right-&gt;left=<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">7</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">head-&gt;right-&gt;left-&gt;left=<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">6</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">head-&gt;right-&gt;right=<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">10</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">head-&gt;right-&gt;right-&gt;left=<span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">9</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br><span class="line">head-&gt;right-&gt;right-&gt;right = <span class="keyword">new</span> <span class="built_in">Node</span>(<span class="number">11</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</span><br></pre></td></tr></table></figure><blockquote><p>整棵树的图示</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">  A((5))--&gt;B((3))</span><br><span class="line">  A((5))--&gt;C((8))</span><br><span class="line">  B((3))--&gt;D((2))</span><br><span class="line">  B((3))--&gt;E((4))</span><br><span class="line">  D((2))--&gt;F((1))</span><br><span class="line">  C((8))--&gt;G((7))</span><br><span class="line">  G((7))--&gt;H((左6))</span><br><span class="line">  C((8))--&gt;I((10))</span><br><span class="line">  I((10))--&gt;J((9))</span><br><span class="line">  I((10))--&gt;K((11))</span><br></pre></td></tr></table></figure><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(Node *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    cout &lt;&lt; head-&gt;value &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">preOrder</span>(head-&gt;left);</span><br><span class="line">    <span class="built_in">preOrder</span>(head-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>前序遍历的压栈示意图</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">graph TB;</span><br><span class="line">  A((5))--&gt;|打印5,进入3|B((3))</span><br><span class="line">  A((5))--&gt;C((8))</span><br><span class="line">  B((3))--&gt;|打印3,进入2|D((2))</span><br><span class="line">  D((2))--&gt;|返回3,找3的右子,发现4|B((3))</span><br><span class="line">  B((3))--&gt;E((4))</span><br><span class="line">  E((4))--&gt;|打印4,没有发现4的左右子,返回3|B((3))</span><br><span class="line">  D((2))--&gt;|打印2,进入1|F((1))</span><br><span class="line">  F((1))--&gt;|打印1,发现1的左右子为空,返回2,并找2的右子,发现没有|D((2))</span><br><span class="line">  C((8))--&gt;G((7))</span><br><span class="line">  G((7))--&gt;H((左6))</span><br><span class="line">  C((8))--&gt;I((10))</span><br><span class="line">  I((10))--&gt;J((9))</span><br><span class="line">  I((10))--&gt;K((11))</span><br></pre></td></tr></table></figure><blockquote><p>markdown画图太复杂了,后面的过程依次类推,如果用Visio画图的画,需要截图上传,图床的空间不足了</p></blockquote><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">inOrder</span><span class="params">(Node *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">inOrder</span>(head-&gt;left);</span><br><span class="line">    cout &lt;&lt; head-&gt;value &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="built_in">inOrder</span>(head-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">posOrder</span><span class="params">(Node *head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">nullptr</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">posOrder</span>(head-&gt;left);</span><br><span class="line">    <span class="built_in">posOrder</span>(head-&gt;right);</span><br><span class="line">    cout &lt;&lt; head-&gt;value &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="非递归"><a href="#非递归" class="headerlink" title="非递归"></a>非递归</h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
            <tag> 对数器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17-c3数据结构</title>
      <link href="/2022/02/26/17-c3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2022/02/26/17-c3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="整体思维导图"><a href="#整体思维导图" class="headerlink" title="整体思维导图"></a>整体思维导图</h1><p><img src="https://gitee.com/secqin/img/raw/master/%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84.png"></p><p>老师的代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;malloc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DongShuzu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span>* pShuZuTou;            <span class="comment">//�׵�ַ</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> iRongLiang;   <span class="comment">//����</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> iShuliang;    <span class="comment">//�Ѵ洢������</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChuShiHua</span><span class="params">(struct DongShuzu* pStShuzu)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZengJia</span><span class="params">(struct DongShuzu* pStShuzu, <span class="keyword">int</span> iShuJu)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShuChu</span><span class="params">(struct DongShuzu* pStShuzu)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZengJiaZhong</span><span class="params">(struct DongShuzu* pStShuzu, <span class="keyword">int</span> iShuJu, <span class="keyword">unsigned</span> <span class="keyword">int</span> iXiaBiao)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZengJiaKongJian</span><span class="params">(struct DongShuzu* pStShuzu)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShanChuWei</span><span class="params">(struct DongShuzu* pStShuzu)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShanChuQuanBu</span><span class="params">(struct DongShuzu* pStShuzu)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShiFang</span><span class="params">(struct DongShuzu* pStShuzu)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShanChuZhong</span><span class="params">(struct DongShuzu* pStShuzu, <span class="keyword">unsigned</span> <span class="keyword">int</span> iWeiZhi)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DongShuzu</span> <span class="title">stShuzu</span>;</span></span><br><span class="line"><span class="built_in">ChuShiHua</span>(&amp;stShuzu);</span><br><span class="line"></span><br><span class="line"><span class="built_in">ZengJia</span>(&amp;stShuzu, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">ZengJia</span>(&amp;stShuzu, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">ZengJia</span>(&amp;stShuzu, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">ZengJiaZhong</span>(&amp;stShuzu, <span class="number">5</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">ZengJiaZhong</span>(&amp;stShuzu, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line"><span class="built_in">ShuChu</span>(&amp;stShuzu);</span><br><span class="line"><span class="built_in">ShanChuZhong</span>(&amp;stShuzu, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">ShuChu</span>(&amp;stShuzu);</span><br><span class="line"><span class="built_in">free</span>(stShuzu.pShuZuTou);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShanChuZhong</span><span class="params">(struct DongShuzu* pStShuzu, <span class="keyword">unsigned</span> <span class="keyword">int</span> iWeiZhi)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pStShuzu || iWeiZhi &gt; pStShuzu-&gt;iShuliang)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;������������\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//��ߵ���ǰ�ƶ�</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = iWeiZhi - <span class="number">1</span>; i &lt; pStShuzu-&gt;iShuliang - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">pStShuzu-&gt;pShuZuTou[i] = pStShuzu-&gt;pShuZuTou[i + <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//����-1</span></span><br><span class="line">pStShuzu-&gt;iShuliang--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShiFang</span><span class="params">(struct DongShuzu* pStShuzu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pStShuzu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pStShuzu-&gt;iShuliang = <span class="number">0</span>;</span><br><span class="line">pStShuzu-&gt;iRongLiang = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(pStShuzu-&gt;pShuZuTou);</span><br><span class="line">pStShuzu-&gt;pShuZuTou = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShanChuQuanBu</span><span class="params">(struct DongShuzu* pStShuzu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pStShuzu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pStShuzu-&gt;iShuliang = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShanChuWei</span><span class="params">(struct DongShuzu* pStShuzu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pStShuzu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pStShuzu-&gt;iShuliang--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZengJiaKongJian</span><span class="params">(struct DongShuzu* pStShuzu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pStShuzu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pStShuzu-&gt;iRongLiang == pStShuzu-&gt;iShuliang)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//�������</span></span><br><span class="line">pStShuzu-&gt;iRongLiang += <span class="number">10</span>;</span><br><span class="line"><span class="comment">//����ռ�</span></span><br><span class="line"><span class="keyword">int</span>* pTemp = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * pStShuzu-&gt;iRongLiang);</span><br><span class="line"><span class="built_in">memset</span>(pTemp, <span class="number">0</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * pStShuzu-&gt;iRongLiang);</span><br><span class="line"><span class="comment">//��ԭ���ݸ��ƽ��¿ռ�</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pStShuzu-&gt;iShuliang; i++)</span><br><span class="line">&#123;</span><br><span class="line">pTemp[i] = pStShuzu-&gt;pShuZuTou[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//��ԭ�ռ��ͷ�</span></span><br><span class="line"><span class="built_in">free</span>(pStShuzu-&gt;pShuZuTou);</span><br><span class="line"><span class="comment">//������ͷָ��ָ���¿ռ�</span></span><br><span class="line">pStShuzu-&gt;pShuZuTou = pTemp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ChuShiHua</span><span class="params">(struct DongShuzu* pStShuzu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pStShuzu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;��������\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pStShuzu-&gt;iRongLiang = <span class="number">5</span>;</span><br><span class="line">pStShuzu-&gt;pShuZuTou = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(<span class="keyword">int</span>) * pStShuzu-&gt;iRongLiang);</span><br><span class="line">pStShuzu-&gt;iShuliang = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZengJia</span><span class="params">(struct DongShuzu* pStShuzu, <span class="keyword">int</span> iShuJu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pStShuzu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;��������\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//�ж��Ƿ�����</span></span><br><span class="line"><span class="built_in">ZengJiaKongJian</span>(pStShuzu);</span><br><span class="line"><span class="comment">//����װ��ȥ</span></span><br><span class="line">pStShuzu-&gt;pShuZuTou[pStShuzu-&gt;iShuliang] = iShuJu;</span><br><span class="line"><span class="comment">//�Ѵ洢����++</span></span><br><span class="line">pStShuzu-&gt;iShuliang++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShuChu</span><span class="params">(struct DongShuzu* pStShuzu)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pStShuzu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;��������\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;������%u, �Ѵ�������%u\n&quot;</span>, pStShuzu-&gt;iRongLiang, pStShuzu-&gt;iShuliang);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;���ݣ�&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pStShuzu-&gt;iShuliang; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, pStShuzu-&gt;pShuZuTou[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ZengJiaZhong</span><span class="params">(struct DongShuzu* pStShuzu, <span class="keyword">int</span> iShuJu, <span class="keyword">unsigned</span> <span class="keyword">int</span> iXiaBiao)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//�����Ϸ��Լ��  ���±�����������Ͳ��������һ��λ��</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == pStShuzu)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;��̬�����������\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//�ж��Ƿ�����</span></span><br><span class="line"><span class="built_in">ZengJiaKongJian</span>(pStShuzu);</span><br><span class="line"><span class="comment">//�±����</span></span><br><span class="line"><span class="keyword">if</span> (iXiaBiao &gt; pStShuzu-&gt;iShuliang)</span><br><span class="line">&#123;</span><br><span class="line">iXiaBiao = pStShuzu-&gt;iShuliang;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//���Ų</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> i = pStShuzu-&gt;iShuliang; i &gt; iXiaBiao; i--)</span><br><span class="line">&#123;</span><br><span class="line">pStShuzu-&gt;pShuZuTou[i] = pStShuzu-&gt;pShuZuTou[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//���ݸ�ֵ��ָ��λ��</span></span><br><span class="line">pStShuzu-&gt;pShuZuTou[iXiaBiao] = iShuJu;</span><br><span class="line"><span class="comment">//��������1</span></span><br><span class="line">pStShuzu-&gt;iShuliang++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-AcWing算法基础课(c++基础)</title>
      <link href="/2022/02/22/16-AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-c-%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/22/16-AcWing%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E8%AF%BE-c-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-菱形"><a href="#1-菱形" class="headerlink" title="1.菱形"></a>1.菱形</h1><h2 id="1-1-题目"><a href="#1-1-题目" class="headerlink" title="1.1 题目"></a>1.1 题目</h2><p>输入一个奇数n，输出一个由‘*’构成的n阶实心菱形。</p><h2 id="1-2-实例输出"><a href="#1-2-实例输出" class="headerlink" title="1.2 实例输出"></a>1.2 实例输出</h2><p>若n=5;</p><blockquote><p>输出:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  *  </span><br><span class="line"> *** </span><br><span class="line">*****</span><br><span class="line"> *** </span><br><span class="line">  *  </span><br></pre></td></tr></table></figure><h2 id="1-3-算法思想"><a href="#1-3-算法思想" class="headerlink" title="1.3 算法思想"></a>1.3 算法思想</h2><p><strong>曼哈顿距离算法</strong></p><p>我们常见的距离是欧式距离,x轴和y轴的差的平方</p><p>曼哈顿距离中的距离计算：</p><p><img src="https://gitee.com/secqin/img/raw/master/aHR0cDovL3d3dy5nbzYwLnRvcC91cGxvYWRzL2FsbGltZy8xODA5MjQvMS0xUDkyNDEwNTkxNTVhLmpwZw.jpg" alt="aHR0cDovL3d3dy5nbzYwLnRvcC91cGxvYWRzL2FsbGltZy8xODA5MjQvMS0xUDkyNDEwNTkxNTVhLmpwZw"></p><p>我们这个题目需要的二维曼哈顿距离</p><table><thead><tr><th align="center">(0,0)</th><th align="center">(0,1)</th><th align="center">(0,2)</th><th align="center">(0,3)</th><th align="center">(0,4)</th></tr></thead><tbody><tr><td align="center">(1,0)</td><td align="center">(1,1)</td><td align="center">(1,2)</td><td align="center">(1,3)</td><td align="center">(1,4)</td></tr><tr><td align="center">(2,0)</td><td align="center">(2,1)</td><td align="center"><strong>(2,2)</strong></td><td align="center">(2,3)</td><td align="center">(2,4)</td></tr><tr><td align="center">(3,0)</td><td align="center">(3,1)</td><td align="center">(3,2)</td><td align="center">(3,3)</td><td align="center">(3,4)</td></tr><tr><td align="center">(4,0)</td><td align="center">(4,1)</td><td align="center">(4,2)</td><td align="center">(4,3)</td><td align="center">(4,4)</td></tr></tbody></table><p><strong>(2,2)为中心</strong></p><p>(1,2),(2,3),(3,2),(2,1)到中心的曼哈顿距离为1</p><p>依次类推</p><p>所以可以写出程序</p><h2 id="1-4-代码如下"><a href="#1-4-代码如下" class="headerlink" title="1.4 代码如下"></a>1.4 代码如下</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n,m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    m = n/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">abs</span>(i-m)+<span class="built_in">abs</span>(j-m)&lt;=m)&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;*&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自己报错两次,一次忘记输出空格了,一次if条件判断搞错了</p><h2 id="1-5-别人的题解"><a href="#1-5-别人的题解" class="headerlink" title="1.5 别人的题解"></a>1.5 别人的题解</h2><h3 id="1-5-1别人的曼哈顿距离解法"><a href="#1-5-1别人的曼哈顿距离解法" class="headerlink" title="1.5.1别人的曼哈顿距离解法"></a>1.5.1别人的曼哈顿距离解法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sx = n / <span class="number">2</span>, sy = n / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n ; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> ( <span class="built_in">abs</span>(sx - i) + <span class="built_in">abs</span>(sy - j) &lt;= n / <span class="number">2</span> ) <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;*&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>他把中心点分为了两个坐标</p></blockquote><h3 id="1-5-2-暴力解法1"><a href="#1-5-2-暴力解法1" class="headerlink" title="1.5.2 暴力解法1"></a>1.5.2 暴力解法1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = n / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = -x; i &lt;= x; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="built_in">abs</span>(i); j ++ ) cout &lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="built_in">abs</span>(i) * <span class="number">2</span>; j ++ ) cout &lt;&lt; <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-3-暴力解法2"><a href="#1-5-3-暴力解法2" class="headerlink" title="1.5.3 暴力解法2"></a>1.5.3 暴力解法2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> x = n / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i ++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; x - i; j ++ ) cout &lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span> * i + <span class="number">1</span>; j ++  ) cout &lt;&lt; <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - x; i ++ )</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j ++ ) cout &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n - <span class="number">2</span> * i; j ++ ) cout &lt;&lt; <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-5-4-暴力解法3"><a href="#1-5-4-暴力解法3" class="headerlink" title="1.5.4 暴力解法3"></a>1.5.4 暴力解法3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">int</span> x = n / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span> s[n][n];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入空格</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line">            s[i][j] = <span class="string">&#x27; &#x27;</span> ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 上半部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; x; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = x - i; j &lt;= x + i; j ++ )</span><br><span class="line">            s[i][j] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 中间一行  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line">        s[x][j] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下半部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = x + <span class="number">1</span>; i &lt; n; i ++ )</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - x; j &lt; n - i + x; j ++ )</span><br><span class="line">            s[i][j] = <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j ++ )</span><br><span class="line">            cout &lt;&lt; s[i][j] ;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-质数"><a href="#2-质数" class="headerlink" title="2. 质数"></a>2. 质数</h1><h2 id="2-1-算法思想"><a href="#2-1-算法思想" class="headerlink" title="2.1 算法思想"></a>2.1 算法思想</h2><h2 id="2-2-代码如下"><a href="#2-2-代码如下" class="headerlink" title="2.2 代码如下"></a>2.2 代码如下</h2><h3 id="2-2-1-最蠢的暴力解法"><a href="#2-2-1-最蠢的暴力解法" class="headerlink" title="2.2.1 最蠢的暴力解法"></a>2.2.1 最蠢的暴力解法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;n;i++)&#123;</span><br><span class="line">       <span class="keyword">if</span>(n%i == <span class="number">0</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;not prime&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-2-优化一点的暴力解法"><a href="#2-2-2-优化一点的暴力解法" class="headerlink" title="2.2.2 优化一点的暴力解法"></a>2.2.2 优化一点的暴力解法</h3><p>少判断一半的数,因为其因数不可能大于他的一半</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">       <span class="keyword">if</span>(n%i == <span class="number">0</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;not prime&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-3-根号法"><a href="#2-2-3-根号法" class="headerlink" title="2.2.3 根号法"></a>2.2.3 根号法</h3><p>**一个数若可以进行因数分解，那么分解时得到的两个数一定是一个小于等于sqrt(n)，一个大于等于sqrt(n)**，据此，上述代码中并不需要遍历到n-1，遍历到sqrt(n)即可，因为若sqrt(n)左侧找不到约数，那么右侧也一定找不到约数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=<span class="built_in">sqrt</span>(n);i++)&#123;</span><br><span class="line">       <span class="keyword">if</span>(n%i == <span class="number">0</span>)&#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;not prime&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-4-质数分布的规律"><a href="#2-2-4-质数分布的规律" class="headerlink" title="2.2.4 质数分布的规律"></a>2.2.4 质数分布的规律</h3><p><strong>一个关于质数分布的规律：大于等于5的质数一定和6的倍数相邻。例如5和7，11和13,17和19等等；</strong></p><p>这个代码就不给出来了</p><h1 id="3-完全数"><a href="#3-完全数" class="headerlink" title="3. 完全数"></a>3. 完全数</h1><h2 id="3-1-算法思想"><a href="#3-1-算法思想" class="headerlink" title="3.1 算法思想"></a>3.1 算法思想</h2><p>关键还是怎么求出他的因数,但是如果是一个数是完全平方数,我下面给出的代码好像不能完全判断,但是我这个代码考研AC,我认为要加一个完全平方数的判断条件,然后排除那个相同的因数</p><h2 id="3-2-代码如下"><a href="#3-2-代码如下" class="headerlink" title="3.2 代码如下"></a>3.2 代码如下</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">while</span>(n--)&#123;</span><br><span class="line">        cin&gt;&gt;m;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="built_in">sqrt</span>(m);i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(m%i==<span class="number">0</span>)&#123;</span><br><span class="line">                sum += i;</span><br><span class="line">                sum += m/i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum/<span class="number">2</span> == m)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d is perfect\n&quot;</span>,m);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d not perfect\n&quot;</span>,m);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-别人的代码"><a href="#3-3-别人的代码" class="headerlink" title="3.3 别人的代码"></a>3.3 别人的代码</h2><h3 id="3-3-1-利用完全数的性质"><a href="#3-3-1-利用完全数的性质" class="headerlink" title="3.3.1 利用完全数的性质"></a>3.3.1 利用完全数的性质</h3><p><strong>其实 100000000内的完全数没有几个</strong></p><p>100000000内的完全数有且仅有 <strong>6,28,496,8128,33550336</strong> 这五个.<br>根据上述内容, 这道题可以直接 O(1)解决.<br>完全数比较重要的几个性质</p><p>所有完全数都是三角形数<br>目前截止发现的<strong>所有完全数都以 6或 28结尾</strong><br>到现在为止,数学家们<strong>一共发现了 48个完全数,且 48个完全数全部是偶数</strong><br>如果有人们没有找到的奇完全数,则它一定可以写成 12p+1或 36p+9 的形式,而且 p是素数<br>奇完全数一定大于 10300<br>完全数的约数的倒数之和为调和数<br>完全数可以表示成连续奇数的立方和<br>完全数可以表示成 2的连续自然数的次幂之和,且这些自然数的数量必定是素数</p><p>完全数计算法</p><p>若<br>$$<br>2^p -1<br>$$<br>是素数(亦称其为梅森素数),则<br>$$<br>2^{p−1}∗(2^p−1)<br>$$<br> 是完全数.</p><h3 id="3-3-2-代码如下"><a href="#3-3-2-代码如下" class="headerlink" title="3.3.2 代码如下"></a>3.3.2 代码如下</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tt;</span><br><span class="line">    cin &gt;&gt; tt;</span><br><span class="line">    <span class="keyword">while</span> (tt--) &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        cin &gt;&gt; n;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">6</span> || n == <span class="number">28</span> || n == <span class="number">496</span> || n == <span class="number">8128</span> || n == <span class="number">33550336</span>)  </span><br><span class="line">            cout &lt;&lt; n &lt;&lt; <span class="string">&quot; is perfect&quot;</span> &lt;&lt; endl;</span><br><span class="line">        <span class="keyword">else</span> cout &lt;&lt; n &lt;&lt; <span class="string">&quot; is not perfect&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="4-蛇形矩阵"><a href="#4-蛇形矩阵" class="headerlink" title="4.蛇形矩阵"></a>4.蛇形矩阵</h1><blockquote><p>这道题我大一就没有解决,一直没有思路,别人的代码也看不懂</p></blockquote><h2 id="4-1-算法思想"><a href="#4-1-算法思想" class="headerlink" title="4.1 算法思想"></a>4.1 算法思想</h2><h2 id="4-2-自己的代码"><a href="#4-2-自己的代码" class="headerlink" title="4.2 自己的代码"></a>4.2 自己的代码</h2><blockquote><p>报错了,太难了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m,n;</span><br><span class="line">    cin &gt;&gt; m,n;</span><br><span class="line">    <span class="keyword">int</span> a[m][n];</span><br><span class="line">    <span class="keyword">int</span> top=<span class="number">0</span>,left=<span class="number">0</span>,right=n<span class="number">-1</span>,bottom=m<span class="number">-1</span>,nums=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(top &lt;= bottom &amp;&amp; right &gt;= left)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=top;i&lt;right;i++)&#123;</span><br><span class="line">            a[top][i]=nums++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=top+<span class="number">1</span>;i&lt;bottom;i++)&#123;</span><br><span class="line">            a[i][right]=nums++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=right<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            a[bottom][i]=nums++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=bottom<span class="number">-1</span>;i&gt;top+<span class="number">1</span>;i--)&#123;</span><br><span class="line">            a[i][left]=nums++;</span><br><span class="line">        &#125;</span><br><span class="line">        top++;left++;right--;bottom--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            cout&lt;&lt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-别人的正确代码"><a href="#4-3-别人的正确代码" class="headerlink" title="4.3 别人的正确代码"></a>4.3 别人的正确代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[N][N];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">0</span>, right = m - <span class="number">1</span>, top = <span class="number">0</span>, bottom = n - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left ; i &lt;= right; i ++) &#123;</span><br><span class="line">            a[top][i] = k ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = top + <span class="number">1</span>; i &lt;= bottom; i ++) &#123;</span><br><span class="line">            a[i][right] = k ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = right - <span class="number">1</span>; i &gt;= left &amp;&amp; top &lt; bottom; i --) &#123;</span><br><span class="line">            a[bottom][i] = k ++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = bottom - <span class="number">1</span>; i &gt; top &amp;&amp; left &lt; right; i --) &#123;</span><br><span class="line">            a[i][left] = k ++;</span><br><span class="line">        &#125;</span><br><span class="line">        left ++, right --, top ++, bottom --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i ++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j ++) &#123;</span><br><span class="line">            cout &lt;&lt; a[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-自己和别人正确的代码对比"><a href="#4-4-自己和别人正确的代码对比" class="headerlink" title="4.4 自己和别人正确的代码对比"></a>4.4 自己和别人正确的代码对比</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=top;i&lt;right<span class="number">-1</span>;i++)&#123;</span><br><span class="line">    a[top][i]=nums++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = left ; i &lt;= right; i ++) &#123;</span><br><span class="line">    a[top][i] = k ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>自己的代码确实有问题,自己出错的原因是只画了4*4的矩阵,没有考虑3*7之类的,画一个行和列差别很大的矩阵,一下就迎刃而解了</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=right<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">    a[bottom][i]=nums++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = right - <span class="number">1</span>; i &gt;= left &amp;&amp; top &lt; bottom; i --) &#123;</span><br><span class="line">    a[bottom][i] = k ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>把矩阵画大一点,就很容易看出了,至于top&lt;bottom我感觉没有必要带上去</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=bottom<span class="number">-1</span>;i&gt;top+<span class="number">1</span>;i--)&#123;</span><br><span class="line">    a[i][left]=nums++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = bottom - <span class="number">1</span>; i &gt; top &amp;&amp; left &lt; right; i --) &#123;</span><br><span class="line">    a[i][left] = k ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>top+1 就是画蛇添足了,至于left &lt; right我感觉没有必要带上去</p></blockquote><p>自己实测发现确实考研不用带上去,但是为了跟保险,带上去,也是一个好习惯</p><h1 id="5-斐波拉契数列"><a href="#5-斐波拉契数列" class="headerlink" title="5.斐波拉契数列"></a>5.斐波拉契数列</h1><h2 id="5-1-算法思想"><a href="#5-1-算法思想" class="headerlink" title="5.1 算法思想"></a>5.1 算法思想</h2><p><strong>递归</strong></p><h2 id="5-2-代码"><a href="#5-2-代码" class="headerlink" title="5.2 代码"></a>5.2 代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fb</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>||n==<span class="number">3</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">fb</span>(n<span class="number">-1</span>)+<span class="built_in">fb</span>(n<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2022年2月24号</p><hr><h1 id="平方矩阵"><a href="#平方矩阵" class="headerlink" title="平方矩阵"></a>平方矩阵</h1><h2 id="算法思想"><a href="#算法思想" class="headerlink" title="算法思想"></a>算法思想</h2><p>在于对空格个数和换行个数的控制,我本来以为2^3的表示就是为2^3结果不是这样是pow函数,还有一点就是while循环和while do循环的区别,最后的临界调节到底执不执行</p><h2 id="自己的代码"><a href="#自己的代码" class="headerlink" title="自己的代码"></a>自己的代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n)&#123;</span><br><span class="line">        <span class="keyword">int</span> a[n][n];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                a[i][j]=<span class="built_in">pow</span>(<span class="number">2</span>,(i+j));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j == n<span class="number">-1</span>)&#123;</span><br><span class="line">                    cout&lt;&lt;a[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                     cout&lt;&lt;a[i][j]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n!=<span class="number">0</span>)&#123;</span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="别人的优秀代码"><a href="#别人的优秀代码" class="headerlink" title="别人的优秀代码"></a>别人的优秀代码</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n &amp;&amp; n!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;n+i;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">long</span> <span class="keyword">long</span> x=<span class="built_in">pow</span>(<span class="number">2</span>,j<span class="number">-1</span>);</span><br><span class="line">                cout&lt;&lt;x&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            cout&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>cin&gt;&gt;n &amp;&amp; n!=0,在while的判断条件里面加上这个,就可以不用在后面防止多出一个换行,他这个考虑的就是每一行的幂加一,我感觉我的方法比他更好</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Acwing </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Acwing </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-Mybatis</title>
      <link href="/2022/02/09/14-Mybatis/"/>
      <url>/2022/02/09/14-Mybatis/</url>
      
        <content type="html"><![CDATA[<h2 id="Mybatis-9-28"><a href="#Mybatis-9-28" class="headerlink" title="Mybatis-9.28"></a>Mybatis-9.28</h2><p>环境:</p><ul><li>JDK1.8</li><li>MySQL5.7</li><li>maven 3.6.1</li><li>IDEA</li></ul><p>回顾:</p><ul><li>JDBC</li><li>Mysql</li><li>Java基础</li><li>Maven</li><li>Junit</li></ul><p>SSM框架:配置文件的,最好的方式是看官网文档;</p><p><a href="https://mybatis.org/mybatis-3/zh/getting-started.html">mybatis3中文文档</a></p><h1 id="1-什么是mybatis"><a href="#1-什么是mybatis" class="headerlink" title="1.什么是mybatis"></a>1.什么是mybatis</h1><p><img src="https://gitee.com/secqin/img/raw/master/mybatis-logo.png" alt="mybatis-logo"></p><ul><li><p>MyBatis 是一款优秀的<strong>持久层框架</strong></p></li><li><p>它支持自定义 SQL、存储过程以及高级映射。</p></li><li><p>MyBatis免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。</p></li><li><p>MyBatis可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO(Plain Old Java Objects，普通老式 Java 对象)为数据库中的记录。</p></li><li><p>mybatis开源</p></li></ul><h2 id="1-2-如何获取mybatis"><a href="#1-2-如何获取mybatis" class="headerlink" title="1.2 如何获取mybatis?"></a>1.2 如何获取mybatis?</h2><p><a href="https://github.com/mybatis/mybatis-3">mybatis(github)</a></p><p><a href="https://mvnrepository.com/artifact/org.mybatis/mybatis/3.5.2">maven仓库里面的mybatis</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-3-持久化-动作"><a href="#1-3-持久化-动作" class="headerlink" title="1.3 持久化(动作)"></a>1.3 持久化(动作)</h2><p>数据持久化</p><ul><li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程</li><li>内存:断电即失</li><li>数据库(jdbc),io文件持久化</li><li>生活: 冷藏,罐头.</li></ul><p>为什么需要持久化?</p><ul><li><p>有一些对象,不能让他丢掉(账单)</p></li><li><p>内存太贵了</p></li></ul><h2 id="1-4-持久层-概念"><a href="#1-4-持久层-概念" class="headerlink" title="1.4 持久层(概念)"></a>1.4 持久层(概念)</h2><p>Dao层,service层,controller层</p><ul><li>完成持久化工作的代码块</li><li>层界限十分明显</li></ul><h2 id="1-5-为什么用mybatis"><a href="#1-5-为什么用mybatis" class="headerlink" title="1.5 为什么用mybatis"></a>1.5 为什么用mybatis</h2><ul><li><p>方便</p></li><li><p>传统的JDBC代码太复杂了,简化,框架,自动化</p></li><li><p>帮助程序猿将数据存到数据库中</p></li><li><p>不用mybatis也可以,更容易上手,<strong>技术没有高低之分</strong>,只有使用这个技术的人不同</p></li></ul><p><strong>最重要的一点:使用的人多</strong></p><h1 id="2-第一个mybatis程序"><a href="#2-第一个mybatis程序" class="headerlink" title="2. 第一个mybatis程序"></a>2. 第一个mybatis程序</h1><p>思路:搭建环境—&gt;导入mybatis—&gt;编写代码—-&gt;测试!</p><h2 id="2-1-搭建环境"><a href="#2-1-搭建环境" class="headerlink" title="2.1 搭建环境"></a>2.1 搭建环境</h2><p>搭建数据库</p><p>新建一个普通的maven项目</p><p>导入依赖</p><p>创建一个模块(子项目)</p><p>编写mybatis的核心配置文件</p><p>编写mybatis核心工具类</p><blockquote><p>mybatis-config.xml 核心配置文件</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis核心配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    选择环境--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?useSSL=false<span class="symbol">&amp;amp;</span>useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=UTF-8&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;secqin&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    每一个mapper都需要在mybatis的核心配置文件中注册--&gt;</span>易错点,初学容易忘记</span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/qin/dao/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>编写mybatis工具类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//提升作用域</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//使用mybatis第一步：获取sqlSessionFactory对象</span></span><br><span class="line">            String resource = <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编写代码</p></blockquote><ul><li>实体类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name, String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, pwd=&#x27;&quot;</span> + pwd + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>Dao接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qin.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>接口实现类由原来的Impl转换为一个Mapper配置文件</li></ul><blockquote><p>原来的操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.qin.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//老式写法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在的操作</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--namespace绑定一个对应的Dao/Mapper接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.qin.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from Blog where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>junit测试,测试的包和开发的包要一一对应,规范,标准</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一步：获得SqlSession对象</span></span><br><span class="line">        SqlSession sqlSession = MybatisUtils.getSqlSession();</span><br><span class="line">        <span class="comment">//方式一：getMapper</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao.class);</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList();</span><br><span class="line">        <span class="keyword">for</span> (User user : userList) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式二:</span></span><br><span class="line">List&lt;User&gt; userList = sqlSession.selectList(<span class="string">&quot;com.qin.dao.UserDao.getUserList&quot;</span>); <span class="comment">//老方式</span></span><br></pre></td></tr></table></figure><blockquote><p>小问题 pom.xml,子项目和父项目都放这一段代码</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   静态资源导出问题    目的是把src/main/java和src/main/resource目录中的xml文件和properties配置文件包含到输出结果中，输出到classes目录中    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在目录--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="3-CRUD"><a href="#3-CRUD" class="headerlink" title="3. CRUD"></a>3. CRUD</h1><h2 id="3-1-namespace"><a href="#3-1-namespace" class="headerlink" title="3.1.namespace"></a>3.1.namespace</h2><p>namespace中的包名要和Dao/mapper接口的包名一致</p><h2 id="3-2-select"><a href="#3-2-select" class="headerlink" title="3.2.select"></a>3.2.select</h2><ul><li>id:就是对应的namespace中的方法名</li><li>resultType:sql语句执行的返回值</li><li>parameterType:参数类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> </span>&#123;</span><br><span class="line">    <span class="comment">//查询全部用户</span></span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//根据id查询用户</span></span><br><span class="line">    <span class="function">User <span class="title">getUserById</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="function">User <span class="title">getUserById2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>;</span><br><span class="line">    <span class="function">List&lt;User&gt;  <span class="title">getUserByLimit</span><span class="params">(Map&lt;String,Integer&gt; map)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">addUser</span><span class="params">(User user)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span>  <span class="title">addUser2</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>; <span class="comment">//万一数据库中有很多的字段，就用万能的map</span></span><br><span class="line"><span class="comment">//假设数据库或者实体类，或者数据库中的表，字段或者参数过多，我们应当考虑使用map，map可以局部更新，可以实体类不用</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateUser</span><span class="params">(User user)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteUser</span><span class="params">(<span class="keyword">int</span> id)</span></span>; <span class="comment">//因为不用返回数据所以就写int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserList&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUserById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from mybatis.user where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3-insert"><a href="#3-3-insert" class="headerlink" title="3.3.insert"></a>3.3.insert</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> &gt;</span></span><br><span class="line">    insert into mybatis.user(id,name,pwd) value (#&#123;id&#125;,#&#123;name&#125;,#&#123;pwd&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意点:</p></blockquote><p>pwd要和实体类中的属性一样</p><h2 id="3-4-update"><a href="#3-4-update" class="headerlink" title="3.4.update"></a>3.4.update</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    update mybatis.user set name =#&#123;name&#125;,pwd=#&#123;pwd&#125; where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-5-delete"><a href="#3-5-delete" class="headerlink" title="3.5.delete"></a>3.5.delete</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from mybatis.user where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>总结</p></blockquote><p>1.编写接口</p><p>2.编写mapper中的sql语句</p><p>注意点:增删改需要提交数据!</p><h1 id="4-万能的map"><a href="#4-万能的map" class="headerlink" title="4.万能的map"></a>4.万能的map</h1>]]></content>
      
      
      <categories>
          
          <category> mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12-js</title>
      <link href="/2022/02/09/12-js/"/>
      <url>/2022/02/09/12-js/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>13-Mysql数据库</title>
      <link href="/2022/02/09/13-Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/02/09/13-Mysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1-初识MySQL"><a href="#1-初识MySQL" class="headerlink" title="1. 初识MySQL"></a>1. 初识MySQL</h1><blockquote><p>只会写代码的是码农；学好数据库，基本能混口饭吃；在此基础上再学好操作系统和计算机网络，就能当一个不错的程序员。如果能再把离散数学、数字电路、体系结构、数据结构/算法、编译原理学通透，再加上丰富的实践经验与领域特定知识，就能算是一个优秀的工程师了。</p></blockquote><h2 id="1-1-为什么学习数据库"><a href="#1-1-为什么学习数据库" class="headerlink" title="1.1 为什么学习数据库"></a>1.1 为什么学习数据库</h2><p>1、岗位技能需求</p><p>2、现在的世界,得数据者得天下</p><p>3、存储数据的方法</p><p>4、程序,网站中,大量数据如何长久保存? </p><p>5、<strong>数据库是几乎软件体系中最核心的一个存在。</strong></p><h2 id="1-2-什么是数据库"><a href="#1-2-什么是数据库" class="headerlink" title="1.2 什么是数据库"></a>1.2 什么是数据库</h2><p>数据库 ( <strong>DataBase</strong> , 简称<strong>DB</strong> )</p><p><strong>概念</strong> : 长期存放在计算机内,有组织,可共享的大量数据的集合,是一个数据 “仓库”</p><p><strong>作用</strong> : 保存,并能安全管理数据(如:增删改查等),减少冗余…</p><p><strong>数据库总览</strong> <strong>:</strong></p><ul><li>关系型数据库 ( SQL )</li></ul><p>MySQL , Oracle , SQL Server , SQLite , DB2 , …</p><p>关系型数据库通过外键关联来建立表与表之间的关系 ,学员信息表,考勤表</p><ul><li>非关系型数据库 ( NOSQL )not only sql</li></ul><p>Redis , MongoDB , …</p><p>非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定,定位信息表,动态更新</p><h2 id="1-3-什么是DBMS"><a href="#1-3-什么是DBMS" class="headerlink" title="1.3 什么是DBMS"></a>1.3 什么是DBMS</h2><p>数据库管理系统 ( <strong>D</strong>ata<strong>B</strong>ase <strong>M</strong>anagement <strong>S</strong>ystem )</p><p>数据库管理软件 , 科学组织和存储数据 , 高效地获取和维护数据</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-09_11-27-04.png" alt="Snipaste_2022-02-09_11-27-04"></p><h1 id="2-操作数据库"><a href="#2-操作数据库" class="headerlink" title="2.操作数据库"></a>2.操作数据库</h1><h2 id="2-1-基本的命令行操作"><a href="#2-1-基本的命令行操作" class="headerlink" title="2.1 基本的命令行操作"></a>2.1 基本的命令行操作</h2><p>连接数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -psecqin  --连接数据库</span><br></pre></td></tr></table></figure><p>修改用户密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update mysql.user <span class="built_in">set</span> authentication_string=password(<span class="string">&#x27;123456&#x27;</span>) <span class="built_in">where</span> user=<span class="string">&#x27;root&#x27;</span> and Host = <span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure><p>刷新权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>所有的语句分号结尾</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases; 显示所有数据库</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use dbname； 切换数据库</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables; 显示选中数据库中所有的表</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">describe user; 显示表mysql数据库中user表的列信息</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database name; 创建数据库</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exit; 退出Mysql</span><br><span class="line">? 命令关键词 : 寻求帮助</span><br><span class="line">-- 表示注释,单行注释(SQL本来的注释)</span><br><span class="line">/*</span><br><span class="line">SQL的多行注释</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p>数据库xxx语言 CRUD 增删改查!!!   CV程序猿     API程序猿       CRUD程序猿(业务!)</p><p>DDL(定义)</p><p>DML(操作)</p><p>DQL(查询)</p><p>DCL(控制)</p><p><img src="https://gitee.com/secqin/img/raw/master/img/123.png" alt="123"></p><p>mysql关键字不区分大小写</p><h2 id="2-2-数据库操作"><a href="#2-2-数据库操作" class="headerlink" title="2.2 数据库操作"></a>2.2 数据库操作</h2><h4 id="命令行操作数据库"><a href="#命令行操作数据库" class="headerlink" title="命令行操作数据库"></a>命令行操作数据库</h4><p>创建数据库 : create database [if not exists] 数据库名;</p><p>删除数据库 : drop database [if exists] 数据库名;</p><p>查看数据库 : show databases;</p><p>使用数据库 : use `数据库名`;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">``:在tab键的上方</span><br></pre></td></tr></table></figure><h2 id="2-3-列的数据类型讲解"><a href="#2-3-列的数据类型讲解" class="headerlink" title="2.3 列的数据类型讲解"></a>2.3 列的数据类型讲解</h2><blockquote><p>数值类型</p></blockquote><p><img src="https://gitee.com/secqin/img/raw/master/img/9eb50c783e0bb3da8bbbea8701815b1e.png" alt="9eb50c783e0bb3da8bbbea8701815b1e"></p><blockquote><p>字符串类型</p></blockquote><p><img src="https://gitee.com/secqin/img/raw/master/img/baf75f3c71d91173305f13fefe552e96.png" alt="img"></p><blockquote><p>日期和时间型数值类型</p></blockquote><p>java.util.Date</p><ul><li>date YYYY-MM-DD,日期格式</li><li>time HH:mm:ss 时间格式</li><li><strong>datetime YYYY-MM-DD HH:mm:ss(最常用的时间格式)</strong></li><li><strong>timestamp 时间戳,1970.1.1到现在的毫秒数(也较为常用)</strong></li><li>year 年份表示</li></ul><p><img src="https://gitee.com/secqin/img/raw/master/img/0c01a1b5a1cd1e11386bcb8da7f18af6.png" alt="img"></p><blockquote><p>NULL值</p></blockquote><ul><li><p>理解为 “没有值” 或 “未知值”</p></li><li><p>注意:不要用NULL进行算术运算(不是不能使用) , 结果仍为NULL,相当于0*0=0</p></li></ul><h2 id="2-4-数据库的字段属性"><a href="#2-4-数据库的字段属性" class="headerlink" title="2.4 数据库的字段属性"></a>2.4 数据库的字段属性</h2><h3 id="数据字段属性"><a href="#数据字段属性" class="headerlink" title="数据字段属性"></a>数据字段属性</h3><p><strong>UnSigned</strong></p><ul><li>无符号的</li><li>声明该数据列不允许负数 .</li></ul><p><strong>ZEROFILL</strong></p><ul><li>0填充的</li><li>不足位数的用0来填充 , 如int(3),5则为005</li></ul><p><strong>Auto_InCrement</strong></p><ul><li>自动增长的 , 每添加一条数据 , 自动在上一个记录数上加 1(默认)</li><li>通常用于设置<strong>主键</strong> , 且必须为整数类型</li><li>可定义起始值和步长</li><li><ul><li>当前表设置步长(AUTO_INCREMENT=100) : 只影响当前表</li><li> SET @@auto_increment_increment=5 ; 影响所有使用自增的表(全局)</li></ul></li></ul><p><strong>NULL 和 NOT NULL</strong></p><ul><li>默认为NULL , 即没有插入该列的数值</li><li>如果设置为NOT NULL , 则该列必须有值</li></ul><p><strong>DEFAULT</strong></p><ul><li>默认的</li><li>用于设置默认值</li><li>例如,性别字段,默认为”男” , 否则为 “女” ; 若无指定该列的值 , 则默认值为”男”的值</li><li>每一个表都必须存在一下5个字段!未来做项目用的,表示一个记录存在的意义</li></ul><p>id</p><p>`VERSION` 乐观锁</p><p>is_delete 伪删除</p><p>gmt_create 创建时间</p><p>gmt_update 修改时间 </p><p>拓展:听听就好</p><h2 id="2-4-创建数据表-重点"><a href="#2-4-创建数据表-重点" class="headerlink" title="2.4 创建数据表(重点)"></a>2.4 创建数据表(重点)</h2><p>属于DDL的一种，语法 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table [if not exists] `表名`(</span><br><span class="line">   &#x27;字段名1&#x27; 列类型 [属性][索引][注释],</span><br><span class="line">   &#x27;字段名2&#x27; 列类型 [属性][索引][注释],</span><br><span class="line">  #...</span><br><span class="line">   &#x27;字段名n&#x27; 列类型 [属性][索引][注释]</span><br><span class="line">)[表类型][表字符集][注释];</span><br></pre></td></tr></table></figure><p><strong>说明 :</strong> 反引号(反单引号)用于区别MySQL保留字与普通字符而引入的 (键盘tab上面的键).</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- 目标 : 创建一个school数据库</span><br><span class="line">-- 创建学生表(列,字段)</span><br><span class="line">-- 学号int 登录密码varchar(20) 姓名,性别varchar(2),出生日期(datatime),家庭住址,email</span><br><span class="line">-- 创建表之前 , 一定要先选择数据库</span><br><span class="line"></span><br><span class="line">CREATE TABLE IF NOT EXISTS `student` (</span><br><span class="line">`id` int(4) NOT NULL AUTO_INCREMENT COMMENT &#x27;学号&#x27;, -- 自增</span><br><span class="line">`name` varchar(30) NOT NULL DEFAULT &#x27;匿名&#x27; COMMENT &#x27;姓名&#x27;, -- 默认值,非空</span><br><span class="line">`pwd` varchar(20) NOT NULL DEFAULT &#x27;123456&#x27; COMMENT &#x27;密码&#x27;,</span><br><span class="line">`sex` varchar(2) NOT NULL DEFAULT &#x27;男&#x27; COMMENT &#x27;性别&#x27;,</span><br><span class="line">`birthday` datetime DEFAULT NULL COMMENT &#x27;生日&#x27;,</span><br><span class="line">`address` varchar(100) DEFAULT NULL COMMENT &#x27;地址&#x27;,</span><br><span class="line">`email` varchar(50) DEFAULT NULL COMMENT &#x27;邮箱&#x27;,</span><br><span class="line">PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8</span><br><span class="line"></span><br><span class="line">-- 查看数据库的定义</span><br><span class="line">SHOW CREATE DATABASE school;</span><br><span class="line">-- 查看数据表的定义</span><br><span class="line">SHOW CREATE TABLE student;</span><br><span class="line">-- 显示表结构</span><br><span class="line">DESC student;  -- 设置严格检查模式(不能容错了)SET sql_mode=&#x27;STRICT_TRANS_TABLES&#x27;;</span><br></pre></td></tr></table></figure><p>SHOW CREATE DATABASE school –查看创建数据库的语句</p><p>SHOW CREATE TABLE student – 查看student数据库的定义语句 </p><p>DESC student – 显示表的结构</p><h2 id="2-5-数据表的类型"><a href="#2-5-数据表的类型" class="headerlink" title="2.5 数据表的类型"></a>2.5 数据表的类型</h2><p>数据库引擎:ENGINE=InnoDB</p><p>InnoDB  默认使用~</p><p>MYISAM 早些年使用</p><table><thead><tr><th></th><th>MYISAM</th><th>InnoDB</th></tr></thead><tbody><tr><td>事务支持</td><td>不支持</td><td>支持</td></tr><tr><td>数据行锁定</td><td>不支持</td><td>支持</td></tr><tr><td>外键</td><td>不支持</td><td>支持</td></tr><tr><td>全文索引</td><td>支持</td><td>不支持</td></tr><tr><td>表空间的大小</td><td>较小</td><td>较大,约为2倍</td></tr></tbody></table><p>常规操作</p><ul><li>MYISAM 节约空间,速度较快</li><li>INNODB 安全性高,事务的处理,多表多用户操作</li></ul><blockquote><p>物理空间存在的位置</p></blockquote><p>所有数据库文件存在data目录下,一个文件夹对应一个数据库</p><p>本质还是文件的存储</p><p>MySQL引擎在物理文件上的区别 </p><ul><li>innoDB 在数据库表中只有一个*.frm文件,以及上级目录下的ibdata1文件</li><li>MYISAM对应的文件</li></ul><ol><li>*.frm -表结构的定义文件</li><li>*MYD 数据文件(data)</li><li>*.MYI 索引文件(index)</li></ol><blockquote><p>设置数据库表的字符集编码</p></blockquote><p>CHARSET=utf8</p><p>不设置就是默认字符集编码Latin1,不支持中文</p><p>在my.ini中配置默认编码</p><p>加上character-set-server=utf-8</p><h2 id="2-6-修改删除表"><a href="#2-6-修改删除表" class="headerlink" title="2.6 修改删除表"></a>2.6 修改删除表</h2><h4 id="2-6-1-修改表-ALTER-TABLE"><a href="#2-6-1-修改表-ALTER-TABLE" class="headerlink" title="2.6.1 修改表 ( ALTER TABLE )"></a>2.6.1 修改表 ( ALTER TABLE )</h4><p>修改表名 :ALTER TABLE 旧表名 RENAME AS 新表名</p><p>增加表的字段 : ALTER TABLE 表名 ADD字段名 列属性[属性]</p><p>修改表的字段 (重命名,修改约束):</p><ul><li>ALTER TABLE 表名 MODIFY 字段名 列类型[属性]   –修改约束</li><li>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]   –重命名</li></ul><p><a href="https://blog.csdn.net/qq_36057860/article/details/79512394">change和modify的区别</a></p><p>删除字段 : ALTER TABLE 表名 DROP 字段名   </p><h4 id="2-6-2-删除数据表"><a href="#2-6-2-删除数据表" class="headerlink" title="2.6.2 删除数据表"></a>2.6.2 删除数据表</h4><p>语法：DROP TABLE [IF EXISTS] 表名</p><ul><li>IF EXISTS为可选 , 判断是否存在该数据表</li><li>如删除不存在的数据表会抛出错误</li></ul><p>所有的创建和删除尽量加上判断,避免报错</p><p><strong>注意点:</strong> </p><ul><li>`` 字段名,使用这个包裹!</li><li>注释 –</li><li>sql 关键字大小写不敏感,建议大家写小写,小写大家一定认识</li><li>所有符号全部用英文</li></ul><h1 id="3-MySQL数据管理"><a href="#3-MySQL数据管理" class="headerlink" title="3.MySQL数据管理"></a>3.MySQL数据管理</h1><h2 id="3-1-外键-了解即可"><a href="#3-1-外键-了解即可" class="headerlink" title="3.1 外键(了解即可)"></a>3.1 外键(了解即可)</h2><h4 id="外键概念"><a href="#外键概念" class="headerlink" title="外键概念"></a>外键概念</h4><p>如果公共关键字在一个关系中是主关键字，那么这个公共关键字被称为另一个关系的外键。由此可见，外键表示了两个关系之间的相关联系。以另一个关系的外键作主关键字的表被称为<strong>主表</strong>，具有此外键的表被称为主表的<strong>从表</strong>。</p><p>在实际操作中，将一个表的值放入第二个表来表示关联，所使用的值是第一个表的主键值(在必要时可包括复合主键值)。此时，第二个表中保存这些值的属性称为外键(<strong>foreign key</strong>)。</p><p><strong>外键作用</strong></p><p>保持数据<strong>一致性</strong>，<strong>完整性</strong>，主要目的是控制存储在外键表中的数据,<strong>约束</strong>。使两张表形成关联，外键只能引用外表中的列的值或使用空值。</p><h4 id="创建外键"><a href="#创建外键" class="headerlink" title="创建外键"></a>创建外键</h4><p>建表时指定外键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建外键的方式一 : 创建子表同时创建外键</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 年级表 (id\年级名称)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `grade` (</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;年级ID&#x27;</span>,</span><br><span class="line">`gradename` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级名称&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`gradeid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 学生信息表 (学号,姓名,性别,年级,手机,地址,出生日期,邮箱,身份证号)</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">`studentno` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;学号&#x27;</span>,</span><br><span class="line">`studentname` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;匿名&#x27;</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">`sex` TINYINT(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;1&#x27;</span> COMMENT <span class="string">&#x27;性别&#x27;</span>,</span><br><span class="line">`gradeid` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年级&#x27;</span>,</span><br><span class="line">`phoneNum` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;手机&#x27;</span>,</span><br><span class="line">`address` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;地址&#x27;</span>,</span><br><span class="line">`borndate` DATETIME <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;生日&#x27;</span>,</span><br><span class="line">`email` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">`idCard` <span class="type">VARCHAR</span>(<span class="number">18</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;身份证号&#x27;</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`studentno`),</span><br><span class="line">KEY `FK_gradeid` (`gradeid`),</span><br><span class="line"><span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) REFE  RENCES `grade` (`gradeid`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br></pre></td></tr></table></figure><blockquote><p>建表后修改  – 创建外键方式二 : 创建子表完毕后,修改子表添加外键 </p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建外键方式二 : 创建子表完毕后,修改子表添加外键</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `student`</span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> `FK_gradeid` <span class="keyword">FOREIGN</span> KEY (`gradeid`) <span class="keyword">REFERENCES</span> `grade` (`gradeid`)</span><br></pre></td></tr></table></figure><blockquote><p>删除具有主外键关系的表时 , 要先删子表 , 后删主表</p></blockquote><p>以上的操作都是物理（数据库）级别的外键，不建议使用（避免数据库过多造成困扰）</p><blockquote><p>最佳实践</p></blockquote><ul><li>數據庫就是單純的表，只又來存數據</li></ul><p><a href="https://www.cnblogs.com/rjzheng/p/9907304.html">为什么不用外键约束</a></p><h2 id="3-2-DML语言-全部记住"><a href="#3-2-DML语言-全部记住" class="headerlink" title="3.2 DML语言(全部记住)"></a>3.2 DML语言(全部记住)</h2><ul><li>insert</li><li>update</li><li>delete</li></ul><h2 id="3-3-添加-insert"><a href="#3-3-添加-insert" class="headerlink" title="3.3 添加(insert)"></a>3.3 添加(insert)</h2><blockquote><p>insert</p></blockquote><p>语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名[(字段<span class="number">1</span>,字段<span class="number">2</span>,字段<span class="number">3</span>,...)] <span class="keyword">VALUES</span>(<span class="string">&#x27;值1&#x27;</span>,<span class="string">&#x27;值2&#x27;</span>,<span class="string">&#x27;值3&#x27;</span>)</span><br></pre></td></tr></table></figure><ul><li><p>字段或值之间用英文逗号隔开 .</p></li><li><p>‘ 字段1,字段2…’ 该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致 .</p></li><li><p>可同时插入多条数据 , values 后用英文逗号隔开 .</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 使用语句如何增加语句?</span></span><br><span class="line"><span class="comment">-- 语法 : INSERT INTO 表名[(字段1,字段2,字段3,...)] VALUES(&#x27;值1&#x27;,&#x27;值2&#x27;,&#x27;值3&#x27;)</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade(gradename) <span class="keyword">VALUES</span> (<span class="string">&#x27;大一&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 主键自增,那能否省略呢?</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade <span class="keyword">VALUES</span> (<span class="string">&#x27;大二&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询:INSERT INTO grade VALUE (&#x27;大二&#x27;)错误代码：1136</span></span><br><span class="line"><span class="keyword">Column</span> count doesn`t <span class="keyword">match</span> <span class="keyword">value</span> count <span class="keyword">at</span> <span class="type">row</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 结论:&#x27;字段1,字段2...&#x27;该部分可省略 , 但添加的值务必与表结构,数据列,顺序相对应,且数量一致.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 一次插入多条数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> grade(gradename) <span class="keyword">VALUES</span> (<span class="string">&#x27;大三&#x27;</span>),(<span class="string">&#x27;大四&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="3-4-修改-update"><a href="#3-4-修改-update" class="headerlink" title="3.4 修改(update)"></a>3.4 修改(update)</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE 表名 <span class="keyword">SET</span> column_name<span class="operator">=</span><span class="keyword">value</span> [,column_name2<span class="operator">=</span>value2,...] [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure><p>注意:</p><ul><li>column_name 为要更改的数据列</li><li>value 为修改后的数据 , 可以为变量 , 具体指 , 表达式或者嵌套的SELECT结果</li><li>condition 为筛选条件 , 如不指定则修改该表的所有列数据</li></ul><blockquote><p>where条件子句</p></blockquote><p>可以简单的理解为 : 有条件地从表中筛选数据<br><img src="https://gitee.com/secqin/img/raw/master/236898483c9b7e819df2fbd0152c7f8d.png" alt="img"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改年级信息</span></span><br><span class="line">UPDATE grade <span class="keyword">SET</span> gradename <span class="operator">=</span> <span class="string">&#x27;高中&#x27;</span> <span class="keyword">WHERE</span> gradeid <span class="operator">=</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h2 id="3-5-删除-delete"><a href="#3-5-删除-delete" class="headerlink" title="3.5 删除(delete)"></a>3.5 删除(delete)</h2><blockquote><p>delete命令</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名 [<span class="keyword">WHERE</span> <span class="keyword">condition</span>];</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：condition为筛选条件 , 如不指定则删除该表的所有列数据p><p>– 删除最后一个数据DELETE FROM grade WHERE gradeid = 5                                                                                                                                                                                                                   </p><blockquote><p>TRUNCATE命令</p></blockquote><p>作用：用于完全清空表数据 , 但表结构 , 索引 , 约束等不变 ;</p><p>语法:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> [<span class="keyword">TABLE</span>] table_name;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 清空年级表</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> grade</span><br></pre></td></tr></table></figure><p><strong>注意：区别于DELETE命令</strong></p><ul><li>相同 : 都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</li><li>不同 :</li><li><ul><li>使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器</li><li>使用TRUNCATE TABLE不会对事务有影响 （事务后面会说）</li></ul></li></ul><blockquote><p>测试</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个测试表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `test` (</span><br><span class="line">`id` <span class="type">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">`coll` <span class="type">VARCHAR</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入几个测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> test(coll) <span class="keyword">VALUES</span>(<span class="string">&#x27;row1&#x27;</span>),(<span class="string">&#x27;row2&#x27;</span>),(<span class="string">&#x27;row3&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表数据(不带where条件的delete)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> test;</span><br><span class="line"><span class="comment">-- 结论:如不指定Where则删除该表的所有列数据,自增当前值依然从原来基础上进行,会记录日志.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除表数据(truncate)</span></span><br><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> test;</span><br><span class="line"><span class="comment">-- 结论:truncate删除数据,自增当前值会恢复到初始值重新开始;不会记录日志.</span></span><br></pre></td></tr></table></figure><p>– 同样使用DELETE清空不同引擎的数据库表数据.重启数据库服务后<br>– InnoDB : 自增列从初始值重新开始 (因为是存储在内存中,断电即失)<br>– MyISAM : 自增列依然从上一个自增数据基础上开始 (存在文件中,不会丢失)</p><h1 id="4-DQL查询语句-最重点"><a href="#4-DQL查询语句-最重点" class="headerlink" title="4.DQL查询语句(最重点)"></a>4.DQL查询语句(最重点)</h1><ul><li>查询数据库数据 , 如<strong>SELECT</strong>语句</li><li>简单的单表查询或多表的复杂查询和嵌套查询</li><li>是数据库语言中最核心,最重要的语句</li><li>使用频率最高的语句</li></ul><blockquote><p>select语法</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> [<span class="keyword">ALL</span> <span class="operator">|</span> <span class="keyword">DISTINCT</span>]</span><br><span class="line">&#123;<span class="operator">*</span> <span class="operator">|</span> table.<span class="operator">*</span> <span class="operator">|</span> [table.field1[<span class="keyword">as</span> alias1][,table.field2[<span class="keyword">as</span> alias2]][,...]]&#125;</span><br><span class="line"><span class="keyword">FROM</span> table_name [<span class="keyword">as</span> table_alias]</span><br><span class="line">  [<span class="keyword">left</span> <span class="operator">|</span> <span class="keyword">right</span> <span class="operator">|</span> <span class="keyword">inner</span> <span class="keyword">join</span> table_name2]  <span class="comment">-- 联合查询</span></span><br><span class="line">  [<span class="keyword">WHERE</span> ...]  <span class="comment">-- 指定结果需满足的条件</span></span><br><span class="line">  [<span class="keyword">GROUP</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定结果按照哪几个字段来分组</span></span><br><span class="line">  [<span class="keyword">HAVING</span>]  <span class="comment">-- 过滤分组的记录必须满足的次要条件</span></span><br><span class="line">  [<span class="keyword">ORDER</span> <span class="keyword">BY</span> ...]  <span class="comment">-- 指定查询记录按一个或多个条件排序</span></span><br><span class="line">  [LIMIT &#123;[<span class="keyword">offset</span>,]row_count <span class="operator">|</span> row_countOFFSET <span class="keyword">offset</span>&#125;];</span><br><span class="line">   <span class="comment">-- 指定查询的记录从哪条至哪条</span></span><br></pre></td></tr></table></figure><p><strong>注意 : [ ] 括号代表可选的 , { }括号代表必选得</strong></p><h1 id="6-事务"><a href="#6-事务" class="headerlink" title="6.事务"></a>6.事务</h1><p>要么都成功,要么都失败</p><hr><ol><li>sql执行 A给B转账 A 1000 –&gt;200 B 200</li><li>sql执行 B收到A的钱 A 800  –&gt;B 400</li></ol><hr><p>将一组sql放一个批次中去执行</p><blockquote><p>事务原则:ACID原则 原子性,一致性,隔离性,持久性(脏读,幻读…)</p></blockquote><p>原子性:针对同一个事物,一起成功,一起失败</p><p>一致性:最终一致性,总价是1000,无论怎么转,最后的值一定是1000</p><p>持久性:事务结束后的数据不会随外界原因导致数据包丢失,事务没有提交,恢复到原状,事务一但提交不可逆</p><p>隔离性:多个用户同时操作,</p>]]></content>
      
      
      <categories>
          
          <category> Mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11-批处理</title>
      <link href="/2022/02/09/11-%E6%89%B9%E5%A4%84%E7%90%86/"/>
      <url>/2022/02/09/11-%E6%89%B9%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>命令</p></blockquote><h1 id="1-常见cmd命令"><a href="#1-常见cmd命令" class="headerlink" title="1. 常见cmd命令"></a>1. 常见cmd命令</h1><ol><li><p><strong>dir</strong> 　　　列文件名 </p></li><li><p><strong>cd</strong>　　　　改变当前目录 </p></li><li><p><strong>ren</strong> 　　　改变文件名 </p></li><li><p><strong>copy</strong>　　　拷贝文件 </p></li><li><p><strong>del</strong> 　　　删除文件 </p></li><li><p><strong>md</strong>　　　　建立子目录 </p></li><li><p><strong>rd</strong>　　　　删除目录 </p></li><li><p><strong>deltree</strong>　 删除目录树 </p></li><li><p><strong>format</strong>　　格式化磁盘 </p></li><li><p><strong>edit</strong>　　　文本编辑 </p></li><li><p><strong>type</strong>　　　显示文件内容 </p></li><li><p><strong>mem</strong> 　　　查看内存状况 </p><p>以下是新增加的命令 </p></li><li><p><strong>help</strong>　　　显示帮助提示 </p></li><li><p><strong>cls</strong> 　　　清屏 </p></li><li><p><strong>move</strong>　　　移动文件，改目录名 </p></li><li><p><strong>more</strong>　　　分屏显示 </p></li><li><p><strong>xcopy</strong> 　　拷贝目录和文件</p></li></ol><p><strong>此时我们来尝试一下使用一些基本的DOS命令</strong><br>比如，键入 **dir (不区分大小写)**并按回车后，我们会得到当前文件夹下所有的子文件夹和文件的相关信息。输入 <strong>dir c:\windows</strong>  ，可以查看指定的路径文件夹(这里假定我们指定的文件夹是C盘的WINDOWS文件夹)中的信息。在输入该命令后，只见刷地一下啥也没看清，N多文件或文件夹就已一闪而过，因为一个屏幕无法显示这么多的文件或文件夹。好在在DOS5中我们可以用鼠标滚轮向前滚动查看更多的内容。然而，早期的DOS版本并不具有保存多页信息的功能，我们不妨使用 dir 的一些参数(适当的参数加在相应的命令后面可以实现更多的扩展功能)，比如 /p ，即输入 <strong>dir c:\windows /p</strong>  。这样就能在每显示一个屏幕的内容后暂停一下以便查看。 </p><p>只要输入 <strong>dir /?</strong> 就能得到关于dir命令完整的使用介绍，而且是中文的。同理，<strong>任何命令后面跟上 /? 的参数，都能得到该命令的完整说明</strong></p><p>输入 <strong>help dir</strong> 就能得到命令 dir 的具体参数及其用法(等同与 dir /? )</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><ol><li><p><strong>d:</strong> </p><p>转到驱动器D盘下，此时我们能看到 D:&gt; 的提示符(前提是您的电脑硬盘必须至少划分出D盘)。如果看到的不是就再输入下一行命令。 </p></li><li><p>*<em>cd\*</em> </p><p>这一条命令 cd 的作用是改变当前的工作目录，后面加上 \ 表示返回到该驱动器的最顶级目录。另外，一个句点 . 表示当前文件夹，两个连续的句点 .. 则表示上一级文件夹， cd.. 即目录向上一级。 </p></li><li><p><strong>md test</strong> </p><p>正如前文所说，命令 md 的作用是创建子目录，此时打开D盘看一看，是不是多了一个名叫test的文件夹(如果不是事先早已存在的话)。事实上该命令的完整写法为 md d:\test ，由于当前目录已经在D盘了，所以我们把具体的路径给简化了。 </p></li><li><p><strong>md “test my folder”</strong> </p><p>同理，在D盘创建一个名为test my  folder的文件夹。加双引号的目的是告诉计算机我们要创建一个名字中含有空格的文件夹，而不是分别创建名字分别为test、my和folder的3个不同的文件夹。注：除了空格以外，在路径或文件名中含有 &amp;()[]{}^=;!’+,`~ 特殊字符时也需要用双引号引用起来，以便机器能够正确地识别。 </p></li><li><p><strong>cd test</strong> </p><p>改变当前工作目录，此时不再是D盘了，而是在 D:\test 的目录下。 </p></li><li><p><strong>echo Hello world&gt;a.txt</strong> </p><p>遇到了一个新命令 echo ，它可以将某某内容显示出来。只考虑 echo Hello world 就是把字符串 Hello world  显示出来而已。后面使用了符号 &gt; 表示将这句 Hello world 写入到某文件中。结果为：在 D:\test 文件夹里多了一个叫  a.txt 的文件，其内容为 Hello world 。 </p></li><li><p><strong>copy a.txt “d:\test my folder”</strong> </p><p>这就是将当前文件夹里的那个 a.txt 文件复制到 D:\test my folder 文件夹中 </p></li><li><p><strong>copy a.txt “..\test my folder\b.txt”</strong> </p><p>还是复制 a.txt ，但这次的路径与上一条命令的写法不同。 .. 表示先向上一级，再挪到 test my folder  文件夹里。其实还是复制到 D:\test my folder  这个文件夹里了。这次复制过去的文件名也不一样，因为这次我们指定了要复制过去的目标文件名为 b.txt 。 </p></li><li><p><strong>copy a.txt “..\test my folder\c.bmp”</strong> </p><p>再次复制 a.txt 到同样的文件夹里。不过这次不光改文件的标题名了，连文件的后缀名也改了。打开 D:\test my folder 文件夹检查一下，是不是多了名字分别叫 a.txt b.txt c.bmp 的3个文件。 </p></li><li><p><strong>cd..</strong> </p><p>向上一级 </p></li><li><p><strong>cd “test my folder”</strong> </p><p>进入 D:\test my folder 文件夹 </p></li><li><p><strong>ren c.bmp d.bin</strong> </p><p>重新命名文件 c.bmp 为 d.bin 。完整地写法为 ren “d:\test my folder\c.bmp” d.bin 。 </p></li><li><p>*<em>del <em>.txt</em></em> </p><p>删除当前工作目录中所有文件后缀名为 .txt 的文件。 * 表示通配符。例如：a.* 表示所有文件标题为 a 的文件，不论后缀名。  <em>.</em> 则表示任何标题名和任何后缀名的文件，即所有文件。此时结果应为：该目录里的 a.txt b.txt  这两个文件已经不存在了，即使是在回收站里也找不到了。 </p></li><li><p><strong>cd..</strong> </p><p>向上一级 </p></li><li><p><strong>rd test “test my folder”</strong> </p><p>这一条命令是想同时移除 test 和 test my folder 这两个文件夹。不过结果并没有成功，因为它会提示：目录不是空的。test 文件夹中有 a.txt ，test my folder 文件夹中还有 d.bin ，因此文件夹删不掉。 </p></li><li><p><strong>rd test “test my folder” /s</strong> </p><p>如果加上 /s 这个参数后就能删除这两个文件夹以及其文件夹中所包含的所有内容了。注意：删除前请确认这些文件夹是否是您以前就有的文件夹，或者说里面是否存有任何有用文件，不要因为这个测试而丢掉了重要文件。 </p></li></ol><h1 id="2-我们的第一个批处理"><a href="#2-我们的第一个批处理" class="headerlink" title="2. 我们的第一个批处理"></a>2. 我们的第一个批处理</h1><ol><li><p>我们在桌面建一个文件MyFirstBatch.bat</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">md</span> &quot;d:\test&quot; &quot;d:\test my folder&quot;</span><br><span class="line"><span class="built_in">echo</span> Hello world&gt;&quot;d:\test\a.txt&quot;</span><br><span class="line"><span class="built_in">copy</span> &quot;d:\test\a.txt&quot; &quot;d:\test my folder&quot;</span><br><span class="line"><span class="built_in">copy</span> &quot;d:\test\a.txt&quot; &quot;d:\test my folder\b.txt&quot;</span><br><span class="line"><span class="built_in">copy</span> &quot;d:\test\a.txt&quot; &quot;d:\test my folder\c.bmp&quot;</span><br><span class="line"><span class="built_in">ren</span> &quot;d:\test my folder\c.bmp&quot; d.bin </span><br></pre></td></tr></table></figure></li></ol><p>双击后，显示的只是一闪就关闭了。正确的结果是在D盘多了名字分别为 test 和 test my folder 的两个文件夹。文件夹 test  里有一个叫 a.txt 的文件。而文件夹 test my folder 里有名字分别为 a.txt b.txt 和 d.bin 的3个文件。</p><h1 id="3-显示"><a href="#3-显示" class="headerlink" title="3. 显示"></a>3. 显示</h1><p>先看一下 <strong>echo、@、pause、&gt;、&gt;&gt;、title 、rem</strong> 这几个命令或符号的用法。</p>]]></content>
      
      
      <categories>
          
          <category> 批处理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 批处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10-git入门</title>
      <link href="/2022/02/09/10-git%E5%85%A5%E9%97%A8/"/>
      <url>/2022/02/09/10-git%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-版本控制"><a href="#1-版本控制" class="headerlink" title="1.版本控制"></a>1.版本控制</h1><blockquote><p>什么是版本控制</p></blockquote><p>版本控制（Revision control）是一种在开发的过程中用于管理我们对文件、目录或工程等内容的修改历</p><p>史，方便查看更改历史记录，备份以便恢复以前的版本的软件工程技术。</p><ul><li><p>实现跨区域多人协同开发</p></li><li><p>追踪和记载一个或者多个文件的历史记录</p></li><li><p>组织和保护你的源代码和文档</p></li><li><p>统计工作量</p></li><li><p>并行开发、提高开发效率</p></li><li><p>跟踪记录整个软件的开发过程</p></li><li><p>减轻开发人员的负担，节省时间，同时降低人为错误</p></li></ul><p>简单说就是用于管理多人协同开发项目的技术。</p><p>没有进行版本控制或者版本控制本身缺乏正确的流程管理，在软件开发过程中将会引入很多问题，如软</p><p>件代码的一致性、软件内容的冗余、软件过程的事物性、软件开发过程中的并发性、软件源代码的安全</p><p>性，以及软件的整合等问题。</p><p>多人开发必须使用版本控制,否则代价会比较大!</p><blockquote><p>常见的版本控制工具</p></blockquote><p>我们学习的东西一定要是最新的</p><p><strong>Git</strong></p><p><strong>SVN</strong>（Subversion）</p><p><strong>CVS</strong>（Concurrent Versions System）</p><p><strong>VSS</strong>（Micorosoft Visual SourceSafe）</p><p><strong>TFS</strong>（</p><p>Team Foundation Server）</p><p>Visual Studio Online</p><p>版本控制产品非常的多（Perforce、Rational ClearCase、RCS（GNU Revision Control System）、</p><p>Serena Dimention、SVK、BitKeeper、Monotone、Bazaar、Mercurial、SourceGear Vault），现在</p><p>影响力最大且使用最广泛的是Git与SVN</p><blockquote><p>版本控制分类</p></blockquote><p><strong>1.本地版本控制</strong></p><p>记录文件每次的更新，可以对每个版本做一个快照，或是记录补丁文件，适合个人用，如RCS</p><p><strong>2、集中版本控制</strong></p><p>有的版本数据都保存在服务器上，协同开发者从服务器上同步更新或上传自己的修改</p><p>所有的版本数据都存在服务器上，用户的本地只有自己以前所同步的版本，如果不连网的话，用户就看</p><p>不到历史版本，也无法切换版本验证问题，或在不同分支工作。而且，所有数据都保存在单一的服务器</p><p>上，有很大的风险这个服务器会损坏，这样就会丢失所有的数据，当然可以定期备份。代表产品：</p><p>SVN、CVS、VSS</p><p><strong>3、分布式版本控制</strong></p><p>所有版本信息仓库全部同步到本地的每个用户，这样就可以在本地查看所有版本历史，可以离线在本地</p><p>提交，只需在连网时push到相应的服务器或其他用户那里。由于每个用户那里保存的都是所有的版本数</p><p>据，只要有一个用户的设备没有问题就可以恢复所有的数据，但这增加了本地存储空间的占用。</p><blockquote><p>Git与SVN最主要区别</p></blockquote><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而工作的时候，用的都是自己的电脑，</p><p>所以首先要从中央服务器得到最新的版本，然后工作，完成工作后，需要把自己做完的活推送到中央服</p><p>务器。集中式版本控制系统是必须联网才能工作，对网络带宽要求较高。</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-09_10-50-00.png" alt="Snipaste_2022-02-09_10-50-00"></p><p>Git是分布式版本控制系统，没有中央服务器，每个人的电脑就是一个完整的版本库，工作的时候不需要</p><p>联网了，因为版本都在自己电脑上。协同的方法是这样的：比如说自己在电脑上改了文件A，其他人也</p><p>在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改</p><p>了。</p><p>Git是目前世界上最先进的分布式版本控制系统。</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-09_10-49-30.png" alt="Snipaste_2022-02-09_10-49-30"></p><h1 id="Git环境配置"><a href="#Git环境配置" class="headerlink" title="Git环境配置"></a>Git环境配置</h1><blockquote><p>软件下载</p></blockquote><p>打开 [git官网] <a href="https://git-scm.com/%EF%BC%8C%E4%B8%8B%E8%BD%BDgit%E5%AF%B9%E5%BA%94%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%88%E6%9C%AC%E3%80%82">https://git-scm.com/，下载git对应操作系统的版本。</a></p><p>所有下载慢的软件都可以这样</p><p>官网下载太慢，我们可以使用淘宝镜像下载：<a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p><blockquote><p>启动git</p></blockquote><p>Git Bash：Unix与Linux风格的命令行，使用最多，推荐最多</p><p>Git CMD：Windows风格的命令行</p><p>Git GUI：图形界面的Git，不建议初学者使用，尽量先熟悉常用命令</p><blockquote><p>基本的Linux命令学习</p></blockquote><p>1）、cd : 改变目录。</p><p>2）、cd . . 回退到上一个目录，直接cd进入默认目录</p><p>3）、pwd : 显示当前所在的目录路径。</p><p>4）、ls(ll):  都是列出当前目录中的所有文件，只不过ll(两个ll)列出的内容更为详细。</p><p>5）、touch : 新建一个文件如 touch index.js 就会在当前目录下新建一个index.js文件。</p><p>6）、rm:  删除一个文件, rm index.js 就会把index.js文件删除。</p><p>7）、mkdir:  新建一个目录,就是新建一个文件夹。</p><p>8）、rm -r :  删除一个文件夹, rm -r src 删除src目录</p><p>9）、mv 移动文件, mv index.html src index.html 是我们要移动的文件, src 是目标文件夹,当然, 这样写,</p><p>必须保证文件和目标文件夹在同一目录下。</p><p>10）、reset 重新初始化终端/清屏。</p><p>11）、clear 清屏。</p><p>12）、history 查看命令历史。</p><p>13）、help 帮助。</p><p>14）、exit 退出。</p><p>15）、#表示注释</p><blockquote><p>git配置</p></blockquote><p>查看配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config -l</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-spring5全部基础</title>
      <link href="/2022/02/08/9-spring5%E5%85%A8%E9%83%A8%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/02/08/9-spring5%E5%85%A8%E9%83%A8%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="1-spring简介"><a href="#1-spring简介" class="headerlink" title="1.spring简介"></a>1.spring简介</h1><h2 id="1-1-spring简介"><a href="#1-1-spring简介" class="headerlink" title="1.1 spring简介"></a>1.1 spring简介</h2><p>Spring框架以interface21为基础</p><p>不要重复造轮子</p><p>有强大的向后兼容性,整合了现有的技术框架</p><p>spring为了简化开发,使现有的技术更容易使用,本身是一个大杂烩</p><p>SSH:Struct2+Spring+Hibernate</p><p>SSM:SpringMVC+Spring+Mybatis</p><p><a href="https://spring.io/">spring官网</a></p><p><a href="https://repo.spring.io/ui/native/release/org/springframework/spring">spring全版本下载</a></p><h2 id="1-2-maven仓库里面的spring-web-mvc"><a href="#1-2-maven仓库里面的spring-web-mvc" class="headerlink" title="1.2 maven仓库里面的spring web mvc"></a>1.2 maven仓库里面的spring web mvc</h2><p><a href="https://mvnrepository.com/artifact/org.springframework/spring-webmvc">https://mvnrepository.com/artifact/org.springframework/spring-webmvc</a></p><h2 id="1-3-spring优点"><a href="#1-3-spring优点" class="headerlink" title="1.3 spring优点"></a>1.3 spring优点</h2><p>spring是一个免费开源的框架</p><p>spring是一个轻量级,非入侵式的框架</p><p>控制反转(IOC),面向切面编程(AOP)</p><p>支持事务的处理,对框架整合的支持</p><h1 id="2-Spring5的组成和拓展"><a href="#2-Spring5的组成和拓展" class="headerlink" title="2.Spring5的组成和拓展"></a>2.Spring5的组成和拓展</h1><h2 id="2-1-spring7大模块"><a href="#2-1-spring7大模块" class="headerlink" title="2.1 spring7大模块"></a>2.1 spring7大模块</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/20170713150400373.bmp" alt="20170713150400373"></p><p>在Spring的官网有这个介绍:现代化Java开发!说白了就是基于spring的开发</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-03_16-52-03.png" alt="Snipaste_2022-02-03_16-52-03"></p><h2 id="2-2-spring-Coot"><a href="#2-2-spring-Coot" class="headerlink" title="2.2 spring Coot"></a>2.2 spring Coot</h2><p>一个快速开发的脚手架</p><p>基于spring boot可以快速开发单个微服务</p><p>约定大于配置</p><h2 id="2-3-spring-Cloud"><a href="#2-3-spring-Cloud" class="headerlink" title="2.3 spring Cloud"></a>2.3 spring Cloud</h2><p>springcloud是基于spring boot实现的</p><p>因为现在大多数公司都在使用spring boot进行快速开发,学习spring boot是前提,需要完全掌握spring和springmvc!承上启下的作用!</p><p><em>spring弊端:发展了太久后违背的原来的理念!</em></p><p><em>配置十分繁琐,人称”配置地狱”</em></p><p><strong>现在大多数公司都在使用spring boot进行开发,学习spring boot的前提,需要完全掌握spring,以及springmvc!承上启下是作用!</strong></p><h1 id="3-IOC理论推导"><a href="#3-IOC理论推导" class="headerlink" title="3.IOC理论推导"></a>3.IOC理论推导</h1><h2 id="3-1-IOC"><a href="#3-1-IOC" class="headerlink" title="3.1 IOC"></a>3.1 IOC</h2><ol><li>UserDao接口</li><li>UserDaoImpl实现类</li><li>UserService业务接口</li><li>UserServiceImpl业务实现类</li></ol><p>导入jar包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户实际调用的是业务层,不直接接触Dao层</p><h2 id="3-2-IOC创建对象的方式"><a href="#3-2-IOC创建对象的方式" class="headerlink" title="3.2 IOC创建对象的方式"></a>3.2 IOC创建对象的方式</h2><p>通过无参方式构造</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>第一种构造器:下标赋值</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦说Java&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过类型创建(不建议使用)</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦说Java123&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>直接通过参数名来设置</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>创建bean的时候已经初始化了,在配置文件加载的时候,容器里面的类就已经初始化了</p><p>内存中只有一个实例,就取那一个</p><h1 id="7-bean的自动装配"><a href="#7-bean的自动装配" class="headerlink" title="7.bean的自动装配"></a>7.bean的自动装配</h1><ul><li>自动装配是spring满足bean依赖的一种方式!</li><li>spring会在上下文中自动寻找bean,并自动给bean装配属性</li></ul><ul><li>在spring中有三种装配方式<ol><li>在xml中显示的配置</li><li>在Java中显示的配置</li><li>隐式的自动装配bean[重要]</li></ol></li></ul><h2 id="7-1-测试"><a href="#7-1-测试" class="headerlink" title="7.1 测试"></a>7.1 测试</h2><ul><li>环境搭建:一个人有两个宠物</li></ul><p>未实现自动装配时的普通写法</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;小狂神&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>byname来实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>byname会在容器上下文中自动查找,和自己对象set方法后面的值对应的beanid!</p></blockquote><p>byname注入失败的情况,id改了</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>bytype来实现</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>bytype在容器上下文中自动查找,和自己对象属性类型相同的bean!</p></blockquote><p>假设有两个dog就失败了,要保证全局唯一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog222&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog111&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>去掉id依然可以</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>小结:</p><ul><li>byname的时候,需要保证所有bean的id唯一,并且这个bean需要和自动注入的属性的set方法的值一致</li><li>bytype的时候,需要保证所有bean的class唯一,并且这个bean需要和自动注入的属性的类型一致</li></ul><h2 id="7-2-使用注解实现自动装配"><a href="#7-2-使用注解实现自动装配" class="headerlink" title="7.2 使用注解实现自动装配"></a>7.2 使用注解实现自动装配</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> //注解的约束</span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span> // 开启约束,这个千万别忘记</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Cat&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.People&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>jdk1.5,spring2.5开始支持注解</p></blockquote><p>要使用注解须知:</p><ol><li>导入约束</li><li>配置注解的支持:<strong><a href="context:annotation-config/">context:annotation-config/</a></strong></li></ol><p>如何使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Cat cat;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>@Autowired</p><p>在属性上用,也可以在set方法上面用,就可以注解实现自动装配</p><p><strong>使用Autowired后,我们可以不用写set方法了,前提是你这个自动装配的属性在IOC(spring)容器中存在,且符合类型bytype</strong></p><p>科普:一般用不到</p><blockquote><p>@Nullable 加了这个注解,字段可以为null</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(<span class="meta">@Nullable</span> String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p><em>@Autowired源码</em>,required默认为true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Autowired &#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">required</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">true</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired(required = false)</span> 然后这样定义了,说明属性可以为<span class="keyword">null</span></span><br></pre></td></tr></table></figure><p>可以显示指定一个唯一的装配的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier(value=&quot;dog222&quot;)</span></span><br><span class="line"><span class="keyword">private</span> Dog dog;</span><br></pre></td></tr></table></figure><p>如果@Autowired自动装配的环境很复杂,自动装配无法通过一个注解完成的时候,五年可以采用@Qualifier(value=”xxx”),去配合@Autowired的使用,指定一个唯一的bean对象注入!</p><p>上面是spring的注解</p><p>java的注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span>   效率略低一点</span><br></pre></td></tr></table></figure><p>先通过名字,再通过类型查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource(name = &quot;cat&quot;)</span></span><br></pre></td></tr></table></figure><p><strong>小结</strong>:@R和@A的区别</p><ul><li>都是用来自动装配的,都可以放在属性字段上</li><li>A默认通过bytype,而且必须要求这个对象存在</li><li>R默认先通过byname,然后给找不到再bytype,如果两个都找不到就报错</li><li>R是A与Q的集合体</li><li>执行顺序不同</li></ul><h1 id="8-使用注解开发"><a href="#8-使用注解开发" class="headerlink" title="8. 使用注解开发"></a>8. 使用注解开发</h1><p>在spring4 之后,要使用注解开发,必须保证aop的包导入了</p><p>在使用注解需要导入context约束,增加注解的支持</p><ol><li><p>bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    指定要扫描的包，这个包下的注解就会生效--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qin.pojo&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//等价于    &lt;bean id=&quot;user&quot; class=&quot;com.qin.pojo.User&quot;/&gt;</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//组件,放在类上,说明这个类被spring管理了</span></span><br></pre></td></tr></table></figure></li><li><p>属性如何注入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;liqin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String name;</span><br><span class="line"><span class="comment">//等价于 &lt;property name=&quot;name&quot; value=&quot;xxx&quot;/&gt;</span></span><br></pre></td></tr></table></figure><p>简单的可以这样来,如果比较复杂就不行</p><p>@Value也可以写在get方法上</p></li><li><p>衍生的注解</p><p>@Component有几个衍生注解,我们在web开发中,会按照mvc三层架构分层</p><ul><li>dao        [@Repository]</li><li>service       [@Service]</li><li>controller       [@Controller]</li></ul><p>这四个注解功能一样,表示被装配了,被spring接管了</p></li><li><p>自动装配</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="meta">@Qualifier</span></span><br><span class="line"><span class="meta">@Resource</span></span><br></pre></td></tr></table></figure></li><li><p>作用域</p><p>@Scope</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Scope(&quot;singleton&quot;) //单例</span><br><span class="line">@Scope(&quot;prototype&quot;) //原型</span><br></pre></td></tr></table></figure></li><li><p>小结</p><p>xml与注解</p><ul><li>xml适用于一切场合!维护简单方便</li><li>注解不是自己的类使用不了,其他的类引用不了,维护相对复杂</li></ul></li></ol><p>xml与注解最佳实践:</p><ul><li>xml用来管理bean</li><li>注解只负责完成属性的注入</li><li>我们在使用的过程中,只需要注意一个问题,必须让注解生效:就要开启注解的支持</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.qin.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="9-完全使用java的方式配置Spring"><a href="#9-完全使用java的方式配置Spring" class="headerlink" title="9. 完全使用java的方式配置Spring"></a>9. 完全使用java的方式配置Spring</h1><p>我们现在要完全不使用spring的xml配置了,全权交给java来做</p><p>javaconfig是spring的一个子项目,在spring4之后,他成为了一个核心功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @Configuration代表这是一个配置类，就和我们之前看的beans.xml,这也会被spring托管,注册到容器中</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br></pre></td></tr></table></figure><blockquote><p>扫描包</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&quot;com.kuang.pojo&quot;)</span></span><br></pre></td></tr></table></figure><blockquote><p>注册一个bean</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">user</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(); <span class="comment">//就是返回要注入到bean的对象！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这个方法的名字就相当于bean标签中的id属性</strong></p><p><strong>这个方法的返回值就相当于bean标签中的class属性</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> AnnotationConfigApplicationContext(KuangConfig.class);</span><br><span class="line">User getUser = (User) context.getBean(<span class="string">&quot;user&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Import(KuangConfig2.class)</span> <span class="comment">//融合配置类</span></span><br></pre></td></tr></table></figure><p>新特性,年纪大的程序员基本不会学到这里</p><p>这种纯java的配置方式,在springboot中随处可见</p><p>自学失败的原因,注解上手spring boot,不了解底层,必须完全掌握spring以及springmvc才可以学习spring boot</p><h1 id="10-代理模式"><a href="#10-代理模式" class="headerlink" title="10.代理模式"></a>10.代理模式</h1><p>为什么学习代理模式?</p><p>因为这就是springAOP的底层!</p><p>[springAOP和springMVC]</p><p>代理模式的分类:</p><ul><li>静态代理</li><li>动态代理</li></ul><h2 id="10-1-静态代理"><a href="#10-1-静态代理" class="headerlink" title="10.1 静态代理"></a>10.1 静态代理</h2><p>角色分析:</p><ul><li>抽象角色:一般会使用接口或者抽象类来解决</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.client.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//租房接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>真实角色:被代理的角色</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.client.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">//房东</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Host</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房东要出租房子！&quot;</span>);</span><br><span class="line">    &#125; <span class="comment">//房东要出租房子，喊口号</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>代理角色:代理真实角色,代理真实角色后我们一般会做一些附属操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.client.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span> <span class="keyword">implements</span> <span class="title">Rent</span> </span>&#123;</span><br><span class="line"><span class="comment">//    组合,没有用继承</span></span><br><span class="line">    <span class="keyword">private</span> Host host;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Proxy</span><span class="params">(Host host)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.host = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    代理帮房东租房子</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        host.rent();</span><br><span class="line">        hetong();</span><br><span class="line">        fare();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中介带你看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hetong</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;签租赁合同&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fare</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>客户:访问代理对象的人</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.client.demo01;</span><br><span class="line"><span class="comment">//我要租房子</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//房东要租房子</span></span><br><span class="line">        Host host = <span class="keyword">new</span> Host();</span><br><span class="line">        <span class="comment">//代理，中介帮房东租房子，但是呢？代理角一般会有一些附属操作！</span></span><br><span class="line">        Proxy proxy = <span class="keyword">new</span> Proxy(host);</span><br><span class="line"><span class="comment">//        host.rent();</span></span><br><span class="line">        <span class="comment">//你不用面对房东，直接找中介租房即可！</span></span><br><span class="line">        proxy.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态代理的好处:</p><ul><li>可以使真实角色的操作更加纯粹!不用去关注一些公共业务</li><li>公共也就交给代理角色!实现了业务的分工</li><li>公共业务发生扩展的时候,方便集中管理</li></ul><p>缺点:</p><ul><li>一个真实的角色就会产生一个代理角色;代码量会翻倍~开发效率会变低</li></ul><h2 id="10-1-1-加深理解"><a href="#10-1-1-加深理解" class="headerlink" title="10.1.1 加深理解"></a>10.1.1 加深理解</h2><p><strong>聊聊AOP</strong></p><p><img src="https://gitee.com/secqin/img/raw/master/Snipaste_2022-02-19_16-03-32.png" alt="Snipaste_2022-02-19_16-03-32"></p><h2 id="10-2-动态代理"><a href="#10-2-动态代理" class="headerlink" title="10.2 动态代理"></a>10.2 动态代理</h2><p>怎么解决那个缺点,我们想代理,但是不想类去增加</p><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的,不是我们直接写好的!</li><li>动态代理分为两大类:基于接口的动态代理,基于类的动态代理</li></ul><p>​            基于接口的动态代理-JDK动态代理[我们在这里使用]</p><p>​            基于类的:cglib</p><p>​            java字节码实现:javassist</p><p>需要了解两个类:Proxy,Ivocationhandler:调用处理程序</p><p>动态代理的好处:</p><ul><li>可以使真实角色的操作更加纯粹!不用去关注一些公共业务</li><li>公共也就交给代理角色!实现了业务的分工</li><li>公共业务发生扩展的时候,方便集中管理</li><li>一个动态类代理的是一个接口,一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类,只要是实现了同一个接口即可</li></ul><h1 id="11-AOP"><a href="#11-AOP" class="headerlink" title="11.AOP"></a>11.AOP</h1><h2 id="11-1-什么是AOP"><a href="#11-1-什么是AOP" class="headerlink" title="11.1 什么是AOP"></a>11.1 什么是AOP</h2><p>AOP（Aspect Oriented Programming）意为：面向切面编程，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p><h2 id="11-2-AOP在spring中的作用"><a href="#11-2-AOP在spring中的作用" class="headerlink" title="11.2 AOP在spring中的作用"></a>11.2 AOP在spring中的作用</h2><p><strong>提供声明式事务；允许用户自定义切面</strong></p><ul><li><p>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务逻辑无关的，但是我们需要</p></li><li><p>关注的部分，就是横切关注点。如日志 , 安全 , 缓存 , 事务等等 ….</p></li><li><p>切面（ASPECT）：横切关注点 被模块化 的特殊对象。即，它是一个类。</p></li><li><p>通知（Advice）：切面必须要完成的工作。即，它是类中的一个方法。</p></li><li><p>目标（Target）：被通知对象。</p></li><li><p>代理（Proxy）：向目标对象应用通知之后创建的对象。</p></li><li><p>切入点（PointCut）：切面通知 执行的 “地点”的定义。</p></li><li><p>连接点（JointPoint）：与切入点匹配的执行点。</p></li></ul><p>SpringAOP中，通过Advice定义横切逻辑，Spring中支持5种类型的Advice:</p><h2 id="11-3-使用spring实现AOP"><a href="#11-3-使用spring实现AOP" class="headerlink" title="11.3 使用spring实现AOP"></a>11.3 使用spring实现AOP</h2><p>需要导入一个织入依赖包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>**方式一:**使用spring的api接口</p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-bean作用域</title>
      <link href="/2022/02/08/8-bean%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>/2022/02/08/8-bean%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-单例"><a href="#1-单例" class="headerlink" title="1.单例"></a>1.单例</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;黎钦&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>即hashcode相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student student = context.getBean(<span class="string">&quot;stu&quot;</span>,Student.class);</span><br><span class="line">Student student1 = context.getBean(<span class="string">&quot;stu&quot;</span>,Student.class);</span><br><span class="line">System.out.println(student == student1);</span><br></pre></td></tr></table></figure><blockquote><p>true</p></blockquote><p>没有写的话,默认单例</p><h1 id="2-原型模式"><a href="#2-原型模式" class="headerlink" title="2.原型模式"></a>2.原型模式</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;黎钦&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student student = context.getBean(<span class="string">&quot;stu&quot;</span>,Student.class);</span><br><span class="line">Student student1 = context.getBean(<span class="string">&quot;stu&quot;</span>,Student.class);</span><br><span class="line">System.out.println(student == student1);</span><br></pre></td></tr></table></figure><blockquote><p>false</p></blockquote><p>每次从容器中get的时候都会产生一个新对象!</p><h1 id="3-其余的request-session-application"><a href="#3-其余的request-session-application" class="headerlink" title="3.其余的request,session,application"></a>3.其余的request,session,application</h1><p>这些只能在web开发中使用</p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.DI依赖注入</title>
      <link href="/2022/02/06/7-DI%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/"/>
      <url>/2022/02/06/7-DI%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="1-依赖注入"><a href="#1-依赖注入" class="headerlink" title="1. 依赖注入"></a>1. 依赖注入</h1><h2 id="1-1-构造器注入"><a href="#1-1-构造器注入" class="headerlink" title="1.1 构造器注入"></a>1.1 构造器注入</h2><p>前面已经说过了,3种</p><h2 id="1-2-set方式注入-重点"><a href="#1-2-set方式注入-重点" class="headerlink" title="1.2 set方式注入[重点]"></a>1.2 set方式注入[重点]</h2><p>依赖注入:set注入!(依赖set方法)</p><ul><li><p>依赖:bean对象的创建依赖容器</p></li><li><p>注入:bean对象中的属性,由容器来注入</p></li></ul><p>[环境搭建]</p><ol><li><p>复杂类型</p><blockquote><p>Student</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String name; <span class="comment">// 已掌握,value</span></span><br><span class="line"><span class="keyword">private</span> Address address; <span class="comment">// ref</span></span><br><span class="line"><span class="keyword">private</span> String[] books;</span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; hobby;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line"><span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line"><span class="keyword">private</span> String wife; <span class="comment">// 空指针</span></span><br><span class="line"><span class="keyword">private</span> Properties info; <span class="comment">// 配置类</span></span><br></pre></td></tr></table></figure><blockquote><p>Address</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String address;</span><br><span class="line">   </span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>beans.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;湖北&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;stu&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Student&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        第一种，普通值注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;黎钦&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        第二种，bean注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第三种，数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>美国历史<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>三国演义<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>金瓶梅<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第四种，list数组注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>抽烟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>喝酒<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>烫头<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第四种，Map注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;身份证&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1243345345345435345345&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;代号&quot;</span> <span class="attr">value</span>=<span class="string">&quot;921&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;银行卡&quot;</span> <span class="attr">value</span>=<span class="string">&quot;wqeqwe&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第四种,set注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>LOL<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>coc<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第四种,null注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">null</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--       第四种,properties注入--&gt;</span> 属性类注入</span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;nums&quot;</span>&gt;</span>123123<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;vo&quot;</span>&gt;</span>qwefsdf<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>真实测试对象</p></li></ol><h2 id="1-3-拓展方式注入"><a href="#1-3-拓展方式注入" class="headerlink" title="1.3 拓展方式注入"></a>1.3 拓展方式注入</h2><h2 id="c命名和p命名空间-不是重点"><a href="#c命名和p命名空间-不是重点" class="headerlink" title="c命名和p命名空间(不是重点)"></a>c命名和p命名空间(不是重点)</h2><p>p:perproty</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span> //关键</span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:c</span>=<span class="string">&quot;http://www.springframework.org/schema/c&quot;</span> //关键,导入头文件约束</span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    property--&gt;</span>   直接注入属性的值</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;黎钦&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    constructs--&gt;</span>   通过构造器注入</span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;user2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> <span class="attr">c:age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">c:name</span>=<span class="string">&quot;狂神&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>快捷键:<em>CPX</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student student = (Student) context.getBean(<span class="string">&quot;stu&quot;</span>);</span><br><span class="line">Student student = context.getBean(<span class="string">&quot;stu&quot;</span>,Student.class);</span><br></pre></td></tr></table></figure><blockquote><p>这两种方式均可</p></blockquote><p>我们可以使用p命名空间和c命名空间进行注入</p><p><strong>注意点:</strong></p><p>p命名和c命名空间不能直接使用,需要导入xml头约束</p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Spring的配置说明</title>
      <link href="/2022/02/06/6-Spring%E7%9A%84%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/"/>
      <url>/2022/02/06/6-Spring%E7%9A%84%E9%85%8D%E7%BD%AE%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Spring配置"><a href="#1-Spring配置" class="headerlink" title="1.Spring配置"></a>1.Spring配置</h1><h2 id="1-1-别名"><a href="#1-1-别名" class="headerlink" title="1.1 别名"></a>1.1 别名</h2><p>如果添加了别名,我们也可以通过别名取得对象</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">alias</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;li&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">alias</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="1-2-bean的配置"><a href="#1-2-bean的配置" class="headerlink" title="1.2 bean的配置"></a>1.2 bean的配置</h2><p>id是bean的唯一标识符,也就是相当于我们学的对象名</p><p>class:bean 对象所对应的权限定名:包名加类名</p><p>name:也是别名,而且name更高级,可以同时取多个别名,一般不用alias</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">&quot;user&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.User&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user2,u2 u3;u4&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>逗号,空格,分号均可分割</p><h2 id="1-3-import"><a href="#1-3-import" class="headerlink" title="1.3 import"></a>1.3 import</h2><p>这个import一般用于团队开发使用,可以将多个配置文件导入合并为一个</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;beans2.xml&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>假设,现在项目中有多个人开发,这三个人复制不同的类开发,不同的类需要注册在不同的bean中,我们可以利用import讲所有人的beans.xm合并为一个总的</p><p>使用的时候用总的即可,内容相同也会被合并</p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-HelloSpring</title>
      <link href="/2022/02/06/4-HelloSpring/"/>
      <url>/2022/02/06/4-HelloSpring/</url>
      
        <content type="html"><![CDATA[<h1 id="1-HelloSpring"><a href="#1-HelloSpring" class="headerlink" title="1.HelloSpring"></a>1.HelloSpring</h1><blockquote><p>mytest.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.qin.pojo.Hello;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取spring上下文对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//我们的对象现在都在spring中的管理了，我们要使用，直接去里面取出来就可以了</span></span><br><span class="line">        Hello hello = (Hello) context.getBean(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Hello对象是谁创建的?</p></blockquote><p>spring创建的</p><p>bean=对象</p><p>类型 变量名 = new 类型();</p><p>id就是变量名</p><p>class就是要new的对象</p><p>property 相当于给对象中的属性设置一个值</p><blockquote><p>beans.xml</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    使用spring来创建对象--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span> =<span class="string">&quot;hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.pojo.Hello&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;str&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>hello.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStr</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.str = str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;str=&#x27;&quot;</span> + str + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关键是靠这个set对象,如果去掉就不能注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;UserServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.qin.service.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        ref引用spring容器中创建好的对象--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        value:具体的值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;asd&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用类型用ref</p><blockquote><p>拿到spring容器</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;beans.xml&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>对象由spring创建,管理以及装配</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.smbms项目搭建</title>
      <link href="/2022/02/03/3-smbms%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/02/03/3-smbms%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="1-项目搭建"><a href="#1-项目搭建" class="headerlink" title="1.项目搭建"></a>1.项目搭建</h1><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-03_21-44-56.png" alt="Snipaste_2022-02-03_21-44-56"></p><p>使不使用maven?</p><ol><li><p>搭建一个maven webapp项目</p></li><li><p>配置tomcat</p></li><li><p>测试项目可不可以跑起来</p></li><li><p>导入项目中会遇到的jar包</p><p>jsp,servlet,mysql驱动,jstl</p></li><li><p>创建项目包结构</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-03_21-59-33.png"></p></li><li><p>编写实体类</p><p>ORM映射:表-&gt;类映射</p></li><li><p>编写基础公共类</p><ol><li><p>数据库配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">url=jdbc:mysql:<span class="comment">//localhost:3306?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">user=root</span><br><span class="line">password=secqin</span><br></pre></td></tr></table></figure></li><li><p>读取数据库配置文件</p></li><li><p>编写数据库公共类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.qin.dao;</span><br><span class="line"><span class="comment">//操作数据库公共类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 操作数据库的基类--静态类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Administrator</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span> </span>&#123;</span><br><span class="line"><span class="comment">//静态代码块,在类加载的时候执行</span></span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">init();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String user;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化连接参数,从配置文件里获得</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">Properties params=<span class="keyword">new</span> Properties();</span><br><span class="line">String configFile = <span class="string">&quot;database.properties&quot;</span>;</span><br><span class="line">InputStream is= BaseDao.class.getClassLoader().getResourceAsStream(configFile); <span class="comment">//资源变成流</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">params.load(is); <span class="comment">//加载流</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">driver=params.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">url=params.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">user=params.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">password=params.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取数据库连接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span></span>&#123;</span><br><span class="line">Connection connection = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Class.forName(driver); <span class="comment">//反射</span></span><br><span class="line">connection = DriverManager.getConnection(url, user, password);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> connection;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pstm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultSet <span class="title">execute</span><span class="params">(Connection connection,PreparedStatement pstm,ResultSet rs,</span></span></span><br><span class="line"><span class="params"><span class="function">String sql,Object[] params)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">pstm = connection.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++)&#123;</span><br><span class="line">pstm.setObject(i+<span class="number">1</span>, params[i]);</span><br><span class="line">&#125;</span><br><span class="line">rs = pstm.executeQuery();</span><br><span class="line"><span class="keyword">return</span> rs;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新操作</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pstm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> sql</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> params</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">execute</span><span class="params">(Connection connection,PreparedStatement pstm,</span></span></span><br><span class="line"><span class="params"><span class="function">String sql,Object[] params)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">int</span> updateRows = <span class="number">0</span>;</span><br><span class="line">pstm = connection.prepareStatement(sql);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; params.length; i++)&#123;</span><br><span class="line">pstm.setObject(i+<span class="number">1</span>, params[i]);</span><br><span class="line">&#125;</span><br><span class="line">updateRows = pstm.executeUpdate();</span><br><span class="line"><span class="keyword">return</span> updateRows;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 释放资源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> connection</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pstm</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> rs</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">closeResource</span><span class="params">(Connection connection,PreparedStatement pstm,ResultSet rs)</span></span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span>(rs != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">rs.close();</span><br><span class="line">rs = <span class="keyword">null</span>;<span class="comment">//GC回收</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(pstm != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">pstm.close();</span><br><span class="line">pstm = <span class="keyword">null</span>;<span class="comment">//GC回收</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(connection != <span class="keyword">null</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">connection.close();</span><br><span class="line">connection = <span class="keyword">null</span>;<span class="comment">//GC回收</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">flag = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>导入静态资源,导入到webapp下面</p></li></ol><h1 id="2-登录功能实现"><a href="#2-登录功能实现" class="headerlink" title="2.登录功能实现"></a>2.登录功能实现</h1><ol><li><p>编写前端页面</p></li><li><p>设置首页</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li></li></ol>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.web.xml的头部信息</title>
      <link href="/2022/02/03/2-web-xml%E7%9A%84%E5%A4%B4%E9%83%A8%E4%BF%A1%E6%81%AF/"/>
      <url>/2022/02/03/2-web-xml%E7%9A%84%E5%A4%B4%E9%83%A8%E4%BF%A1%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="web-xml"><a href="#web-xml" class="headerlink" title="web.xml"></a>web.xml</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> javaweb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.需要的maven仓库包</title>
      <link href="/2022/02/03/1-%E9%9C%80%E8%A6%81%E7%9A%84maven%E4%BB%93%E5%BA%93%E5%8C%85/"/>
      <url>/2022/02/03/1-%E9%9C%80%E8%A6%81%E7%9A%84maven%E4%BB%93%E5%BA%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp.jstl/jstl-api --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> javaweb环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>helloservlet</title>
      <link href="/2022/02/03/helloservlet/"/>
      <url>/2022/02/03/helloservlet/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Servlet"><a href="#1-Servlet" class="headerlink" title="1.Servlet"></a>1.Servlet</h1><h2 id="1-1-servlet简介"><a href="#1-1-servlet简介" class="headerlink" title="1.1 servlet简介"></a>1.1 servlet简介</h2><ul><li><p>Servlet就是sun公司开发动态web的技术</p></li><li><p>sun公司在这些API中提供了一个接口叫做:servlet,如果你想开发一个servlet程序,只需要完成两个小步骤:</p></li></ul><ol><li>编写一个类实现servlet接口</li><li>把开好的类部署到web服务器中</li></ol><p><strong>把实现了servlet接口的Java程序叫servlet</strong></p><h2 id="1-2-HelloServlet"><a href="#1-2-HelloServlet" class="headerlink" title="1.2 HelloServlet"></a>1.2 HelloServlet</h2><p>servlet接口sun公司有两个默认的实现类:httpservlet</p><ol><li>构建一个普通Maven项目</li><li>删除src文件夹</li><li>以后我们的学习就在这个项目里面建立moudel;这个空的工程就是maven的主工程</li></ol><p><a href="https://mvnrepository.com/">maven仓库</a></p><blockquote><p>关于maven父子工程的理解</p></blockquote><p>父项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>javaweb-01-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子项目中会有</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.qin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父项目中的Java子项目jar包可以直接使用</p><p>在main下面新建java和资源文件夹</p><p>Maven环境优化</p><p>1.修改web.xml为最新的</p><p>2.将maven的结构搭建完整</p><p>编写一个servlet程序</p><p>编写一个普通类</p><p>实现servlet接口,这里我们注解继承httpservlet</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-03_17-44-46.png" alt="Snipaste_2022-02-03_17-44-46"></p>]]></content>
      
      
      <categories>
          
          <category> spring5 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring5 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>聊聊Java这条路(狂神说)</title>
      <link href="/2022/02/03/%E8%81%8A%E8%81%8AJava%E8%BF%99%E6%9D%A1%E8%B7%AF-%E7%8B%82%E7%A5%9E%E8%AF%B4/"/>
      <url>/2022/02/03/%E8%81%8A%E8%81%8AJava%E8%BF%99%E6%9D%A1%E8%B7%AF-%E7%8B%82%E7%A5%9E%E8%AF%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="聊聊Java这条路"><a href="#聊聊Java这条路" class="headerlink" title="聊聊Java这条路"></a>聊聊Java这条路</h1><p><img src="https://raw.githubusercontent.com/liqincoding/img/master/1.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java SE</title>
      <link href="/2022/02/02/15-Java%20SE/"/>
      <url>/2022/02/02/15-Java%20SE/</url>
      
        <content type="html"><![CDATA[<h1 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1. 运算符"></a>1. 运算符</h1><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_12-10-21.png" alt="Snipaste_2022-01-29_12-10-21"></p><p><em>ctrl+d:复制当前行到下一行</em></p><p><img src="C:/Users/secqin/Desktop/Snipaste_2022-01-29_14-42-28.png" alt="Snipaste_2022-01-29_14-42-28"></p><p>cast:转换</p><p><strong>自动升为混合运算的最高优先级</strong></p><h2 id="1-1-自增自减运算符-一元运算符"><a href="#1-1-自增自减运算符-一元运算符" class="headerlink" title="1.1 自增自减运算符(一元运算符)"></a>1.1 自增自减运算符(一元运算符)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;</span><br><span class="line"><span class="keyword">int</span> c == ++a</span><br></pre></td></tr></table></figure><blockquote><p>5</p><p>3</p><p>5</p></blockquote><h3 id="1-2-幂运算"><a href="#1-2-幂运算" class="headerlink" title="1.2 幂运算"></a>1.2 幂运算</h3><p>2^3:java不能这样写</p><p>很多运算需要工具类来操作</p><p>math类厉害的一批</p><p>Math.pow(2,3);这是java的正确表述</p><h3 id="1-3-逻辑运算符"><a href="#1-3-逻辑运算符" class="headerlink" title="1.3 逻辑运算符"></a>1.3 逻辑运算符</h3><p>&amp;&amp;                             ||                              !</p><p>短路运算&amp;&amp;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> c = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">boolean</span> d = (c&lt;<span class="number">4</span>)&amp;&amp;(c++&lt;<span class="number">4</span>);</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure><blockquote><p>false</p><p>5</p></blockquote><h3 id="1-4-位运算"><a href="#1-4-位运算" class="headerlink" title="1.4 位运算"></a>1.4 位运算</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">A = <span class="number">00111100</span>;</span><br><span class="line">B = <span class="number">00001101</span>;</span><br><span class="line">A&amp;B</span><br><span class="line">A|B</span><br><span class="line">A^B <span class="comment">// 异或,相同为0,不同为1</span></span><br><span class="line">~B</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="number">2</span>&lt;&lt;<span class="number">3</span>);<span class="comment">//16</span></span><br></pre></td></tr></table></figure><p>&lt;&lt; (左移)*2;    &gt;&gt;(右移)/2;</p><h3 id="1-5-条件运算符"><a href="#1-5-条件运算符" class="headerlink" title="1.5 条件运算符"></a>1.5 条件运算符</h3><p><strong>x?y:z</strong></p><p>如果x==true则结果为y,否者结果为z</p><h3 id="1-6-字符串连接符"><a href="#1-6-字符串连接符" class="headerlink" title="1.6 字符串连接符"></a>1.6 字符串连接符</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;&quot;</span>+a+b);</span><br><span class="line">System.out.println(a+b+<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>1020</p><p>30</p></blockquote><h3 id="1-7-运算符优先级"><a href="#1-7-运算符优先级" class="headerlink" title="1.7 运算符优先级"></a>1.7 运算符优先级</h3><p>不用刻意记忆,多用一些括号</p><h1 id="2-常量-变量-作用域"><a href="#2-常量-变量-作用域" class="headerlink" title="2. 常量,变量,作用域"></a>2. 常量,变量,作用域</h1><h2 id="2-1-变量"><a href="#2-1-变量" class="headerlink" title="2.1 变量"></a>2.1 变量</h2><p>变量是什么:可以变化的量</p><p>java是一种强类型语言,每个变量都必须声明其类型(基本+引用)</p><p>Java变是程序中最基本的存储单元,其要素包括变量名,变量类型和<strong>作用域</strong></p><p>注意:</p><p>1.变量名必须是合法标识符</p><p>2.;结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//int a,b,c;</span></span><br><span class="line"><span class="comment">//int a=1,b=2,c=3;可以一行,但不提倡,可读性</span></span><br><span class="line">String name = <span class="string">&quot;qingjiang&quot;</span>;</span><br></pre></td></tr></table></figure><p><strong>变量作用域</strong></p><p>类变量</p><p>实例变量</p><p>局部变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性:变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    类变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">double</span> salary = <span class="number">100000</span>;</span><br><span class="line">    <span class="comment">//实例变量:从属于对象;如果不自行初始化,就是这个类型的默认值0 0.0</span></span><br><span class="line">    <span class="comment">//布尔值:默认是false</span></span><br><span class="line">    <span class="comment">//除了基本类型,其余默认值都是null</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//main方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="comment">//局部变量:必须声明和初始化值</span></span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">10</span>;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">        <span class="comment">//变量类型  变量名字</span></span><br><span class="line">        test01 test01 = <span class="keyword">new</span> test01();</span><br><span class="line">        System.out.println(test01.age);</span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//其他方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(salary);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-2-常量"><a href="#2-2-常量" class="headerlink" title="2.2 常量"></a>2.2 常量</h2><p>初始化后不能改变值 final</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">double</span> PI =<span class="number">3.14</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">double</span> PI2 = <span class="number">3.15</span>;</span><br><span class="line">    <span class="comment">//修饰符,不存在先后顺序</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-3变量的命名规范"><a href="#2-3变量的命名规范" class="headerlink" title="2.3变量的命名规范"></a>2.3变量的命名规范</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_11-53-25.png" alt="Snipaste_2022-01-29_11-53-25"></p><h1 id="3-包机制"><a href="#3-包机制" class="headerlink" title="3.包机制"></a>3.包机制</h1><p>包的本质是文件夹</p><p>package开头</p><p>import:导入一个包</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_15-14-59.png" alt="Snipaste_2022-01-29_15-14-59"></p><h1 id="4-用户交互scanner"><a href="#4-用户交互scanner" class="headerlink" title="4.用户交互scanner"></a>4.用户交互scanner</h1><h2 id="4-1-Scanner对象"><a href="#4-1-Scanner对象" class="headerlink" title="4.1 Scanner对象"></a>4.1 Scanner对象</h2><p>java.util.Scanner:获得用户的输入</p><p>Scanner s = new Scanner(System.in);</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_15-23-47.png" alt="Snipaste_2022-01-30_15-23-47"></p><h2 id="4-2-代码"><a href="#4-2-代码" class="headerlink" title="4.2 代码"></a>4.2 代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用next方式接收:&quot;</span>);</span><br><span class="line"><span class="comment">//        判断用户有没有输入字符串</span></span><br><span class="line">        <span class="keyword">if</span>(scanner.hasNext()==<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//使用next方式接收用户输入</span></span><br><span class="line">            String str = scanner.next();</span><br><span class="line">            System.out.println(<span class="string">&quot;输出的内容为:&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-3-next和nextLine的区别"><a href="#4-3-next和nextLine的区别" class="headerlink" title="4.3 next和nextLine的区别"></a>4.3 next和nextLine的区别</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_15-31-26.png" alt="Snipaste_2022-01-30_15-31-26"></p><h2 id="4-4-判断输入是否是整数-小数"><a href="#4-4-判断输入是否是整数-小数" class="headerlink" title="4.4 判断输入是否是整数(小数)"></a>4.4 判断输入是否是整数(小数)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入整数:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(scanner.hasNextInt())&#123;</span><br><span class="line">    i = scanner.nextInt();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;输入的不是整数数据&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">float</span> f = <span class="number">0.0f</span>;</span><br><span class="line">System.out.println(<span class="string">&quot;请输入小数:&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(scanner.hasNextFloat())&#123;</span><br><span class="line">    f = scanner.nextFloat();</span><br><span class="line">    System.out.println(f);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;输入的不是小数数据&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-选择结构"><a href="#5-选择结构" class="headerlink" title="5. 选择结构"></a>5. 选择结构</h1><h2 id="5-1-if"><a href="#5-1-if" class="headerlink" title="5.1 if"></a>5.1 if</h2><p>if{}else if{}else if{}else{}</p><h2 id="5-2-switch"><a href="#5-2-switch" class="headerlink" title="5.2 switch"></a>5.2 switch</h2><h3 id="5-2-1case穿透"><a href="#5-2-1case穿透" class="headerlink" title="5.2.1case穿透"></a>5.2.1case穿透</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (grade)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;优秀&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>; <span class="comment">//可选</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;良好&quot;</span>);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;挂科&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="5-2-2-switch注意点"><a href="#5-2-2-switch注意点" class="headerlink" title="5.2.2 switch注意点"></a>5.2.2 switch注意点</h3><p><code>break;</code>全部加上</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_16-11-51.png" alt="Snipaste_2022-01-30_16-11-51"></p><p>字符的本质还是数字</p><p>java—-class(字节码文件) —反编译(IDEA)<img src="C:/Users/secqin/Desktop/Snipaste_2022-01-30_16-16-38.png" alt="Snipaste_2022-01-30_16-16-38"></p><h2 id="5-3-怎么看反编译文件"><a href="#5-3-怎么看反编译文件" class="headerlink" title="5.3 怎么看反编译文件?"></a>5.3 怎么看反编译文件?</h2><p>IDEA里面打开项目结构</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_16-19-19.png" alt="Snipaste_2022-01-30_16-19-19"></p><p>反编译文件和自己写的代码对比</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_16-20-48.png" alt="Snipaste_2022-01-30_16-20-48"></p><h1 id="6-java数据类型讲解"><a href="#6-java数据类型讲解" class="headerlink" title="6. java数据类型讲解"></a>6. java数据类型讲解</h1><h2 id="6-1-数据类型"><a href="#6-1-数据类型" class="headerlink" title="6.1 数据类型"></a>6.1 数据类型</h2><p><strong>强类型语言</strong></p><p>要求变量使用要严格符合规定,所有变量必须先定义后才能使用</p><p><strong>弱类型语言</strong></p><p><strong>Java数据类型分为两大类</strong></p><p>基本类型</p><p>引用类型</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_09-44-15.png" alt="Snipaste_2022-01-29_09-44-15"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> num1 = <span class="number">30L</span>;</span><br><span class="line"><span class="keyword">float</span> num3 = <span class="number">3.14F</span></span><br></pre></td></tr></table></figure><p>String不是关键字,是类</p><p>String在idea里面不会报蓝,关键字在idea里面会报蓝</p><p>Integer:int对应的类</p><p>Byte:byte对应的类</p><p>什么是字节?</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_09-54-04.png" alt="Snipaste_2022-01-29_09-54-04"></p><h2 id="6-2-数据类型拓展"><a href="#6-2-数据类型拓展" class="headerlink" title="6.2 数据类型拓展"></a>6.2 数据类型拓展</h2><h3 id="6-2-1-整数拓展"><a href="#6-2-1-整数拓展" class="headerlink" title="6.2.1 整数拓展"></a>6.2.1 整数拓展</h3><p>表示:二进制0b     十进制    八进制0         十六进制0x</p><p>int i = 10;</p><p>int i2 = 010; //八进制0</p><p>int i3 = 0x10; //十六进制0x 0<del>9 A</del>F</p><p>sout打印的都是十进制</p><h3 id="6-2-2-浮点数拓展"><a href="#6-2-2-浮点数拓展" class="headerlink" title="6.2.2 浮点数拓展"></a>6.2.2 浮点数拓展</h3><p>float:</p><p>double:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        <span class="keyword">float</span> f = <span class="number">0.1f</span>;  <span class="comment">//0.1</span></span><br><span class="line">        <span class="keyword">double</span> d = <span class="number">1.0</span>/<span class="number">10</span>;  <span class="comment">//0.1</span></span><br><span class="line">        System.out.println(f == d);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出:false</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">12412414143242342234234f</span>;</span><br><span class="line"><span class="keyword">double</span> d = f+<span class="number">1</span>;  </span><br><span class="line">System.out.println(f == d);</span><br></pre></td></tr></table></figure><p>输出:true</p><p>浮点数:float 有限   离散   舍入误差     大约     接近但不等于</p><p>double</p><p>最好完全使用浮点数进行比较</p><p>银行业务:</p><p>BigDecimal</p><h3 id="6-2-3-字符拓展"><a href="#6-2-3-字符拓展" class="headerlink" title="6.2.3 字符拓展"></a>6.2.3 字符拓展</h3><p>char c1 = ‘a’;</p><p>char c2 = ‘中’</p><p>//所有的字符本质还是数字</p><p>//编码     Unicode     2字节    0-65535    Excel    2^16 = 65536</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> c3 = <span class="string">&#x27;\u0061&#x27;</span>;</span><br><span class="line">System.out.println(c3);</span><br></pre></td></tr></table></figure><h3 id="6-2-4-转义字符"><a href="#6-2-4-转义字符" class="headerlink" title="6.2.4 转义字符"></a>6.2.4 转义字符</h3><p>\t:制表符</p><p>\n:换行</p><h3 id="6-2-5-问题"><a href="#6-2-5-问题" class="headerlink" title="6.2.5 问题"></a>6.2.5 问题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String sa = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">String sb = <span class="keyword">new</span> String(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">System.out.println(sa == sb);</span><br><span class="line">String sc = <span class="string">&quot;he&quot;</span>;</span><br><span class="line">String sd = <span class="string">&quot;he&quot;</span>;</span><br><span class="line">System.out.println(sc==sd);</span><br></pre></td></tr></table></figure><p>Less is more!代码要精简易读!</p><h2 id="6-3-类型转换"><a href="#6-3-类型转换" class="headerlink" title="6.3 类型转换"></a>6.3 类型转换</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_10-43-48.png" alt="Snipaste_2022-01-29_10-43-48"></p><p>double优先级最高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">128</span>;</span><br><span class="line"><span class="keyword">byte</span> b = (<span class="keyword">byte</span>)i;</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>输出(内存溢出):</p><p>-128</p><p>128</p><p>//强制转换:(类型)变量名</p><p>高-&gt;低:强制类型转换</p><p>低-&gt;高:自动类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> i =<span class="number">128</span>;</span><br><span class="line"><span class="keyword">double</span> b =i;</span><br><span class="line">System.out.println(b);</span><br><span class="line">System.out.println(i);</span><br></pre></td></tr></table></figure><p>注意点:</p><p>不能对布尔值进行转换</p><p>不能把对象类型转换为不相干的类型</p><p>在把高容量转到低容量的时候,强制转换</p><p>转换的时候可能存在内存溢出,或者精度问题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(((<span class="keyword">int</span>)<span class="number">23.7</span>));</span><br><span class="line">System.out.println((<span class="keyword">int</span>)-<span class="number">45.89f</span>);</span><br><span class="line"><span class="keyword">char</span> c = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">int</span> d = c+<span class="number">1</span>;</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println((<span class="keyword">char</span>)d);</span><br></pre></td></tr></table></figure><p>jdk7的新特性,数字之间可以用下划线分割</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> money=<span class="number">10_0000_0000</span>;</span><br><span class="line"><span class="keyword">int</span> year = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> total = money*year;</span><br><span class="line">System.out.println(total);  <span class="comment">//-1474836480</span></span><br><span class="line"><span class="keyword">long</span> total2 = money*year; <span class="comment">//默认是int,转换的时候已经出问题了</span></span><br><span class="line"><span class="keyword">long</span> total3 = money*((<span class="keyword">long</span>)year); <span class="comment">//先把一个数字转换为long</span></span><br><span class="line">System.out.println(total3);</span><br><span class="line"><span class="comment">//L,l小写可能看为1</span></span><br></pre></td></tr></table></figure><h1 id="7-数组"><a href="#7-数组" class="headerlink" title="7. 数组"></a>7. 数组</h1><h2 id="7-1-一维数组"><a href="#7-1-一维数组" class="headerlink" title="7.1 一维数组"></a>7.1 一维数组</h2><h3 id="7-1-1-数组定义"><a href="#7-1-1-数组定义" class="headerlink" title="7.1.1 数组定义"></a>7.1.1 数组定义</h3><p>int[] nums;</p><p>int nums[];</p><p>nums = new int[10];//这里面可以存放十个int类型的数字</p><h3 id="7-1-2-开辟一个空间"><a href="#7-1-2-开辟一个空间" class="headerlink" title="7.1.2 开辟一个空间"></a>7.1.2 开辟一个空间</h3><p>nums = new int[10];</p><h3 id="7-1-3-给数组元素赋值"><a href="#7-1-3-给数组元素赋值" class="headerlink" title="7.1.3 给数组元素赋值"></a>7.1.3 给数组元素赋值</h3><p>没有赋值默认值是0</p><h3 id="7-1-4-通过下标去取"><a href="#7-1-4-通过下标去取" class="headerlink" title="7.1.4 通过下标去取"></a>7.1.4 通过下标去取</h3><p>num[0]</p><h3 id="7-1-5-计算所有元素的和"><a href="#7-1-5-计算所有元素的和" class="headerlink" title="7.1.5 计算所有元素的和"></a>7.1.5 计算所有元素的和</h3><p>arrays.Length //计算数组长度</p><p>数组的四个基本特点</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-20-53.png" alt="Snipaste_2022-01-30_17-20-53"></p><h2 id="7-2-内存"><a href="#7-2-内存" class="headerlink" title="7.2 内存"></a>7.2 内存</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-21-58.png" alt="Snipaste_2022-01-30_17-21-58"></p><p>声明数组</p><p>int[] array = null;</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-25-19.png" alt="Snipaste_2022-01-30_17-25-19"></p><p>创建数组</p><p>array = new int[10]; //默认初始化</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-35-01.png" alt="Snipaste_2022-01-30_17-35-01"></p><p>3.给数组元素中赋值</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-27-39.png" alt="Snipaste_2022-01-30_17-27-39"></p><h2 id="7-3-数组越界"><a href="#7-3-数组越界" class="headerlink" title="7.3 数组越界"></a>7.3 数组越界</h2><blockquote><p>java.lang.ArrayIndexOutOfBoundsException</p></blockquote><h2 id="7-4-数组三种初始化方式"><a href="#7-4-数组三种初始化方式" class="headerlink" title="7.4 数组三种初始化方式"></a>7.4 数组三种初始化方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//静态初始化:创建+赋值</span></span><br><span class="line">        <span class="keyword">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">        <span class="comment">//动态初始化:包含默认初始化</span></span><br><span class="line">        <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">        b[<span class="number">0</span>] = <span class="number">19</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-33-15.png" alt="Snipaste_2022-01-30_17-33-15"></p><p>没有被初始化的空间默认值都是0;</p><h2 id="7-5-下标越界"><a href="#7-5-下标越界" class="headerlink" title="7.5 下标越界"></a>7.5 下标越界</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-38-37.png" alt="Snipaste_2022-01-30_17-38-37"></p><h2 id="7-6-数组的使用"><a href="#7-6-数组的使用" class="headerlink" title="7.6 数组的使用"></a>7.6 数组的使用</h2><h3 id="7-6-1-for循环"><a href="#7-6-1-for循环" class="headerlink" title="7.6.1 for循环"></a>7.6.1 for循环</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印全部的数组元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">    System.out.println(a[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-2-增强型for循环-for-each循环"><a href="#7-6-2-增强型for循环-for-each循环" class="headerlink" title="7.6.2 增强型for循环(for-each循环)"></a>7.6.2 增强型for循环(for-each循环)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//增强型for循环,没有下标</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : a) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-7-多维数组"><a href="#7-7-多维数组" class="headerlink" title="7.7 多维数组"></a>7.7 多维数组</h2><h2 id="7-8-Arrays类"><a href="#7-8-Arrays类" class="headerlink" title="7.8 Arrays类"></a>7.8 Arrays类</h2><h2 id="7-9-稀疏数组"><a href="#7-9-稀疏数组" class="headerlink" title="7.9 稀疏数组"></a>7.9 稀疏数组</h2><h1 id="8-方法"><a href="#8-方法" class="headerlink" title="8. 方法"></a>8. 方法</h1><h2 id="8-1-方法的组成"><a href="#8-1-方法的组成" class="headerlink" title="8.1 方法的组成"></a>8.1 方法的组成</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_16-38-23.png" alt="Snipaste_2022-01-30_16-38-23"></p><p>return 可以终止方法</p><h2 id="8-2-命令行传参"><a href="#8-2-命令行传参" class="headerlink" title="8.2 命令行传参"></a>8.2 命令行传参</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;args[&quot;</span>+i+<span class="string">&quot;]:&quot;</span>+args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_16-57-47.png" alt="Snipaste_2022-01-30_16-57-47"></p><h2 id="8-3-可变参数"><a href="#8-3-可变参数" class="headerlink" title="8.3 可变参数"></a>8.3 可变参数</h2><p>不定项参数</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_17-00-17.png" alt="Snipaste_2022-01-30_17-00-17"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        test01 t1 = <span class="keyword">new</span> test01();</span><br><span class="line">        t1.test(<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">23</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span>... i)</span></span>&#123;</span><br><span class="line">        System.out.println(i[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="9-什么是面向对象编程"><a href="#9-什么是面向对象编程" class="headerlink" title="9.什么是面向对象编程"></a>9.什么是面向对象编程</h1><h2 id="9-1-OOP-面向对象编程"><a href="#9-1-OOP-面向对象编程" class="headerlink" title="9.1 OOP(面向对象编程)"></a>9.1 OOP(面向对象编程)</h2><p>一个项目应该只存在一个main方法</p><p>以类的方式组织代码</p><p>以对象的方式封装数据</p><h2 id="9-2-构造器"><a href="#9-2-构造器" class="headerlink" title="9.2 构造器"></a>9.2 构造器</h2><p>也叫构造方法</p><blockquote><p>test1.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Man man = <span class="keyword">new</span> Man();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Man.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看一下反编译的文件(out里面的.class文件)</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-02_16-52-24.png" alt="Snipaste_2022-02-02_16-52-24"></p><p>一个类即使什么都不写,它也会存在一个方法,构造方法</p><p>显示的定义构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.使用new关键字,本质是在调用构造器</p><p>干掉无参:定义有参构造器</p><p><strong>一旦定义了有参构造,无参就必须显示定义</strong></p><p><em>alt+insert可以快速无参和有参构造</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Man</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点:</p><p>构造器:1.和类名相同</p><p>2.没有返回值</p><p>作用:</p><p>new的本质是调用构造方法</p><p>2.初始化对象的值</p><p>3.定了有参后,一定要显示调用无参</p><h2 id="9-3-内存分析"><a href="#9-3-内存分析" class="headerlink" title="9.3 内存分析"></a>9.3 内存分析</h2><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-02_19-09-57.png" alt="Snipaste_2022-02-02_19-09-57"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-02_19-10-48.png" alt="Snipaste_2022-02-02_19-10-48"></p><p>对象是通过引用来操作的:栈-&gt;堆</p><p>类:</p><p>静态的属性   属性</p><p>动态的行为   方法</p><h1 id="10-封装"><a href="#10-封装" class="headerlink" title="10. 封装"></a>10. 封装</h1><p><strong>高内聚,低耦合</strong></p><p>该漏的漏,该藏的藏</p><p>属性私有</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-02-02_19-23-23.png" alt="Snipaste_2022-02-02_19-23-23"></p><p>要提供一些操作这个数据的方法</p><p>属性私有,get/set</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">private</span> String name;    </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = name;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><em>alt+insert</em></p><p>提高程序的安全性,保护数据</p><p>隐藏代码的实现细节</p><p>统一接口</p><p>系统可维护性增加了</p><h1 id="11-继承"><a href="#11-继承" class="headerlink" title="11. 继承"></a>11. 继承</h1><p>JAVA中类只有单继承,没有多继承</p><p>但可以简介继承多个(爷爷辈)</p><p>子类(派生类)和父类(基类)</p><p>extends</p><p>继承和组合</p><blockquote><p>public class Student extends Man</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    Man man = <span class="keyword">new</span> Man();</span><br></pre></td></tr></table></figure><p>子类可以继承父类的所有方法</p><p>四个修饰符:</p><p>public</p><p>protected</p><p>default</p><p>private</p><p><em>ctrl+h</em>:打开类树</p><p>在Java中所有的类都默认直接或者间接继承Object类</p><p>一个儿子只能有一个爸爸,一个爸爸可以有多个儿子</p><h1 id="12-Super"><a href="#12-Super" class="headerlink" title="12. Super"></a>12. Super</h1><p>调父类的方法或者属性</p><p>私有的东西无法被继承</p><p><strong>隐藏代码,先调父类的无参构造,而且父类的构造器必须在第一行,如果不是第一行就会报错</strong></p><p><strong>父类和子类的构造函数有点意思,重点和难点</strong></p><p>注意点:</p><p>1.super调用父类的构造方法,必须在构造方法的第一个</p><p>2.super必须只能出现在子类的方法或者构造方法中</p><p>3.super和this不能同时调用构造方法</p><p>this:</p><p>代表的对象不同</p><p>this:本身调用者这个对象</p><p>super:代表父类对象的应用</p><p>前提</p><p>this:没有继承也可以使用</p><p>super:只能在继承条件下可以使用</p><p>构造方法</p><p>this();本类的构造</p><p>super():父类的构造</p><h1 id="13-方法的重写"><a href="#13-方法的重写" class="headerlink" title="13. 方法的重写"></a>13. 方法的重写</h1><p><strong>重写都是方法的重写,和属性无关</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> A();</span><br><span class="line">a.test();</span><br><span class="line">B b = <span class="keyword">new</span> A();</span><br><span class="line">b.test();</span><br></pre></td></tr></table></figure><p>@Override 重写</p><p>静态方法和非静态方法区别很大</p><p>重写与静态方法无关,只和非静态有关</p><p>重写只能public,并且不能是静态方法,和重载不一样</p><p><strong>总结</strong></p><p>重写:</p><ul><li>需要有继承关系</li><li>子类重写父类方法</li><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符:范围可以扩大,但是不能缩小     public-&gt;protected-&gt;default-&gt;private</li><li>抛出的异常:范围可以被缩小,但不能扩大</li><li>重写,子类的方法和父类必须要一致:方法体不同!</li></ul><p>为什么需要重写?</p><ol><li><p>父类的功能子类不一定需要,或者不一定满足!</p><p>快捷键:<em>Alt + Insert        :     override</em></p></li></ol><h1 id="14-多态"><a href="#14-多态" class="headerlink" title="14. 多态"></a>14. 多态</h1><p>动态编译类型:可扩展性更强</p><blockquote><p>Student.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;liyixin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;est&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Person.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;liqin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>test.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//        一个对象的实际类型是确定的</span></span><br><span class="line"><span class="comment">//        可以指向的引用类型就不确定了</span></span><br><span class="line"><span class="comment">//        可以指向的引用类型就不确定了:父类的引用指向子类</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();</span><br><span class="line">        Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line">        s2.run(); <span class="comment">//子类重写了父类的方法,执行子类的方法</span></span><br><span class="line"><span class="comment">//        对象能执行哪些方法,主要看对象左边的类型,和右边关系不大</span></span><br><span class="line"><span class="comment">//        Student 能调用的方法都是自己的或者继承父类的,</span></span><br><span class="line"><span class="comment">//        person 父类型,可以调用子类,但是不能调用子类独有的方法</span></span><br><span class="line">        s1.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">((Student) s2).eat();</span><br></pre></td></tr></table></figure><p>如果强转可以用</p><p>多态注意事项:</p><ol><li>多态的方法的多态,属性无多态</li><li>父类和子类必须有联系,否则类型转换异常(String)ClassCastException</li><li>存在条件:继承关系,方法需要重写,父类的引用,指向子类对象! <strong>父亲 f1 = new 儿子()</strong></li></ol><p>三种方法不能重写</p><ol><li>static方法属于类,不属于任何一个实例</li><li>final 常量池</li><li>private 私有方法</li></ol><h1 id="15-instanceof和类型转换"><a href="#15-instanceof和类型转换" class="headerlink" title="15. instanceof和类型转换"></a>15. instanceof和类型转换</h1><p>判断一个对象是什么类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object object = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line"><span class="comment">//        Object &gt; String</span></span><br><span class="line"><span class="comment">//        Object &gt; Person &gt; Teacher</span></span><br><span class="line"><span class="comment">//        Object &gt; Person &gt; Student</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Student); <span class="comment">//T</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Person); <span class="comment">//T</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Teacher);<span class="comment">//F</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> Object);<span class="comment">//T</span></span><br><span class="line">        System.out.println(object <span class="keyword">instanceof</span> String);<span class="comment">//F</span></span><br><span class="line"></span><br><span class="line">        Person person = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Student); <span class="comment">//t</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Person); <span class="comment">//t</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Teacher);<span class="comment">//F</span></span><br><span class="line">        System.out.println(person <span class="keyword">instanceof</span> Object);<span class="comment">//T</span></span><br><span class="line"><span class="comment">//        System.out.println(person instanceof String);//F 编译就报错</span></span><br><span class="line"></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Student); <span class="comment">//t</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Person); <span class="comment">//t</span></span><br><span class="line"><span class="comment">//        System.out.println(student instanceof Teacher); // 编译就报错</span></span><br><span class="line">        System.out.println(student <span class="keyword">instanceof</span> Object);<span class="comment">//T</span></span><br><span class="line"><span class="comment">//        System.out.println(person instanceof String);//F 编译就报错</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>X instanceof Y</strong>:X与Y见是否存在父子关系,决定是否编译可以通过 和接口对比理解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//类型之间的转换,基本类型的转换 高低 父类与子类,父类代表高</span></span><br><span class="line"><span class="comment">//        高            低</span></span><br><span class="line">        Person obj = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//将这个对转换为student类型,我们就可以使用student类型的方法了</span></span><br><span class="line">        ((Student) obj).go();</span><br><span class="line">        Student student = (Student) obj;</span><br><span class="line">        student.go();</span><br><span class="line"><span class="comment">//        子类转父类可能丢失自己的一些方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结:</p><ol><li>父类引用指向子类的对象</li><li>把子类转换为父类,向上转型,不用强制转换</li><li>把父类转换为子类,向下转型:强制转换</li><li>方便方法的调用,减少重复的代码!科有效提升代码利用率</li></ol><p>封装,继承,多态! 抽象类,接口</p><h1 id="16-static"><a href="#16-static" class="headerlink" title="16.static"></a>16.static</h1><p>第一段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//static</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age; <span class="comment">//静态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        go();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        System.out.println(Student.age);</span><br><span class="line">        System.out.println(student.age);</span><br><span class="line">        go();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二段代码:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//代码块(匿名代码块)</span></span><br><span class="line">        <span class="comment">//赋初始值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//静态代码块</span></span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        Person person1 = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态导入包</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br></pre></td></tr></table></figure><p>被final定义,直接断子绝孙,不能被继承</p><h1 id="17-抽象类"><a href="#17-抽象类" class="headerlink" title="17.抽象类"></a>17.抽象类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//    约束,有人帮我们实现</span></span><br><span class="line"><span class="comment">//    抽象方法,只有方法名字,没有方法的实现</span></span><br><span class="line">    <span class="comment">//抽象类,extents:单继承,无多继承,接口可以多继承,插座</span></span><br><span class="line"><span class="comment">//    不能new这个抽象类,只能靠子类去实现他,约束</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//    一旦有抽象方法,就必须是抽象类</span></span><br><span class="line"><span class="comment">//    抽象类可以写普通方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    思考题? new存在构造器么?</span></span><br><span class="line"><span class="comment">//    存在的意义  抽象出来  提高开发效率</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>思考</p></blockquote><p>new抽象类存在构造器么?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类的所有方法,继承了他的子类,都必须要实现他的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="18-接口-OO"><a href="#18-接口-OO" class="headerlink" title="18.接口(OO)"></a>18.接口(OO)</h1><p>接口,只有规范!自己无法写方法,专业的约束,约束和实现分离,面向接口的编程</p><p>接口的本质是契约,接口的精髓是对对象的抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"><span class="comment">//    抽象的思维锻炼~ Java,架构师</span></span><br><span class="line"><span class="comment">//    接口中所有的定义其实都是抽象的public</span></span><br><span class="line"><span class="comment">//    接口都需要有实现类</span></span><br><span class="line"><span class="comment">//    接口中定义的属性,都是常量public static final ~</span></span><br><span class="line">    <span class="keyword">int</span> AGE = <span class="number">99</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象类的所有方法,继承了他的子类,都必须要实现他的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonImpl</span> <span class="keyword">implements</span> <span class="title">Person</span>,<span class="title">Student</span></span>&#123; <span class="comment">//利用接口实现多继承,接口只有方法的定义,</span></span><br><span class="line"><span class="comment">//    实现了接口的类,就需要重写接口的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>作用:</strong></p><ol><li>约束</li><li>定义一些方法,让不同的人实现~</li><li>public abstract</li><li>public static final</li><li>接口不能被实例化,接口中没有构造方法</li><li>可以实现多个接口</li><li>必须要重写接口中的方法</li></ol><h1 id="19-内部类"><a href="#19-内部类" class="headerlink" title="19.内部类"></a>19.内部类</h1><ol><li>成员内部类</li><li>静态内部类’</li><li>局部内部类</li><li>匿名内部类’</li></ol><h1 id="20-异常"><a href="#20-异常" class="headerlink" title="20.异常"></a>20.异常</h1><h2 id="1-什么是异常"><a href="#1-什么是异常" class="headerlink" title="1.什么是异常"></a>1.什么是异常</h2>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>破解软件合集</title>
      <link href="/2022/01/30/%E7%A0%B4%E8%A7%A3%E8%BD%AF%E4%BB%B6%E5%90%88%E9%9B%86/"/>
      <url>/2022/01/30/%E7%A0%B4%E8%A7%A3%E8%BD%AF%E4%BB%B6%E5%90%88%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><h2 id="Navicat-15"><a href="#Navicat-15" class="headerlink" title="Navicat 15"></a>Navicat 15</h2><p>链接：<a href="https://pan.baidu.com/s/1wzoYWUvdzjACbhade_GYPA">https://pan.baidu.com/s/1wzoYWUvdzjACbhade_GYPA</a><br>提取码：1234 </p><h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p>链接：<a href="https://pan.baidu.com/s/1ditBXPwn7K_QaKpyeK8Akg">https://pan.baidu.com/s/1ditBXPwn7K_QaKpyeK8Akg</a><br>提取码：1234 </p><h2 id="xshell"><a href="#xshell" class="headerlink" title="xshell"></a>xshell</h2><p>链接：<a href="https://pan.baidu.com/s/13_hF4doPZdIYHHEj1TwCVA">https://pan.baidu.com/s/13_hF4doPZdIYHHEj1TwCVA</a><br>提取码：1234 </p><h2 id="xmind"><a href="#xmind" class="headerlink" title="xmind"></a>xmind</h2><p>链接：<a href="https://pan.baidu.com/s/1ZQgMMAq878HRXMtczw1c3g">https://pan.baidu.com/s/1ZQgMMAq878HRXMtczw1c3g</a><br>提取码：1234 </p><h2 id="IDEA-2021-03版本以下全破解"><a href="#IDEA-2021-03版本以下全破解" class="headerlink" title="IDEA(2021.03版本以下全破解)"></a>IDEA(2021.03版本以下全破解)</h2><p>链接：<a href="https://pan.baidu.com/s/1576LM-6vtiYFTICL2ZT4YQ">https://pan.baidu.com/s/1576LM-6vtiYFTICL2ZT4YQ</a><br>提取码：1234 </p>]]></content>
      
      
      <categories>
          
          <category> 破解软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos8.2上面安装java8</title>
      <link href="/2022/01/29/centos8-2%E4%B8%8A%E9%9D%A2%E5%AE%89%E8%A3%85java8/"/>
      <url>/2022/01/29/centos8-2%E4%B8%8A%E9%9D%A2%E5%AE%89%E8%A3%85java8/</url>
      
        <content type="html"><![CDATA[<h1 id="1-jdk8-linux链接"><a href="#1-jdk8-linux链接" class="headerlink" title="1.jdk8(linux链接)"></a>1.jdk8(linux链接)</h1><p>链接：<a href="https://pan.baidu.com/s/1qIogUyhH8vicHgBKwKw0Uw">https://pan.baidu.com/s/1qIogUyhH8vicHgBKwKw0Uw</a><br>提取码：1234 </p>]]></content>
      
      
      <categories>
          
          <category> linux开发环境配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux开发环境配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在华为云上面安装kali</title>
      <link href="/2022/01/29/%E5%9C%A8%E5%8D%8E%E4%B8%BA%E4%BA%91%E4%B8%8A%E9%9D%A2%E5%AE%89%E8%A3%85kali/"/>
      <url>/2022/01/29/%E5%9C%A8%E5%8D%8E%E4%B8%BA%E4%BA%91%E4%B8%8A%E9%9D%A2%E5%AE%89%E8%A3%85kali/</url>
      
        <content type="html"><![CDATA[<p>39元买了一台华为云耀云服务器1年,香的一批</p><p>第一步:检查自己的服务器在那个城市,哪个可用区</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-03-01.png" alt="Snipaste_2022-01-29_23-03-01"></p><p>然后去购买额外的磁盘(和自己的服务器在同一个城市,同一个可用区)</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-05-01.png" alt="Snipaste_2022-01-29_23-05-01"></p><p>然后来对应的服务器挂载磁盘</p><p><img src="C:/Users/secqin/Desktop/Snipaste_2022-01-29_23-06-46.png" alt="Snipaste_2022-01-29_23-06-46"></p><p>然后通过登录界面登录,然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://mirrors.163.com/kali-images/kali-2021.4a/kali-linux-2021.4a-installer-amd64.iso</span><br></pre></td></tr></table></figure><p>下载到当前目录</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-14-59.png" alt="Snipaste_2022-01-29_23-14-59"></p><p>这个速度还是很猛的,不能使用kali的官方源,官方源蜗速,用163的下载</p><p>挂载好我们添加的数据盘之后，首先执行一下<code>fdisk -l</code>看一下磁盘的情况：<img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-20-53.png" alt="Snipaste_2022-01-29_23-20-53"></p><p>突然发现我那个10GB的硬盘没有挂载上去,挂载一下硬盘<img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-27-12.png" alt="Snipaste_2022-01-29_23-27-12"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-28-07.png" alt="Snipaste_2022-01-29_23-28-07"></p><p>在这里我将把镜像写入<code>vdb</code>这块数据盘，请确保里面没有需要的数据了，所以更加建议创建一个临时的云硬盘来做这件事情。Linux 下写 ISO 是很简单的，用<code>dd</code>就可以了，非 root 的情况下别忘了<code>sudo</code>哦。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dd if=kali-linux-2021.4a-installer-amd64.iso of=/dev/vdb</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-32-16.png" alt="Snipaste_2022-01-29_23-32-16"></p><p>接下来我们需要把安装程序跑起来，途径也是多样的，我选择直接操作 GRUB 2 的命令行。不过，先调整一下超时时间来避免来不及操作。编辑<code>/etc/default/grub</code>这个文件，将<code>GRUB_TIMEOUT</code>调得足够长，例如 60 秒。然后运行<code>grub2-mkconfig -o /boot/grub2/grub.cfg</code>写入配置。</p><blockquote><p><strong>引导进入安装程序</strong></p></blockquote><p>这时可以<code>reboot</code>了，然后登录华为云的控制台，在对应的云主机处点击 “操作” 下的 “登录” 即可以进入网页 VNC。若之前配置无误，现在应该正处于 GRUB 菜单，看起来就像这样：<img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-35-39.png" alt="Snipaste_2022-01-29_23-35-39"></p><p>然后我们按<code>c</code>键进入命令行模式，来手动引导。现在的发行版基本都是使用 GRUB 2 了，如果还是 GRUB 的话要把下面的<code>set root=(hd1)</code>改成<code>root (hd1)</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grub&gt; set root=(hd1)</span><br><span class="line">grub&gt; chainloader +1</span><br><span class="line">grub&gt; boot</span><br></pre></td></tr></table></figure><p>进入安装目录</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-36-08.png" alt="Snipaste_2022-01-29_23-36-08"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-39-31.png" alt="Snipaste_2022-01-29_23-39-31"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-41-58.png" alt="Snipaste_2022-01-29_23-41-58"></p><p>到这一步 kali会检测安装安装光盘，这时候我们选择手动探测加载光盘，然后我们选 none</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-40-18.png" alt="Snipaste_2022-01-29_23-40-18"></p><p>注意这个地方是<code>/dev/vdb1</code></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-42-46.png" alt="Snipaste_2022-01-29_23-42-46"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-44-08.png" alt="Snipaste_2022-01-29_23-44-08"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-44-13.png" alt="Snipaste_2022-01-29_23-44-13"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-44-27.png" alt="Snipaste_2022-01-29_23-44-27"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-44-49.png" alt="Snipaste_2022-01-29_23-44-49"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-45-36.png" alt="Snipaste_2022-01-29_23-45-36"></p><p>然后回车后就可以接着安装，磁盘分区的位置我们选我们的系统盘。</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-46-04.png" alt="Snipaste_2022-01-29_23-46-04"></p><p>然后将所有文件放在同一个分区中</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-46-13.png" alt="Snipaste_2022-01-29_23-46-13"></p><p>最后结束分区设定并将修改写入磁盘</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-46-23.png" alt="Snipaste_2022-01-29_23-46-23"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-46-32.png" alt="Snipaste_2022-01-29_23-46-32"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-29_23-49-05.png" alt="Snipaste_2022-01-29_23-49-05"></p><p>下面这里安装grub启动器也是安装到第一个磁盘</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_00-00-16.png" alt="Snipaste_2022-01-30_00-00-16"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_00-00-48.png" alt="Snipaste_2022-01-30_00-00-48"></p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_00-01-51.png" alt="Snipaste_2022-01-30_00-01-51"></p><p>登录</p><p><img src="https://gitee.com/secqin/img/raw/master/img/Snipaste_2022-01-30_00-03-19.png" alt="Snipaste_2022-01-30_00-03-19"></p><blockquote><p>在腾讯云下面:提示光盘一直挂载报错。可以终止安装 进入kali安装界面的 shell 里面执行这个 mount /dev/vdb1 /cdrom  先挂载到cdrom 然后再去安装就好了</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> kali_linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kali_linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/01/29/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/01/29/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p><img src="C:/Users/secqin/Desktop/picture/Snipaste_2022-03-19_22-47-24.png" alt="Snipaste_2022-03-19_22-47-24"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">//创建链表</span></span><br><span class="line">  <span class="function">ListNode* <span class="title">creatlist</span><span class="params">(<span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">    ListNode * root = <span class="keyword">new</span> <span class="built_in">ListNode</span>(k);</span><br><span class="line">    <span class="keyword">return</span> root;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//层序遍历创建链表</span></span><br><span class="line">  <span class="function">vector&lt;ListNode*&gt; <span class="title">listOfDepth</span><span class="params">(TreeNode* tree)</span> </span>&#123;</span><br><span class="line">    std::vector&lt;ListNode* &gt; res;</span><br><span class="line">    ListNode * p =<span class="literal">NULL</span>; <span class="comment">//工作指针</span></span><br><span class="line">    ListNode * head =<span class="literal">NULL</span>; <span class="comment">//每一层链表头 </span></span><br><span class="line">    queue&lt;TreeNode*&gt; q;</span><br><span class="line">    <span class="keyword">int</span> i =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(!tree) <span class="keyword">return</span> res; <span class="comment">//如果为空树，那么返回空;</span></span><br><span class="line">    q.<span class="built_in">push</span>(tree); <span class="comment">//根节点入队</span></span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">      <span class="keyword">int</span> len = q.<span class="built_in">size</span>(); <span class="comment">//获取队列长度，即每一层元素个数</span></span><br><span class="line">      <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;len;i++)&#123;</span><br><span class="line">        tree = q.<span class="built_in">front</span>(); </span><br><span class="line">        q.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="keyword">if</span>(i==<span class="number">0</span>)&#123; <span class="comment">//每一层第一个</span></span><br><span class="line">          head = <span class="built_in">creatlist</span>(tree-&gt;val); <span class="comment">//创建链表头</span></span><br><span class="line">          p = head; <span class="comment">//工作指针</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">          p-&gt;next = <span class="built_in">creatlist</span>(tree-&gt;val);</span><br><span class="line">          p = p-&gt;next; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(tree-&gt;left) q.<span class="built_in">push</span>(tree-&gt;left);</span><br><span class="line">        <span class="keyword">if</span>(tree-&gt;right) q.<span class="built_in">push</span>(tree-&gt;right); </span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//每一层结束后，把每一层的head放进去</span></span><br><span class="line">      res.<span class="built_in">push_back</span>(head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>解题思路</p><p>执行结果：<br>通过<br>显示详情<br>执行用时：0 ms, 在所有 C++ 提交中击败了100.00% 的用户<br>内存消耗：7.8 MB, 在所有 C++ 提交中击败了96.09% 的用户</p><p>乍看题目：</p><p>一般来说，根据此题描述，树的每层弄到一个链表里，很直观就可以想到层序遍历的方式进行尝试。</p><p>虽然层序遍历可以一层一层的访问完整棵树，但是层序遍历依然有一些毛病。</p><p>即：在进出栈的过程中，没有办法准确把握到哪些元素是同一层的。传统的层序遍历每次拿1个节点，放2个节点，只要树没访问完，栈永远存在元素。</p><p>举个例子，如示例中的树假设访问到第三层，如果访问完节点7，那么在访问同一层的5,4之前会先尝试进行7的左右子树的压栈。</p><p>对于非完全二叉树来说，这样的遍历操作使得栈虽然可以一层一层的遍历整棵树，但对外来说模糊了各层间的界限。</p><p>思路：</p><p>经过上面的xjb分析，这个题目就可以转换为，如何在层序遍历中找到所有同层的元素。</p><p>问题的关键在于将出栈操作与入栈操作分离开，即栈内的元素要么都是同层元素，要么为空</p><p>由此引入一个辅助数组作为一个中间存储元素，保存处理过的同层元素，用于下一步的压栈。</p><p>步骤：</p><p>将tree的根节点压栈 -&gt;2<br>依次弹栈，同时将元素放入辅助数组，同时将这些弹出的元素链到同一个链表中。将链表压入返回的数组中-&gt;3<br>从辅助数组中从尾部依次弹出元素，将弹出元素的左右非空子节点压入栈中。 -&gt;4<br>如果栈中非空 -&gt;2，否则-&gt;5<br>返回完成的数组。</p><p>最后，虽然看似是嵌套循环，但是每个节点仅访问一次，虽然用了辅助数组，但是两个内部循环是串行而非嵌套。故时间复杂度仍为O(N)</p><p>看步骤应该比较清晰，具体的细节参考代码中的注释👇👇👇。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * struct TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode *left;</span></span><br><span class="line"><span class="comment"> *     TreeNode *right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * struct ListNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     ListNode *next;</span></span><br><span class="line"><span class="comment"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</span></span><br><span class="line"><span class="comment"> * &#125;;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;ListNode*&gt; <span class="title">listOfDepth</span><span class="params">(TreeNode* tree)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree == <span class="literal">nullptr</span>) <span class="comment">//先把独特的情况处理了</span></span><br><span class="line">            <span class="keyword">return</span> vector&lt;ListNode*&gt;();</span><br><span class="line"></span><br><span class="line">        vector&lt;ListNode*&gt; res; <span class="comment">//res为最终返回的数组</span></span><br><span class="line">        vector&lt;TreeNode*&gt; tmp_vec; <span class="comment">//辅助数组</span></span><br><span class="line">        stack&lt;TreeNode*&gt; s; <span class="comment">//栈</span></span><br><span class="line">        s.<span class="built_in">push</span>(tree);</span><br><span class="line">        TreeNode* t_node; <span class="comment">//辅助节点</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(!s.<span class="built_in">empty</span>()) <span class="comment">//栈空就说明完事了</span></span><br><span class="line">        &#123;</span><br><span class="line">            ListNode* node = <span class="keyword">new</span> <span class="built_in">ListNode</span>(<span class="number">0</span>); <span class="comment">//先定义一个临时的链表头节点</span></span><br><span class="line">            ListNode* tmp_node = node; <span class="comment">//临时辅助节点用于往后链</span></span><br><span class="line">            <span class="keyword">while</span>(!s.<span class="built_in">empty</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                tmp_node-&gt;next = <span class="keyword">new</span> <span class="built_in">ListNode</span>(s.<span class="built_in">top</span>()-&gt;val); <span class="comment">//将栈顶元素加入到链中</span></span><br><span class="line">                tmp_node = tmp_node-&gt;next;</span><br><span class="line">                tmp_vec.<span class="built_in">push_back</span>(s.<span class="built_in">top</span>()); <span class="comment">//将栈顶元素放入到保存同层元素的辅助数组中</span></span><br><span class="line">                s.<span class="built_in">pop</span>(); <span class="comment">//弹栈</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            tmp_node = node;</span><br><span class="line">            node = node-&gt;next; <span class="comment">//重定位链表头节点</span></span><br><span class="line">            <span class="keyword">delete</span> tmp_node; <span class="comment">//将临时定义的头节点删除</span></span><br><span class="line">            res.<span class="built_in">push_back</span>(node); <span class="comment">//把整好了的链表放入到返回数组中</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(!tmp_vec.<span class="built_in">empty</span>()) <span class="comment">//辅助数组空，说明对下一层的压栈搞完了</span></span><br><span class="line">            &#123;</span><br><span class="line">                t_node = tmp_vec.<span class="built_in">back</span>(); <span class="comment">//栈是先入后出，所以为保证输出的顺序，要从后往前压栈，这样输出的结果是正序的</span></span><br><span class="line">                <span class="keyword">if</span>(t_node-&gt;right != <span class="literal">nullptr</span>) <span class="comment">//先压右儿子节点</span></span><br><span class="line">                    s.<span class="built_in">push</span>(t_node-&gt;right);</span><br><span class="line">                <span class="keyword">if</span>(t_node-&gt;left != <span class="literal">nullptr</span>) <span class="comment">//再压左儿子节点</span></span><br><span class="line">                    s.<span class="built_in">push</span>(t_node-&gt;left);</span><br><span class="line">                tmp_vec.<span class="built_in">pop_back</span>(); <span class="comment">//处理完一个同层节点，就把他弹出来。</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res; <span class="comment">//完结撒花！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">作者：wkltljjs</span><br><span class="line">链接：https:<span class="comment">//leetcode-cn.com/problems/list-of-depth-lcci/solution/ji-yu-ceng-xu-bian-li-yong-fu-zhu-shu-zu-6bqd/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>注解和反射</title>
      <link href="/2022/01/22/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/"/>
      <url>/2022/01/22/%E6%B3%A8%E8%A7%A3%E5%92%8C%E5%8F%8D%E5%B0%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-注解"><a href="#1-注解" class="headerlink" title="1. 注解"></a>1. 注解</h1><p>注解不仅可以给人看也可以给程序看</p><p>annotation 注解</p><p>comnt 注释</p><h2 id="1-1-注解入门"><a href="#1-1-注解入门" class="headerlink" title="1.1 注解入门"></a>1.1 注解入门</h2><ul><li><p>Annotation 是从JDK5.0开始引入的新技术 .</p></li><li><p>Annotation的作用</p></li></ul><p>​            不是程序本身 , 可以对程序作出解释.(这一点和注释(comment)没什么区别)</p><p>​            可以被其他程序(比如:编译器等)读取.</p><ul><li>Annotation的格式</li></ul><p>​            注解是以”@注释名”在代码中存在的</p><p>​            还可以添加一些参数值 , 例如:@SuppressWarnings(value=”unchecked”)</p><ul><li>Annotation在哪里使用?</li></ul><p>​            可以附加在package , class , method , fifield 等上面 , 相当于给他们添加了额外的辅助信息</p><p>​            我们可以通过反射机制实现对这些元数据的访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span> <span class="comment">//    重写的注解</span></span><br></pre></td></tr></table></figure><h2 id="1-2-内置注解"><a href="#1-2-内置注解" class="headerlink" title="1.2 内置注解"></a>1.2 内置注解</h2><ul><li>@Override</li></ul><p>​        定义在 java.lang.Override 中 , 此注释只适用于修辞方法 , 表示一个方法声明打算重写超类中</p><p>​        的另一个方法声明.</p><ul><li>@Deprecated</li></ul><p>​        定义在java.lang.Deprecated中 , 此注释可以用于修辞方法 , 属性 , 类 ,</p><p>​        作用是不鼓励程序员使用这样的元素 , 通常是因为它很危险或者存在更好的选择 .</p><ul><li>@SuppressWarnings</li></ul><p>​        定义在java.lang.SuppressWarnings中,用来抑制编译时的警告信息.</p><p>​        与前两个注释有所不同,你需要添加一个参数才能正确使用,这些参数都是已经定义好了的,我们</p><p>​        选择性的使用就好了 .</p><p>​        可以传参数的注解</p><p>@SuppressWarnings(“all”)    // 镇压全部警告</p><p>@SuppressWarnings(“unchecked”)    // </p><p>@SuppressWarnings(value={“unchecked”,”deprecation”})</p><p>等等 </p><h2 id="1-3-元注解"><a href="#1-3-元注解" class="headerlink" title="1.3 元注解"></a>1.3 元注解</h2><ul><li>元注解的作用就是负责注解其他注解 , Java定义了4个标准的meta-annotation类型,他们被用来提供</li></ul><p>对其他annotation类型作说明 .</p><ul><li>这些类型和它们所支持的类在java.lang.annotation包中可以找到 .( @Target , @Retention ,</li></ul><p>@Documented , @Inherited )</p><p>@Target : 用于描述注解的使用范围(即:被描述的注解可以用在什么地方)</p><p>@Retention : 表示需要在什么级别保存该注释信息 , 用于描述注解的生命周期</p><p>(SOURCE &lt; CLASS &lt; RUNTIME)</p><p>@Document：说明该注解将被包含在javadoc中</p><p>@Inherited：说明子类可以继承父类中的该注解</p><blockquote><p>定义一个注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个注解 </span></span><br><span class="line"><span class="comment">//表示我们的注解可以使用在哪些地方</span></span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span> </span><br><span class="line"><span class="comment">//表示我们的注解在什么地方还有效</span></span><br><span class="line">runtime&gt;<span class="class"><span class="keyword">class</span>&gt;<span class="title">sources</span></span></span><br><span class="line"><span class="class">@<span class="title">Retention</span>(<span class="title">value</span> </span>= RetentionPolicy.RUNTIME) </span><br><span class="line"><span class="comment">//子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span> </span><br><span class="line"><span class="comment">//表示是否将我们的注解生成在javadoc中</span></span><br><span class="line"><span class="meta">@Documented</span> </span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-自定义注解"><a href="#1-4-自定义注解" class="headerlink" title="1.4 自定义注解"></a>1.4 自定义注解</h3><p>使用 @interface自定义注解时 , 自动继承了java.lang.annotation.Annotation接口</p><p>分析 :</p><p>@ interface用来声明一个注解 , 格式 : public @ interface 注解名 { 定义内容 }</p><p>其中的每一个方法实际上是声明了一个配置参数.</p><p>方法的名称就是参数的名称.</p><p>返回值类型就是参数的类型 ( 返回值只能是基本类型,Class , String , enum ).</p><p>可以通过default来声明参数的默认值</p><p>如果只有一个参数成员 , 一般参数名为value</p><p>注解元素必须要有值 , 我们定义注解元素时 , 经常使用空字符串,0作为默认值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.annotation; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy; </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target; <span class="comment">//测试自定义注解 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test3</span> </span>&#123; <span class="comment">//显示定义值 / 不显示值就是默认值 </span></span><br><span class="line">    <span class="meta">@MyAnnotation2(age = 18,name = &quot;黎钦&quot;,id = 001,schools = &#123;&quot;武汉科技大学&quot;&#125;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123; &#125;<span class="comment">//只有一个参数, 默认名字一般是value.使用可省略不写 </span></span><br><span class="line">    <span class="meta">@MyAnnotation3(&quot;aaa&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123; &#125; &#125;</span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD&#125;)</span> </span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span> </span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123; <span class="comment">//参数类型 , 参数名 </span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span> &quot;&quot;</span>; </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>; </span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">()</span> <span class="keyword">default</span> -1</span>; <span class="comment">//String indexOf(&quot;abc&quot;) -1 , 不存在,找不到 </span></span><br><span class="line">    String[] schools() <span class="keyword">default</span> &#123;<span class="string">&quot;黎钦&quot;</span>,<span class="string">&quot;帅哥&quot;</span>&#125;; &#125;</span><br><span class="line"><span class="meta">@Target(value = &#123;ElementType.METHOD&#125;)</span> </span><br><span class="line"><span class="meta">@Retention(value = RetentionPolicy.RUNTIME)</span> </span><br><span class="line"><span class="meta">@interface</span> MyAnnotation3&#123;</span><br><span class="line"><span class="comment">// 参数类型 参数名称 </span></span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-反射机制"><a href="#2-反射机制" class="headerlink" title="2. 反射机制"></a>2. 反射机制</h1><p>反射机制让Java成了动态语言</p><h2 id="2-1-静态vs动态语言"><a href="#2-1-静态vs动态语言" class="headerlink" title="2.1 静态vs动态语言"></a>2.1 静态vs动态语言</h2><p><strong>动态语言</strong></p><ul><li>是一类在运行时可以改变其结构的语言：例如新的函数、对象、甚至代码可以被引进，已有的</li></ul><p>函数可以被删除或是其他结构上的变化。通俗点说就是在运行时代码可以根据某些条件改变自</p><p>身结构。</p><ul><li>主要动态语言：Object-C、C#、JavaScript、PHP、Python等。</li></ul><p><strong>静态语言</strong></p><ul><li><p>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java、C、C++。</p></li><li><p>Java不是动态语言，但Java可以称之为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活！</p></li></ul><h2 id="2-2-Java-Reflection"><a href="#2-2-Java-Reflection" class="headerlink" title="2.2 Java Reflection"></a>2.2 Java Reflection</h2><p><strong>Reflflection（反射）</strong>是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflflection API取</p><p>得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class c = Class.forName(<span class="string">&quot;java.lang.String&quot;</span>)</span><br></pre></td></tr></table></figure><p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这</p><p>个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，</p><p>透过这个镜子看到类的结构，所以，我们形象的称之为：<strong>反射</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//什么叫反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        Class c2 = Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        Class c3 = Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line">        Class c4 = Class.forName(<span class="string">&quot;User&quot;</span>);</span><br><span class="line"><span class="comment">//        一个类在内存中只有一个class对象</span></span><br><span class="line"><span class="comment">//        一个类被加载后,类的整个结构都会被封装在class对象中</span></span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/secqin/img/raw/master/Snipaste_2022-02-14_19-16-36.png" alt="Snipaste_2022-02-14_19-16-36"></p><h2 id="Getting-started"><a href="#Getting-started" class="headerlink" title="Getting started"></a>Getting started</h2><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>​        To use MyBatis you just need to include the          <a href="https://github.com/mybatis/mybatis-3/releases">mybatis-x.x.x.jar</a>        file in the classpath.      </p><p>​        If you are using Maven just add the following dependency to your pom.xml:      </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>x.x.x<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Building-SqlSessionFactory-from-XML"><a href="#Building-SqlSessionFactory-from-XML" class="headerlink" title="Building SqlSessionFactory from XML"></a>Building SqlSessionFactory from XML</h3><p>​        Every MyBatis application centers around an instance of        SqlSessionFactory. A SqlSessionFactory instance can be acquired by        using the SqlSessionFactoryBuilder. SqlSessionFactoryBuilder can        build a SqlSessionFactory instance from an XML configuration file,        or from a custom prepared instance of the Configuration class.      </p><p>​        Building a SqlSessionFactory instance from an XML file is very        simple. It is recommended that you use a classpath resource for        this configuration, but you could use any InputStream instance,        including one created from a literal file path or a file:// URL.        MyBatis includes a utility class, called Resources, that contains        a number of methods that make it simpler to load resources from        the classpath and other locations.      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String resource = <span class="string">&quot;org/mybatis/example/mybatis-config.xml&quot;</span>;</span><br><span class="line">InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure><p>​        The configuration XML file contains settings for the core of the        MyBatis system, including a DataSource for acquiring database        Connection instances, as well as a TransactionManager for        determining how transactions should be scoped and controlled. The        full details of the XML configuration file can be found later in        this document, but here is a simple example:      </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;org/mybatis/example/BlogMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        While there is a lot more to the XML configuration file, the        above example points out the most critical parts. Notice the        XML header, required to validate the XML document. The body        of the environment element contains the environment        configuration for transaction management and connection        pooling. The mappers element contains a list of mappers –        the XML files and/or annotated Java interface classes that        contain the SQL code and mapping definitions.      </p><h3 id="Building-SqlSessionFactory-without-XML"><a href="#Building-SqlSessionFactory-without-XML" class="headerlink" title="Building SqlSessionFactory without XML"></a>Building SqlSessionFactory without XML</h3><p>​        If you prefer to directly build the configuration from Java, rather        than XML, or create your own configuration builder, MyBatis provides        a complete Configuration class that provides all of the same        configuration options as the XML file.      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataSource dataSource = BlogDataSourceFactory.getBlogDataSource();</span><br><span class="line">TransactionFactory transactionFactory =</span><br><span class="line">  <span class="keyword">new</span> JdbcTransactionFactory();</span><br><span class="line">Environment environment =</span><br><span class="line">  <span class="keyword">new</span> Environment(<span class="string">&quot;development&quot;</span>, transactionFactory, dataSource);</span><br><span class="line">Configuration configuration = <span class="keyword">new</span> Configuration(environment);</span><br><span class="line">configuration.addMapper(BlogMapper.class);</span><br><span class="line">SqlSessionFactory sqlSessionFactory =</span><br><span class="line">  <span class="keyword">new</span> SqlSessionFactoryBuilder().build(configuration);</span><br></pre></td></tr></table></figure><p>​        Notice in this case the configuration is adding a mapper class.        Mapper classes are Java classes that        contain SQL Mapping Annotations        that avoid the need for XML. However, due        to some limitations of        Java Annotations and the complexity of some MyBatis mappings, XML        mapping is still required for the        most advanced mappings (e.g.        Nested Join Mapping). For this reason,        MyBatis will automatically        look        for and load a peer XML file if it exists (in this case,        BlogMapper.xml would be loaded based on the        classpath and name of        BlogMapper.class). More on this later.      </p><h3 id="Acquiring-a-SqlSession-from-SqlSessionFactory"><a href="#Acquiring-a-SqlSession-from-SqlSessionFactory" class="headerlink" title="Acquiring a SqlSession from SqlSessionFactory"></a>Acquiring a SqlSession from SqlSessionFactory</h3><p>​        Now that you have a SqlSessionFactory, as the name suggests, you        can acquire an instance of        SqlSession. The SqlSession contains absolutely every method needed to execute        SQL commands against        the database. You can execute mapped SQL statements directly against        the SqlSession instance. For        example:      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  Blog blog = session.selectOne(</span><br><span class="line">    <span class="string">&quot;org.mybatis.example.BlogMapper.selectBlog&quot;</span>, <span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        While this approach works, and is familiar to users of previous        versions of MyBatis, there is now a        cleaner approach. Using an interface (e.g. BlogMapper.class) that properly        describes the parameter and        return value for a given statement, you can now execute cleaner and more        type safe code, without error        prone string literals and casting.      </p><p>​        For example:      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">  Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        Now let’s explore what exactly is being executed here.      </p><h3 id="Exploring-Mapped-SQL-Statements"><a href="#Exploring-Mapped-SQL-Statements" class="headerlink" title="Exploring Mapped SQL Statements"></a>Exploring Mapped SQL Statements</h3><p>​        At this point you may be wondering what exactly is being executed by        the SqlSession or Mapper class. The topic of Mapped SQL Statements        is a big one, and that topic will likely dominate the majority of        this documentation. But to give you an idea of what exactly is being        run, here are a couple of examples.      </p><p>​        In either of the examples above, the statements could have been        defined by either XML or Annotations. Let’s take a look at XML        first. The full set of features provided by MyBatis can be realized        by using the XML based mapping language that has made MyBatis        popular over the years. If you’ve used MyBatis before, the concept        will be familiar to you, but there have been numerous improvements        to the XML mapping documents that will become clear later. Here is        an example of an XML based mapped statement that would satisfy the        above SqlSession calls.      </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;org.mybatis.example.BlogMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlog&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Blog&quot;</span>&gt;</span></span><br><span class="line">    select * from Blog where id = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​        While this looks like a lot of overhead for this simple example, it is        actually very light. You can define as many mapped statements in a        single mapper XML file as you like, so you get a lot of mileage out        of the XML header and doctype declaration. The rest of the file is        pretty self explanatory. It defines a name for the mapped statement        “selectBlog”, in the namespace “org.mybatis.example.BlogMapper”,        which would allow you to call it by specifying the fully qualified        name of “org.mybatis.example.BlogMapper.selectBlog”, as we did above        in the following example:      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Blog blog = session.selectOne(</span><br><span class="line">  <span class="string">&quot;org.mybatis.example.BlogMapper.selectBlog&quot;</span>, <span class="number">101</span>);</span><br></pre></td></tr></table></figure><p>​        Notice how similar this is to calling a method on a fully qualified Java        class, and there’s a reason for that. This name can be directly        mapped to a Mapper class of the same name as the namespace, with a        method that matches the name, parameter, and return type as the        mapped select statement. This allows you to very simply call the        method against the Mapper interface as you saw above, but here it is        again in the following example:      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">Blog blog = mapper.selectBlog(<span class="number">101</span>);</span><br></pre></td></tr></table></figure><p>​        The second approach has a lot of advantages. First, it doesn’t depend        on a string literal, so it’s much safer. Second, if your IDE has        code completion, you can leverage that when navigating your mapped        SQL statements.      </p><hr><p>​        NOTE        <strong>A note about namespaces.</strong>      </p><p>​        <strong>Namespaces</strong>        were optional in previous versions of MyBatis, which was confusing        and unhelpful. Namespaces are now required and have a purpose beyond        simply isolating statements with longer, fully-qualified names.      </p><p>​        Namespaces enable the interface bindings as you see here, and even if you        don’t think you’ll use them today, you should follow these practices        laid out here in case you change your mind. Using the namespace        once, and putting it in a proper Java package namespace will clean        up your code and improve the usability of MyBatis in the long term.      </p><p>​        <strong>Name Resolution:</strong> To reduce the amount of typing, MyBatis uses the        following name resolution rules for all named configuration        elements, including statements, result maps, caches, etc.      </p><ul><li>Fully qualified names (e.g.          “com.mypackage.MyMapper.selectAllThings”) are looked up directly          and used if found.        </li><li>Short names (e.g. “selectAllThings”) can be used to reference          any unambiguous entry. However if there are two or more (e.g.          “com.foo.selectAllThings and com.bar.selectAllThings”), then you          will receive an error reporting that the short name is ambiguous          and therefore must be fully qualified.        </li></ul><hr><p>​        There’s one more trick to Mapper classes like BlogMapper. Their mapped        statements don’t need to be mapped with XML at all. Instead they can        use Java Annotations. For example, the XML above could be eliminated        and replaced with:      </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.mybatis.example;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BlogMapper</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Select(&quot;SELECT * FROM blog WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="function">Blog <span class="title">selectBlog</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        The annotations are a lot cleaner for simple statements, however, Java        Annotations are both limited and messier for more complicated        statements. Therefore, if you have to do anything complicated,        you’re better off with XML mapped statements.      </p><p>​        It will be up to you and your project team to determine which is right        for you, and how important it is to you that your mapped statements        be defined in a consistent way. That said, you’re never locked into        a single approach. You can very easily migrate Annotation based        Mapped Statements to XML and vice versa.      </p><h3 id="Scope-and-Lifecycle"><a href="#Scope-and-Lifecycle" class="headerlink" title="Scope and Lifecycle"></a>Scope and Lifecycle</h3><p>​        It’s very important to understand the various scopes and lifecycles        classes we’ve discussed so far. Using them incorrectly can cause        severe concurrency problems.      </p><hr><p>NOTE        <strong>Object lifecycle and Dependency Injection Frameworks</strong>      </p><p>​        Dependency Injection frameworks can create thread safe, transactional SqlSessions and mappers        and inject them directly into your beans so you can just forget about their lifecycle.        You may want to have a look at MyBatis-Spring or        MyBatis-Guice sub-projects to know more about using MyBatis with DI frameworks.      </p><hr><h4 id="SqlSessionFactoryBuilder"><a href="#SqlSessionFactoryBuilder" class="headerlink" title="SqlSessionFactoryBuilder"></a>SqlSessionFactoryBuilder</h4><p>​          This class can be instantiated, used and thrown away. There is no need          to keep it around once you’ve created your SqlSessionFactory.          Therefore the best scope for instances of SqlSessionFactoryBuilder          is method scope (i.e. a local method variable). You can reuse the          SqlSessionFactoryBuilder to build multiple SqlSessionFactory          instances, but it’s still best not to keep it around to ensure that          all of the XML parsing resources are freed up for more important          things.        </p><h4 id="SqlSessionFactory"><a href="#SqlSessionFactory" class="headerlink" title="SqlSessionFactory"></a>SqlSessionFactory</h4><p>​          Once created, the SqlSessionFactory should exist for the duration of          your application execution. There should be little or no reason to          ever dispose of it or recreate it. It’s a best practice to not          rebuild the SqlSessionFactory multiple times in an application run.          Doing so should be considered a “bad smell”. Therefore the best          scope of SqlSessionFactory is application scope. This can be          achieved a number of ways. The simplest is to use a Singleton          pattern or Static Singleton pattern.        </p><h4 id="SqlSession"><a href="#SqlSession" class="headerlink" title="SqlSession"></a>SqlSession</h4><p>​          Each thread should have its own instance of SqlSession. Instances of          SqlSession are not to be shared and are not thread safe. Therefore          the best scope is request or method scope. Never keep references to          a SqlSession instance in a static field or even an instance field          of a class. Never keep references to a SqlSession in any sort of          managed scope, such as HttpSession of the Servlet framework. If          you’re using a web framework of any sort, consider the SqlSession          to follow a similar scope to that of an HTTP request. In other          words, upon receiving an HTTP request, you can open a SqlSession,          then upon returning the response, you can close it. Closing the          session is very important. You should always ensure that it’s          closed within a finally block. The following is the standard          pattern for ensuring that SqlSessions are closed:        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  <span class="comment">// do work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​          Using this pattern consistently throughout your code will ensure that          all database resources are properly closed.        </p><h4 id="Mapper-Instances"><a href="#Mapper-Instances" class="headerlink" title="Mapper Instances"></a>Mapper Instances</h4><p>​          Mappers are interfaces that you create to bind to your mapped statements.          Instances of the mapper interfaces are acquired from the          SqlSession. As such, technically the broadest scope of any mapper          instance is the same as the SqlSession from which they were          requested. However, the best scope for mapper instances is method          scope. That is, they should be requested within the method that          they are used, and then be discarded. They do not need to be closed          explicitly. While it’s not a problem to keep them around throughout          a request, similar to the SqlSession, you might find that managing          too many resources at this level will quickly get out of hand. Keep          it simple, keep Mappers in the method scope. The following example          demonstrates this practice.        </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> (SqlSession session = sqlSessionFactory.openSession()) &#123;</span><br><span class="line">  BlogMapper mapper = session.getMapper(BlogMapper.class);</span><br><span class="line">  <span class="comment">// do work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mybatis"><a href="#mybatis" class="headerlink" title="mybatis"></a>mybatis</h2><p><a href="https://mybatis.org/"><img src="https://mybatis.org/images/mybatis-logo.png" alt="MyBatis logo"></a></p><ul><li>Last Published: 26 December 2021|</li><li>Version: 3.5.9</li></ul><p>​     Reference Documentation    <a href="https://mybatis.org/mybatis-3/index.html">Introduction</a>    <a href="https://mybatis.org/mybatis-3/getting-started.html">Getting Started</a>    <a href="https://mybatis.org/mybatis-3/configuration.html#">Configuration XML</a>           <a href="https://mybatis.org/mybatis-3/configuration.html#properties">properties</a>      <a href="https://mybatis.org/mybatis-3/configuration.html#settings">settings</a>      <a href="https://mybatis.org/mybatis-3/configuration.html#typeAliases">typeAliases</a>      <a href="https://mybatis.org/mybatis-3/configuration.html#typeHandlers">typeHandlers</a>      <a href="https://mybatis.org/mybatis-3/configuration.html#objectFactory">objectFactory</a>      <a href="https://mybatis.org/mybatis-3/configuration.html#plugins">plugins</a>      <a href="https://mybatis.org/mybatis-3/configuration.html#environments">environments</a>      <a href="https://mybatis.org/mybatis-3/configuration.html#databaseIdProvider">databaseIdProvider</a>      <a href="https://mybatis.org/mybatis-3/configuration.html#mappers">mappers</a>         <a href="https://mybatis.org/mybatis-3/sqlmap-xml.html">Mapper XML Files</a>    <a href="https://mybatis.org/mybatis-3/dynamic-sql.html">Dynamic SQL</a>    <a href="https://mybatis.org/mybatis-3/java-api.html">Java API</a>    <a href="https://mybatis.org/mybatis-3/statement-builders.html">SQL Builder Class</a>    <a href="https://mybatis.org/mybatis-3/logging.html">Logging</a>   Project Documentation    <a href="https://mybatis.org/mybatis-3/project-info.html">Project Information</a>    <a href="https://mybatis.org/mybatis-3/project-reports.html">Project Reports</a>            </p><hr><p><a href="http://maven.apache.org/"><img src="https://mybatis.org/mybatis-3/images/logos/maven-feather.png" alt="Built by Maven"></a></p><h2 id="Configuration"><a href="#Configuration" class="headerlink" title="Configuration"></a>Configuration</h2><p>​        The MyBatis configuration contains settings and        properties        that have a dramatic effect on how MyBatis behaves. The        high level        structure of the document is as follows:      </p><ul><li>​          configuration          <ul><li><a href="https://mybatis.org/mybatis-3/configuration.html#properties">properties</a></li><li><a href="https://mybatis.org/mybatis-3/configuration.html#settings">settings</a></li><li><a href="https://mybatis.org/mybatis-3/configuration.html#typeAliases">typeAliases</a></li><li><a href="https://mybatis.org/mybatis-3/configuration.html#typeHandlers">typeHandlers</a></li><li><a href="https://mybatis.org/mybatis-3/configuration.html#objectFactory">objectFactory</a></li><li><a href="https://mybatis.org/mybatis-3/configuration.html#plugins">plugins</a></li><li>environments<ul><li>​                  environment                  <ul><li>transactionManager</li><li>dataSource</li></ul></li></ul></li><li><a href="https://mybatis.org/mybatis-3/configuration.html#databaseIdProvider">databaseIdProvider</a></li><li><a href="https://mybatis.org/mybatis-3/configuration.html#mappers">mappers</a></li></ul></li></ul><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>​          These are externalizable, substitutable properties that can be          configured in a typical Java Properties file instance, or passed in          through sub-elements of the properties element. For example:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;username&quot; value=&quot;dev_user&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;password&quot; value=&quot;F2Fa3!33TYyg&quot;/&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>The properties can then be used throughout the configuration          files          to substitute values that need to be dynamically configured.          For          example:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br></pre></td></tr></table></figure><p>​          The username and password in this example will be replaced by the          values set in the properties elements. The driver and url          properties          would be replaced with values contained from the          config.properties          file. This provides a lot of options for          configuration.        </p><p>​          Properties can also be passed into the SqlSessionFactoryBuilder.build()          methods. For          example:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory factory =</span><br><span class="line">  sqlSessionFactoryBuilder.build(reader, props);</span><br><span class="line"></span><br><span class="line">// ... or ...</span><br><span class="line"></span><br><span class="line">SqlSessionFactory factory =</span><br><span class="line">  new SqlSessionFactoryBuilder.build(reader, environment, props);</span><br></pre></td></tr></table></figure><p>​          If a property exists in more than one of these places, MyBatis          loads          them in the following order:        </p><ul><li>Properties specified in the body of the properties element are            read first,          </li><li>Properties loaded from the classpath resource or url attributes            of the properties element are read second, and override any            duplicate properties already specified,          </li><li>Properties passed as a method parameter are read last, and            override any duplicate properties that may have been loaded from            the properties body and the resource/url attributes.          </li></ul><p>​          Thus, the highest priority properties are those passed in as a          method          parameter, followed by resource/url attributes and finally          the          properties specified in the body of the properties element.        </p><p>​          Since the MyBatis 3.4.2, your can specify a default value into placeholder as follow:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">  &lt;property name=&quot;username&quot; value=&quot;$&#123;username:ut_user&#125;&quot;/&gt; &lt;!-- If &#x27;username&#x27; property not present, username become &#x27;ut_user&#x27; --&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br></pre></td></tr></table></figure><p>​          This feature is disabled by default. If you specify a default value into placeholder,          you should enable this feature by adding a special property as follow:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">  &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.enable-default-value&quot; value=&quot;true&quot;/&gt; &lt;!-- Enable this feature --&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><p>​          NOTE This will conflict with the <code>&quot;:&quot;</code> character in property keys (e.g. <code>db:username</code>)          or the ternary operator of OGNL expressions (e.g. <code>$&#123;tableName != null ? tableName : &#39;global_constants&#39;&#125;</code>) on a SQL definition.          If you use either and want default property values, you must  change the default value separator by adding this special property:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties resource=&quot;org/mybatis/example/config.properties&quot;&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">  &lt;property name=&quot;org.apache.ibatis.parsing.PropertyParser.default-value-separator&quot; value=&quot;?:&quot;/&gt; &lt;!-- Change default value of separator --&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line">&lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">  &lt;!-- ... --&gt;</span><br><span class="line">  &lt;property name=&quot;username&quot; value=&quot;$&#123;db:username?:ut_user&#125;&quot;/&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br></pre></td></tr></table></figure><h3 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h3><p>​          These are extremely important tweaks that modify the way that          MyBatis          behaves at runtime. The following table describes the          settings,          their meanings and their default values.        </p><table><thead><tr><th>Setting</th><th>Description</th><th>Valid Values</th><th>Default</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>Globally enables or disables any                caches configured in any                mapper under this configuration.</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>Globally enables or disables lazy loading. When enabled, all relations will be lazily loaded.                This value can be superseded for a specific relation by using the <code>fetchType</code> attribute on it.</td><td>true | false</td><td>false</td></tr><tr><td>aggressiveLazyLoading</td><td>When enabled, any method call will load all the lazy  properties of the object. Otherwise, each property is loaded on demand  (see also <code>lazyLoadTriggerMethods</code>).</td><td>true | false</td><td>false (true in ≤3.4.1)</td></tr><tr><td>multipleResultSetsEnabled</td><td>Allows or disallows multiple                ResultSets to be returned from a                single statement (compatible                driver required).</td><td>true | false</td><td>true</td></tr><tr><td>useColumnLabel</td><td>Uses the column label instead of                the column name. Different                drivers behave differently in this                respect. Refer to the driver                documentation, or test out both                modes to determine how your                driver                behaves.</td><td>true | false</td><td>true</td></tr><tr><td>useGeneratedKeys</td><td>Allows JDBC support for generated                keys. A compatible driver is                required. This setting forces                generated keys to be used if set to                true, as some drivers deny                compatibility but still work (e.g.                Derby).</td><td>true | false</td><td>False</td></tr><tr><td>autoMappingBehavior</td><td>Specifies if and how MyBatis                should automatically map columns                to fields/properties.                NONE disables auto-mapping.                PARTIAL will only auto-map results                with no nested result mappings defined inside.                FULL will auto-map result mappings of any                complexity (containing nested or otherwise).</td><td>NONE, PARTIAL, FULL</td><td>PARTIAL</td></tr><tr><td>autoMappingUnknownColumnBehavior</td><td>Specify the behavior when detects an unknown column (or unknown property type) of automatic mapping target.                                    <code>NONE</code>: Do nothing                   <code>WARNING</code>: Output warning log (The log level of <code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code> must be set to <code>WARN</code>)                   <code>FAILING</code>: Fail mapping (Throw <code>SqlSessionException</code>)</td><td>NONE, WARNING, FAILING</td><td>NONE</td></tr><tr><td>defaultExecutorType</td><td>Configures the default executor.                SIMPLE executor does nothing                special. REUSE executor reuses                prepared statements. BATCH                executor                reuses statements and                batches updates.</td><td>SIMPLE                REUSE                BATCH</td><td>SIMPLE</td></tr><tr><td>defaultStatementTimeout</td><td>Sets the number of seconds                the driver will wait                for a response from the database.</td><td>Any positive integer</td><td>Not Set (null)</td></tr><tr><td>defaultFetchSize</td><td>Sets the driver a hint as to control fetching size for return results.                This parameter value can be override by a query setting.</td><td>Any positive integer</td><td>Not Set (null)</td></tr><tr><td>defaultResultSetType</td><td>Specifies a scroll strategy when omit it per statement settings. (Since: 3.5.2)</td><td>FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT(same behavior with ‘Not Set’)</td><td>Not Set (null)</td></tr><tr><td>safeRowBoundsEnabled</td><td>Allows using RowBounds on nested                statements. If allow, set the false.</td><td>true | false</td><td>False</td></tr><tr><td>safeResultHandlerEnabled</td><td>Allows using ResultHandler on nested statements.                If allow, set the false.</td><td>true | false</td><td>True</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>Enables automatic mapping from                classic database column names                A_COLUMN to camel case classic Java                property names aColumn.</td><td>true | false</td><td>False</td></tr><tr><td>localCacheScope</td><td>MyBatis uses local cache to prevent circular references  and speed up repeated nested queries.                By default (SESSION) all queries executed during a  session are cached. If localCacheScope=STATEMENT local session will be  used just for                statement execution, no data will be shared between two  different calls to the same SqlSession.</td><td>SESSION | STATEMENT</td><td>SESSION</td></tr><tr><td>jdbcTypeForNull</td><td>Specifies the JDBC type for null values when no specific JDBC type was provided for the parameter.                Some drivers require specifying the column JDBC type but others work with generic values like NULL, VARCHAR or OTHER.</td><td>JdbcType enumeration. Most common are: NULL, VARCHAR and OTHER</td><td>OTHER</td></tr><tr><td>lazyLoadTriggerMethods</td><td>Specifies which Object’s methods trigger a lazy load</td><td>A method name list separated by commas</td><td>equals,clone,hashCode,toString</td></tr><tr><td>defaultScriptingLanguage</td><td>Specifies the language used by default for dynamic SQL generation.</td><td>A type alias or fully qualified class name.</td><td>org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td></tr><tr><td>defaultEnumTypeHandler</td><td>Specifies the <code>TypeHandler</code> used by default for Enum. (Since: 3.4.5)</td><td>A type alias or fully qualified class name.</td><td>org.apache.ibatis.type.EnumTypeHandler</td></tr><tr><td>callSettersOnNulls</td><td>Specifies if setters or map’s put method will be called  when a retrieved value is null. It is useful when you rely on  Map.keySet() or null value initialization. Note primitives such as  (int,boolean,etc.) will not be set to null.</td><td>true | false</td><td>false</td></tr><tr><td>returnInstanceForEmptyRow</td><td>MyBatis, by default, returns <code>null</code> when all the columns of a returned row are NULL.                When this setting is enabled, MyBatis returns an empty instance instead.                Note that it is also applied to nested results (i.e. collectioin and association). Since: 3.4.2</td><td>true | false</td><td>false</td></tr><tr><td>logPrefix</td><td>Specifies the prefix string that MyBatis will add to the logger names.</td><td>Any String</td><td>Not set</td></tr><tr><td>logImpl</td><td>Specifies which logging implementation MyBatis should  use. If this setting is not present logging implementation will be  autodiscovered.</td><td>SLF4J | LOG4J(deprecated since 3.5.9) | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>Not set</td></tr><tr><td>proxyFactory</td><td>Specifies the proxy tool that MyBatis will use for creating lazy loading capable objects.</td><td>CGLIB | JAVASSIST</td><td>JAVASSIST (MyBatis 3.3 or above)</td></tr><tr><td>vfsImpl</td><td>Specifies VFS implementations</td><td>Fully qualified class names of custom VFS implementation separated by commas.</td><td>Not set</td></tr><tr><td>useActualParamName</td><td>Allow referencing statement parameters by their actual names declared in the method signature.                To use this feature, your project must be compiled in Java 8 with <code>-parameters</code> option. (Since: 3.4.1)</td><td>true | false</td><td>true</td></tr><tr><td>configurationFactory</td><td>Specifies the class that provides an instance of <code>Configuration</code>.                The returned Configuration instance is used to load lazy properties of deserialized objects.                This class must have a method with a signature <code>static Configuration getConfiguration()</code>. (Since: 3.2.3)</td><td>A type alias or fully qualified class name.</td><td>Not set</td></tr><tr><td>shrinkWhitespacesInSql</td><td>Removes extra whitespace characters from the SQL. Note  that this also affects literal strings in SQL. (Since 3.5.5)</td><td>true | false</td><td>false</td></tr><tr><td>defaultSqlProviderType</td><td>Specifies an sql provider class that holds provider method (Since 3.5.6).                This class apply to the <code>type</code>(or <code>value</code>) attribute on sql provider annotation(e.g. <code>@SelectProvider</code>),                when these attribute was omitted.</td><td>A type alias or fully qualified class name</td><td>Not set</td></tr><tr><td>nullableOnForEach</td><td>Specifies the default value of ‘nullable’ attribute on ‘foreach’ tag. (Since 3.5.9)</td><td>true | false</td><td>false</td></tr></tbody></table><p>​          An example of the settings element fully configured is as follows:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;settings&gt;</span><br><span class="line">  &lt;setting name=&quot;cacheEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;lazyLoadingEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;multipleResultSetsEnabled&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;useColumnLabel&quot; value=&quot;true&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;useGeneratedKeys&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;autoMappingBehavior&quot; value=&quot;PARTIAL&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;autoMappingUnknownColumnBehavior&quot; value=&quot;WARNING&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;defaultExecutorType&quot; value=&quot;SIMPLE&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;defaultStatementTimeout&quot; value=&quot;25&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;defaultFetchSize&quot; value=&quot;100&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;safeRowBoundsEnabled&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;mapUnderscoreToCamelCase&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;localCacheScope&quot; value=&quot;SESSION&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;jdbcTypeForNull&quot; value=&quot;OTHER&quot;/&gt;</span><br><span class="line">  &lt;setting name=&quot;lazyLoadTriggerMethods&quot;</span><br><span class="line">    value=&quot;equals,clone,hashCode,toString&quot;/&gt;</span><br><span class="line">&lt;/settings&gt;</span><br></pre></td></tr></table></figure><h3 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h3><p>​          A type alias is simply a shorter name for a Java type. It’s only          relevant to the XML configuration and simply exists to reduce          redundant typing of fully qualified classnames. For example:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Author&quot; type=&quot;domain.blog.Author&quot;/&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Blog&quot; type=&quot;domain.blog.Blog&quot;/&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Comment&quot; type=&quot;domain.blog.Comment&quot;/&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Post&quot; type=&quot;domain.blog.Post&quot;/&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Section&quot; type=&quot;domain.blog.Section&quot;/&gt;</span><br><span class="line">  &lt;typeAlias alias=&quot;Tag&quot; type=&quot;domain.blog.Tag&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><p>​          With this configuration,          <code>Blog</code>          can now be used anywhere that          <code>domain.blog.Blog</code>          could be.        </p><p> You can also specify a package where MyBatis will search for          beans. For example:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;typeAliases&gt;</span><br><span class="line">  &lt;package name=&quot;domain.blog&quot;/&gt;</span><br><span class="line">&lt;/typeAliases&gt;</span><br></pre></td></tr></table></figure><p>​          Each bean found in          <code>domain.blog</code>          , if no annotation is found,          will be registered as an alias          using          uncapitalized non-qualified class name of the bean. That is          <code>domain.blog.Author</code>          will be registered as          <code>author</code>. If the          <code>@Alias</code>          annotation is found its value will          be used as an alias. See the example below:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Alias(&quot;author&quot;)</span><br><span class="line">public class Author &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​          There are many built-in type aliases for common Java types. They          are all          case insensitive, note the special handling of primitives          due          to the overloaded names.        </p><table><thead><tr><th>Alias</th><th>Mapped Type</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>object</td><td>Object</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr><tr><td>iterator</td><td>Iterator</td></tr></tbody></table><h3 id="typeHandlers"><a href="#typeHandlers" class="headerlink" title="typeHandlers"></a>typeHandlers</h3><p>​          Whenever MyBatis sets a parameter on a PreparedStatement or          retrieves a          value from a ResultSet, a TypeHandler is used to retrieve          the value          in a means appropriate to the Java type. The following          table          describes the default TypeHandlers.        </p><p>​          NOTE          Since version 3.4.5, MyBatis supports JSR-310 (Date and Time API) by default.        </p><table><thead><tr><th>Type Handler</th><th>Java Types</th><th>JDBC Types</th></tr></thead><tbody><tr><td><code>BooleanTypeHandler</code></td><td><code>java.lang.Boolean</code>, <code>boolean</code></td><td>Any compatible <code>BOOLEAN</code></td></tr><tr><td><code>ByteTypeHandler</code></td><td><code>java.lang.Byte</code>, <code>byte</code></td><td>Any compatible <code>NUMERIC</code> or <code>BYTE</code></td></tr><tr><td><code>ShortTypeHandler</code></td><td><code>java.lang.Short</code>, <code>short</code></td><td>Any compatible <code>NUMERIC</code> or <code>SMALLINT</code></td></tr><tr><td><code>IntegerTypeHandler</code></td><td><code>java.lang.Integer</code>, <code>int</code></td><td>Any compatible <code>NUMERIC</code> or <code>INTEGER</code></td></tr><tr><td><code>LongTypeHandler</code></td><td><code>java.lang.Long</code>, <code>long</code></td><td>Any compatible <code>NUMERIC</code> or <code>BIGINT</code></td></tr><tr><td><code>FloatTypeHandler</code></td><td><code>java.lang.Float</code>, <code>float</code></td><td>Any compatible <code>NUMERIC</code> or <code>FLOAT</code></td></tr><tr><td><code>DoubleTypeHandler</code></td><td><code>java.lang.Double</code>, <code>double</code></td><td>Any compatible <code>NUMERIC</code> or <code>DOUBLE</code></td></tr><tr><td><code>BigDecimalTypeHandler</code></td><td><code>java.math.BigDecimal</code></td><td>Any compatible <code>NUMERIC</code> or <code>DECIMAL</code></td></tr><tr><td><code>StringTypeHandler</code></td><td><code>java.lang.String</code></td><td><code>CHAR</code>, <code>VARCHAR</code></td></tr><tr><td><code>ClobReaderTypeHandler</code></td><td><code>java.io.Reader</code></td><td>-</td></tr><tr><td><code>ClobTypeHandler</code></td><td><code>java.lang.String</code></td><td><code>CLOB</code>, <code>LONGVARCHAR</code></td></tr><tr><td><code>NStringTypeHandler</code></td><td><code>java.lang.String</code></td><td><code>NVARCHAR</code>, <code>NCHAR</code></td></tr><tr><td><code>NClobTypeHandler</code></td><td><code>java.lang.String</code></td><td><code>NCLOB</code></td></tr><tr><td><code>BlobInputStreamTypeHandler</code></td><td><code>java.io.InputStream</code></td><td>-</td></tr><tr><td><code>ByteArrayTypeHandler</code></td><td><code>byte[]</code></td><td>Any compatible byte stream type</td></tr><tr><td><code>BlobTypeHandler</code></td><td><code>byte[]</code></td><td><code>BLOB</code>, <code>LONGVARBINARY</code></td></tr><tr><td><code>DateTypeHandler</code></td><td><code>java.util.Date</code></td><td><code>TIMESTAMP</code></td></tr><tr><td><code>DateOnlyTypeHandler</code></td><td><code>java.util.Date</code></td><td><code>DATE</code></td></tr><tr><td><code>TimeOnlyTypeHandler</code></td><td><code>java.util.Date</code></td><td><code>TIME</code></td></tr><tr><td><code>SqlTimestampTypeHandler</code></td><td><code>java.sql.Timestamp</code></td><td><code>TIMESTAMP</code></td></tr><tr><td><code>SqlDateTypeHandler</code></td><td><code>java.sql.Date</code></td><td><code>DATE</code></td></tr><tr><td><code>SqlTimeTypeHandler</code></td><td><code>java.sql.Time</code></td><td><code>TIME</code></td></tr><tr><td><code>ObjectTypeHandler</code></td><td>Any</td><td><code>OTHER</code>, or unspecified</td></tr><tr><td><code>EnumTypeHandler</code></td><td>Enumeration Type</td><td><code>VARCHAR</code> any string compatible type, as the code is stored (not  index).</td></tr><tr><td><code>EnumOrdinalTypeHandler</code></td><td>Enumeration Type</td><td>Any compatible <code>NUMERIC</code> or <code>DOUBLE</code>, as the position is stored                (not the code itself).</td></tr><tr><td><code>SqlxmlTypeHandler</code></td><td><code>java.lang.String</code></td><td><code>SQLXML</code></td></tr><tr><td><code>InstantTypeHandler</code></td><td><code>java.time.Instant</code></td><td><code>TIMESTAMP</code></td></tr><tr><td><code>LocalDateTimeTypeHandler</code></td><td><code>java.time.LocalDateTime</code></td><td><code>TIMESTAMP</code></td></tr><tr><td><code>LocalDateTypeHandler</code></td><td><code>java.time.LocalDate</code></td><td><code>DATE</code></td></tr><tr><td><code>LocalTimeTypeHandler</code></td><td><code>java.time.LocalTime</code></td><td><code>TIME</code></td></tr><tr><td><code>OffsetDateTimeTypeHandler</code></td><td><code>java.time.OffsetDateTime</code></td><td><code>TIMESTAMP</code></td></tr><tr><td><code>OffsetTimeTypeHandler</code></td><td><code>java.time.OffsetTime</code></td><td><code>TIME</code></td></tr><tr><td><code>ZonedDateTimeTypeHandler</code></td><td><code>java.time.ZonedDateTime</code></td><td><code>TIMESTAMP</code></td></tr><tr><td><code>YearTypeHandler</code></td><td><code>java.time.Year</code></td><td><code>INTEGER</code></td></tr><tr><td><code>MonthTypeHandler</code></td><td><code>java.time.Month</code></td><td><code>INTEGER</code></td></tr><tr><td><code>YearMonthTypeHandler</code></td><td><code>java.time.YearMonth</code></td><td><code>VARCHAR</code> or <code>LONGVARCHAR</code></td></tr><tr><td><code>JapaneseDateTypeHandler</code></td><td><code>java.time.chrono.JapaneseDate</code></td><td><code>DATE</code></td></tr></tbody></table><p>​          You can override the type handlers or create your own to deal with          unsupported or non-standard types. To do so, implement the interface <code>org.apache.ibatis.type.TypeHandler</code>          or extend the convenience class <code>org.apache.ibatis.type.BaseTypeHandler</code>          and optionally map it to a JDBC type. For example:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">// ExampleTypeHandler.java</span><br><span class="line">@MappedJdbcTypes(JdbcType.VARCHAR)</span><br><span class="line">public class ExampleTypeHandler extends BaseTypeHandler&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void setNonNullParameter(PreparedStatement ps, int i,</span><br><span class="line">    String parameter, JdbcType jdbcType) throws SQLException &#123;</span><br><span class="line">    ps.setString(i, parameter);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public String getNullableResult(ResultSet rs, String columnName)</span><br><span class="line">    throws SQLException &#123;</span><br><span class="line">    return rs.getString(columnName);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public String getNullableResult(ResultSet rs, int columnIndex)</span><br><span class="line">    throws SQLException &#123;</span><br><span class="line">    return rs.getString(columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public String getNullableResult(CallableStatement cs, int columnIndex)</span><br><span class="line">    throws SQLException &#123;</span><br><span class="line">    return cs.getString(columnIndex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">  &lt;typeHandler handler=&quot;org.mybatis.example.ExampleTypeHandler&quot;/&gt;</span><br><span class="line">&lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure><p>​          Using such a TypeHandler would override the existing type handler          for Java String properties and VARCHAR parameters and results. Note          that MyBatis does not introspect upon the database metadata to          determine the type, so you must specify that it’s a VARCHAR field          in the parameter and result mappings to hook in the correct type          handler. This is due to the fact that MyBatis is unaware of the          data type until the statement is executed.        </p><p>​          MyBatis will know the Java type that you want to handle with          this TypeHandler by introspecting its generic type, but          you can override this behavior by two means:        </p><ul><li>Adding a <code>javaType</code> attribute to the typeHandler element (for example: <code>javaType=&quot;String&quot;</code>)          </li><li>Adding a <code>@MappedTypes</code> annotation to your TypeHandler class specifying          the list of java types to associate it with. This annotation will be ignored if          the <code>javaType</code> attribute as also been specified.          </li></ul><p>The associated JDBC type can be specified by two means:</p><ul><li>​           Adding a <code>jdbcType</code> attribute to the typeHandler element (for example: <code>jdbcType=&quot;VARCHAR&quot;</code>).          </li><li>Adding a <code>@MappedJdbcTypes</code> annotation to your TypeHandler class specifying          the list of JDBC types to associate it with. This annotation will be ignored if          the <code>jdbcType</code> attribute as also been specified.          </li></ul><p>​          When deciding which TypeHandler to use in a <code>ResultMap</code>, the Java type is known          (from the result type), but the JDBC type is unknown. MyBatis therefore uses the combination          <code>javaType=[TheJavaType], jdbcType=null</code> to choose a TypeHandler. This means that          using a <code>@MappedJdbcTypes</code> annotation <em>restricts</em> the scope of a TypeHandler          and makes it unavailable for use in <code>ResultMap</code>s unless explicity set. To make a          TypeHandler available for use in a <code>ResultMap</code>, set <code>includeNullJdbcType=true</code>          on the <code>@MappedJdbcTypes</code> annotation. Since Mybatis 3.4.0 however, if a <strong>single</strong>          TypeHandler is registered to handle a Java type, it will be used by default in <code>ResultMap</code>s          using this Java type (i.e. even without <code>includeNullJdbcType=true</code>).        </p><p>And finally you can let MyBatis search for your TypeHandlers:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">  &lt;package name=&quot;org.mybatis.example&quot;/&gt;</span><br><span class="line">&lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure><p>​          Note that when using the autodiscovery feature JDBC types can only be          specified with annotations.        </p><p>​          You can create a generic TypeHandler that is able to handle more than one class. For that purpose          add a constructor that receives the class as a parameter and MyBatis will pass the actual class when          constructing the TypeHandler.        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//GenericTypeHandler.java</span><br><span class="line">public class GenericTypeHandler&lt;E extends MyObject&gt; extends BaseTypeHandler&lt;E&gt; &#123;</span><br><span class="line"></span><br><span class="line">  private Class&lt;E&gt; type;</span><br><span class="line"></span><br><span class="line">  public GenericTypeHandler(Class&lt;E&gt; type) &#123;</span><br><span class="line">    if (type == null) throw new IllegalArgumentException(&quot;Type argument cannot be null&quot;);</span><br><span class="line">    this.type = type;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p><code>EnumTypeHandler</code> and <code>EnumOrdinalTypeHandler</code> are generic TypeHandlers. We will learn        about them in the following section.        </p><h3 id="Handling-Enums"><a href="#Handling-Enums" class="headerlink" title="Handling Enums"></a>Handling Enums</h3><p>​            If you want to map an <code>Enum</code>, you’ll need to use either            <code>EnumTypeHandler</code> or <code>EnumOrdinalTypeHandler</code>.          </p><p>For example, let’s say that we need to store the rounding mode that          should be used with some number if it needs to be rounded. By default, MyBatis          uses <code>EnumTypeHandler</code> to convert the <code>Enum</code>          values to their names.          </p><p><strong>Note <code>EnumTypeHandler</code> is special in the sense that unlike other handlers,          it does not handle just one specific class, but any class that extends <code>Enum</code></strong></p><p>However, we may not want to store names. Our DBA may insist on an          integer code instead. That’s just as easy: add <code>EnumOrdinalTypeHandler</code>          to the <code>typeHandlers</code> in your config file, and now each          <code>RoundingMode</code> will be mapped to an integer using its ordinal value.          </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="line">&lt;typeHandlers&gt;</span><br><span class="line">  &lt;typeHandler handler=&quot;org.apache.ibatis.type.EnumOrdinalTypeHandler&quot;</span><br><span class="line">    javaType=&quot;java.math.RoundingMode&quot;/&gt;</span><br><span class="line">&lt;/typeHandlers&gt;</span><br></pre></td></tr></table></figure><p>​          But what if you want to map the same <code>Enum</code> to a          string in one place and to integer in another?        </p><p>​            The auto-mapper will automatically use <code>EnumOrdinalTypeHandler</code>,            so if we want to go back to using plain old ordinary            <code>EnumTypeHandler</code>, we have to tell it, by explicitly setting            the type handler to use for those SQL statements.          </p><p>​            (Mapper files aren’t covered until the next section, so if this is your first            time reading through the documentation, you may want to skip this for now            and come back to it later.)          </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE mapper</span><br><span class="line">    PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span><br><span class="line">    &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;mapper namespace=&quot;org.apache.ibatis.submitted.rounding.Mapper&quot;&gt;</span><br><span class="line">    &lt;resultMap type=&quot;org.apache.ibatis.submitted.rounding.User&quot; id=&quot;usermap&quot;&gt;</span><br><span class="line">        &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;funkyNumber&quot; property=&quot;funkyNumber&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;roundingMode&quot; property=&quot;roundingMode&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">    &lt;select id=&quot;getUser&quot; resultMap=&quot;usermap&quot;&gt;</span><br><span class="line">        select * from users</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;insert id=&quot;insert&quot;&gt;</span><br><span class="line">        insert into users (id, name, funkyNumber, roundingMode) values (</span><br><span class="line">            #&#123;id&#125;, #&#123;name&#125;, #&#123;funkyNumber&#125;, #&#123;roundingMode&#125;</span><br><span class="line">        )</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap type=&quot;org.apache.ibatis.submitted.rounding.User&quot; id=&quot;usermap2&quot;&gt;</span><br><span class="line">        &lt;id column=&quot;id&quot; property=&quot;id&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;name&quot; property=&quot;name&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;funkyNumber&quot; property=&quot;funkyNumber&quot;/&gt;</span><br><span class="line">        &lt;result column=&quot;roundingMode&quot; property=&quot;roundingMode&quot;</span><br><span class="line">         typeHandler=&quot;org.apache.ibatis.type.EnumTypeHandler&quot;/&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">    &lt;select id=&quot;getUser2&quot; resultMap=&quot;usermap2&quot;&gt;</span><br><span class="line">        select * from users2</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line">    &lt;insert id=&quot;insert2&quot;&gt;</span><br><span class="line">        insert into users2 (id, name, funkyNumber, roundingMode) values (</span><br><span class="line">            #&#123;id&#125;, #&#123;name&#125;, #&#123;funkyNumber&#125;, #&#123;roundingMode, typeHandler=org.apache.ibatis.type.EnumTypeHandler&#125;</span><br><span class="line">        )</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line"></span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>​          Note that this forces us to use a <code>resultMap</code>          instead of a <code>resultType</code> in our select statements.        </p><h3 id="objectFactory"><a href="#objectFactory" class="headerlink" title="objectFactory"></a>objectFactory</h3><p>​          Each time MyBatis creates a new instance of a result object, it          uses an          ObjectFactory instance to do so. The default ObjectFactory          does          little more than instantiate the target class with a default          constructor, or a parameterized constructor if parameter mappings          exist. If you want to override the default behaviour of the          ObjectFactory, you can create your own. For example:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// ExampleObjectFactory.java</span><br><span class="line">public class ExampleObjectFactory extends DefaultObjectFactory &#123;</span><br><span class="line">  @Override</span><br><span class="line">  public &lt;T&gt; T create(Class&lt;T&gt; type) &#123;</span><br><span class="line">    return super.create(type);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public &lt;T&gt; T create(Class&lt;T&gt; type, List&lt;Class&lt;?&gt;&gt; constructorArgTypes, List&lt;Object&gt; constructorArgs) &#123;</span><br><span class="line">    return super.create(type, constructorArgTypes, constructorArgs);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void setProperties(Properties properties) &#123;</span><br><span class="line">    super.setProperties(properties);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public &lt;T&gt; boolean isCollection(Class&lt;T&gt; type) &#123;</span><br><span class="line">    return Collection.class.isAssignableFrom(type);</span><br><span class="line">  &#125;&#125;</span><br><span class="line">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="line">&lt;objectFactory type=&quot;org.mybatis.example.ExampleObjectFactory&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;someProperty&quot; value=&quot;100&quot;/&gt;</span><br><span class="line">&lt;/objectFactory&gt;</span><br></pre></td></tr></table></figure><p>​          The ObjectFactory interface is very simple. It contains two create          methods, one to deal with the default constructor, and the other to          deal with parameterized constructors. Finally, the setProperties          method can be used to configure the ObjectFactory. Properties          defined within the body of the objectFactory element will be passed          to the setProperties method after initialization of your          ObjectFactory instance.        </p><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>​          MyBatis allows you to intercept calls to at certain points within          the          execution of a mapped statement. By default, MyBatis allows          plug-ins to intercept method calls of:        </p><ul><li>​            Executor            (update, query, flushStatements, commit, rollback,            getTransaction, close,            isClosed)          </li><li>​            ParameterHandler            (getParameterObject, setParameters)          </li><li>​            ResultSetHandler            (handleResultSets, handleOutputParameters)          </li><li>​            StatementHandler            (prepare, parameterize, batch, update, query)          </li></ul><p>​          The details of these classes methods can be discovered by looking          at          the full method signature of each, and the source code which is          available with each MyBatis release. You should understand the          behaviour of the method you’re overriding, assuming you’re doing          something more than just monitoring calls. If you attempt to modify          or override the behaviour of a given method, you’re likely to break          the core of MyBatis. These are low level classes and methods, so          use          plug-ins with caution.        </p><p>​          Using plug-ins is pretty simple given the power they provide.          Simply          implement the Interceptor interface, being sure to specify the          signatures you want to intercept.        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">// ExamplePlugin.java</span><br><span class="line">@Intercepts(&#123;@Signature(</span><br><span class="line">  type= Executor.class,</span><br><span class="line">  method = &quot;update&quot;,</span><br><span class="line">  args = &#123;MappedStatement.class,Object.class&#125;)&#125;)</span><br><span class="line">public class ExamplePlugin implements Interceptor &#123;</span><br><span class="line">  private Properties properties = new Properties();</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public Object intercept(Invocation invocation) throws Throwable &#123;</span><br><span class="line">    // implement pre-processing if needed</span><br><span class="line">    Object returnObject = invocation.proceed();</span><br><span class="line">    // implement post-processing if needed</span><br><span class="line">    return returnObject;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Override</span><br><span class="line">  public void setProperties(Properties properties) &#123;</span><br><span class="line">    this.properties = properties;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- mybatis-config.xml --&gt;</span><br><span class="line">&lt;plugins&gt;</span><br><span class="line">  &lt;plugin interceptor=&quot;org.mybatis.example.ExamplePlugin&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;someProperty&quot; value=&quot;100&quot;/&gt;</span><br><span class="line">  &lt;/plugin&gt;</span><br><span class="line">&lt;/plugins&gt;</span><br></pre></td></tr></table></figure><p>​          The plug-in above will intercept all calls to the “update” method          on          the Executor instance, which is an internal object responsible for          the low-level execution of mapped statements.        </p><p>NOTE          <strong>Overriding the Configuration Class</strong>                  </p><p>​          In addition to modifying core MyBatis behaviour with plugins, you          can          also override the <code>Configuration</code> class entirely. Simply extend it          and override any methods inside, and pass it into the call to the          <code>SqlSessionFactoryBuilder.build(myConfig)</code> method. Again though, this          could have a severe impact on the behaviour of MyBatis, so use          caution.        </p><h3 id="environments"><a href="#environments" class="headerlink" title="environments"></a>environments</h3><p>​          MyBatis can be configured with multiple environments. This helps          you to          apply your SQL Maps to multiple databases for any number of          reasons. For example, you might have a different configuration for          your Development, Test and Production environments. Or, you may          have          multiple production databases that share the same schema, and          you’d          like to use the same SQL maps for both. There are many use          cases.        </p><p>​          <strong>One important thing to remember though: While you can            configure multiple environments, you can only choose ONE per            SqlSessionFactory instance.</strong>                  </p><p>​          So if you want to connect to two databases, you need to create two          instances of SqlSessionFactory, one for each. For three databases,          you’d need three instances, and so on. It’s really easy to          remember:        </p><ul><li>​            <strong>One SqlSessionFactory instance per database</strong>                      </li></ul><p>​          To specify which environment to build, you simply pass it to the          SqlSessionFactoryBuilder as an optional parameter. The two          signatures that accept the environment are:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);</span><br><span class="line">SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);</span><br></pre></td></tr></table></figure><p>If the environment is omitted, then the default environment is          loaded, as follows:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, properties);</span><br></pre></td></tr></table></figure><p>The environments element defines how the environment is          configured.        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">  &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">    &lt;transactionManager type=&quot;JDBC&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;...&quot; value=&quot;...&quot;/&gt;</span><br><span class="line">    &lt;/transactionManager&gt;</span><br><span class="line">    &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;driver&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;url&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;username&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</span><br><span class="line">      &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</span><br><span class="line">    &lt;/dataSource&gt;</span><br><span class="line">  &lt;/environment&gt;</span><br><span class="line">&lt;/environments&gt;</span><br></pre></td></tr></table></figure><p>​          Notice the key sections here:        </p><ul><li>​            The default Environment ID (e.g. default=”development”).          </li><li>​            The Environment ID for each environment defined (e.g.            id=”development”).          </li><li>​            The TransactionManager configuration (e.g. type=”JDBC”)          </li><li>​            The DataSource configuration (e.g. type=”POOLED”)          </li></ul><p>​          The default environment and the environment IDs are self          explanatory.          Name them whatever you like, just make sure the default          matches one          of them.        </p><p>​          <strong>transactionManager</strong>        </p><p>​          There are two TransactionManager types (i.e.          type=”[JDBC|MANAGED]”) that          are included with MyBatis:        </p><ul><li><p>​            JDBC – This configuration simply makes use of the JDBC commit            and            rollback facilities directly. It relies on the connection            retrieved from the dataSource to manage the scope of the            transaction.          </p></li><li><p>​            MANAGED – This configuration simply does almost nothing. It            never            commits, or rolls back a connection. Instead, it lets the            container manage the full lifecycle of the transaction (e.g.            a JEE Application Server context). By default it does            close the connection. However, some containers don’t expect this,            and thus if you need to stop it from closing the connection, set            the “closeConnection” property to false. For example:            </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transactionManager type=&quot;MANAGED&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;closeConnection&quot; value=&quot;false&quot;/&gt;</span><br><span class="line">&lt;/transactionManager&gt;</span><br></pre></td></tr></table></figure></li></ul><p>​          NOTE          If you are planning to use MyBatis with Spring there is no need to configure          any TransactionManager because the Spring module will set its own one          overriding any previously set configuration.        </p><p>​          Neither of these TransactionManager types require any properties.          However,          they are both Type Aliases, so in other words, instead of          using          them, you could put your own fully qualified class name or Type          Alias that refers to your own implementation of the          TransactionFactory interface.        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface TransactionFactory &#123;</span><br><span class="line">  default void setProperties(Properties props) &#123; // Since 3.5.2, change to default method</span><br><span class="line">    // NOP</span><br><span class="line">  &#125;</span><br><span class="line">  Transaction newTransaction(Connection conn);</span><br><span class="line">  Transaction newTransaction(DataSource dataSource, TransactionIsolationLevel level, boolean autoCommit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​          Any properties configured in the XML will be passed to the          setProperties() method after instantiation. Your implementation          would also need to create a Transaction implementation, which is          also a very simple interface:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">public interface Transaction &#123;</span><br><span class="line">  Connection getConnection() throws SQLException;</span><br><span class="line">  void commit() throws SQLException;</span><br><span class="line">  void rollback() throws SQLException;</span><br><span class="line">  void close() throws SQLException;</span><br><span class="line">  Integer getTimeout() throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​          Using these two interfaces, you can completely customize how          MyBatis          deals with Transactions.        </p><p>​          <strong>dataSource</strong>        </p><p>​          The dataSource element configures the source of JDBC Connection          objects using the standard JDBC DataSource interface.        </p><p>​          Most MyBatis applications will configure a dataSource as in the          example. However, it’s not required. Realize though, that to          facilitate Lazy Loading, this dataSource is required.        </p><p>There are three built-in dataSource types (i.e. type=”[UNPOOLED|POOLED|JNDI]”):        </p><p>​          <strong>UNPOOLED</strong>          – This implementation of DataSource simply opens and closes a          connection each time it is requested. While it’s a bit slower, this          is a good choice for simple applications that do not require the          performance of immediately available connections. Different          databases are also different in this performance area, so for some          it may be less important to pool and this configuration will be          ideal. The UNPOOLED DataSource has the following properties to configure:        </p><ul><li><code>driver</code> – This is the fully qualified Java class of the JDBC            driver (NOT of the DataSource class if your driver includes one).          </li><li><code>url</code> – This is the JDBC URL for your database instance.          </li><li><code>username</code> – The database username to log in with.          </li><li><code>password</code> - The database password to log in with.          </li><li><code>defaultTransactionIsolationLevel</code> – The default transaction            isolation level for connections.          </li><li><code>defaultNetworkTimeout</code> – The default network timeout  value in milliseconds to wait for the database operation to complete.  See the API documentation of <code>java.sql.Connection#setNetworkTimeout()</code> for details.          </li></ul><p>​          Optionally, you can pass properties to the database driver as          well. To do          this, prefix the properties with <code>driver.</code>, for example:        </p><ul><li><code>driver.encoding=UTF8</code></li></ul><p>​          This will pass the property <code>encoding</code>, with the value <code>UTF8</code>, to          your          database driver via the <code>DriverManager.getConnection(url,          driverProperties)</code> method.        </p><p>​          <strong>POOLED</strong>          – This implementation of DataSource pools JDBC Connection objects          to          avoid the initial connection and authentication time required to          create a new Connection instance. This is a popular approach for          concurrent web applications to achieve the fastest response.        </p><p>​          In addition to the (UNPOOLED) properties above, there are many          more          properties that can be used to configure the POOLED datasource:        </p><ul><li><code>poolMaximumActiveConnections</code> – This is the number of active            (i.e. in use) connections that can exist at any given time.            Default: 10          </li><li><code>poolMaximumIdleConnections</code> – The number of idle connections            that            can exist at any given time.          </li><li><code>poolMaximumCheckoutTime</code> – This is the amount of time that a            Connection can be “checked out” of the pool before it will be            forcefully returned. Default: 20000ms (i.e. 20 seconds)          </li><li><code>poolTimeToWait</code> – This is a low level setting that gives the            pool            a chance to print a log status and re-attempt the acquisition            of a            connection in the case that it’s taking unusually long (to            avoid            failing silently forever if the pool is misconfigured).            Default:            20000ms (i.e. 20 seconds)          </li><li><code>poolMaximumLocalBadConnectionTolerance</code> – This is a low level setting about            tolerance of bad connections got for any thread. If a thread got a bad connection, it may            still have another chance to re-attempt to get another connection which is valid. But the            retrying times should not more than the sum of <code>poolMaximumIdleConnections</code>            and <code>poolMaximumLocalBadConnectionTolerance</code>.            Default:            3 (Since: 3.4.5)          </li><li><code>poolPingQuery</code> – The Ping Query is sent to the database to            validate that a connection is in good working order and is ready            to            accept requests. The default is “NO PING QUERY SET”, which will            cause most database drivers to fail with a decent error message.          </li><li><code>poolPingEnabled</code> – This enables or disables the ping query. If            enabled, you must also set the poolPingQuery property with a valid            SQL statement (preferably a very fast one). Default: false.          </li><li><code>poolPingConnectionsNotUsedFor</code> – This configures how often the            poolPingQuery will be used. This can be set to match the typical            timeout for a database connection, to avoid unnecessary pings.            Default: 0 (i.e. all connections are pinged every time – but only            if poolPingEnabled is true of course).          </li></ul><p>​          <strong>JNDI</strong>          – This implementation of DataSource is intended for use with          containers such as EJB or Application Servers that may configure          the          DataSource centrally or externally and place a reference to it          in a          JNDI context. This DataSource configuration only requires two          properties:        </p><ul><li><code>initial_context</code> – This property is used for the Context lookup            from the InitialContext (i.e.            initialContext.lookup(initial_context)). This property is            optional,            and if omitted, then the data_source property will be            looked up            against the InitialContext directly.          </li><li><code>data_source</code> – This is the context path where the reference to            the instance of the DataSource can be found. It will be looked up            against the context returned by the initial_context lookup, or            against the InitialContext directly if no initial_context is            supplied.          </li></ul><p>Similar to the other DataSource configurations, it’s possible to          send properties directly to the InitialContext by prefixing those          properties with <code>env.</code>, for example:        </p><ul><li><code>env.encoding=UTF8</code></li></ul><p>​          This would send the property <code>encoding</code> with the value of <code>UTF8</code>          to the          constructor of the InitialContext upon instantiation.        </p><p>​          You can plug any 3rd party DataSource by implementing the interface <code>org.apache.ibatis.datasource.DataSourceFactory</code>:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public interface DataSourceFactory &#123;</span><br><span class="line">  void setProperties(Properties props);</span><br><span class="line">  DataSource getDataSource();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​          <code>org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory</code> can be used as super class          to build new datasource adapters. For example this is the code needed to plug C3P0:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import org.apache.ibatis.datasource.unpooled.UnpooledDataSourceFactory;</span><br><span class="line">import com.mchange.v2.c3p0.ComboPooledDataSource;</span><br><span class="line"></span><br><span class="line">public class C3P0DataSourceFactory extends UnpooledDataSourceFactory &#123;</span><br><span class="line"></span><br><span class="line">  public C3P0DataSourceFactory() &#123;</span><br><span class="line">    this.dataSource = new ComboPooledDataSource();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>To set it up, add a property for each setter method you want MyBatis to call.        Follows below a sample configuration which connects to a PostgreSQL database:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataSource type=&quot;org.myproject.C3P0DataSourceFactory&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;driver&quot; value=&quot;org.postgresql.Driver&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;url&quot; value=&quot;jdbc:postgresql:mydb&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;username&quot; value=&quot;postgres&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;</span><br><span class="line">&lt;/dataSource&gt;</span><br></pre></td></tr></table></figure><h3 id="databaseIdProvider"><a href="#databaseIdProvider" class="headerlink" title="databaseIdProvider"></a>databaseIdProvider</h3><p>​          MyBatis is able to execute different statements depending on your database vendor.          The multi-db vendor support is based on the mapped statements <code>databaseId</code> attribute.          MyBatis will load all statements with no <code>databaseId</code> attribute          or with a <code>databaseId</code> that matches the current one. In case the same statement          is found with and without the <code>databaseId</code> the latter will be discarded.          To enable the multi vendor support add a <code>databaseIdProvider</code>          to mybatis-config.xml file as follows:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;databaseIdProvider type=&quot;DB_VENDOR&quot; /&gt;</span><br></pre></td></tr></table></figure><p>​          The DB_VENDOR implementation databaseIdProvider sets as databaseId the String returned by          <code>DatabaseMetaData#getDatabaseProductName()</code>.          Given that usually that string is too long and that different  versions of the same product may return different values,          you may want to convert it to a shorter one by adding  properties like follows:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;databaseIdProvider type=&quot;DB_VENDOR&quot;&gt;</span><br><span class="line">  &lt;property name=&quot;SQL Server&quot; value=&quot;sqlserver&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;DB2&quot; value=&quot;db2&quot;/&gt;</span><br><span class="line">  &lt;property name=&quot;Oracle&quot; value=&quot;oracle&quot; /&gt;</span><br><span class="line">&lt;/databaseIdProvider&gt;</span><br></pre></td></tr></table></figure><p>​          When properties are provided, the DB_VENDOR databaseIdProvider will search the property value corresponding to the          first key found in the returned database product name or “null” if there is not a matching property.          In this case, if <code>getDatabaseProductName()</code> returns “Oracle (DataDirect)” the databaseId will be set to “oracle”.        </p><p>​          You can build your own DatabaseIdProvider by implementing the interface <code>org.apache.ibatis.mapping.DatabaseIdProvider</code>          and registering it in mybatis-config.xml:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public interface DatabaseIdProvider &#123;</span><br><span class="line">  default void setProperties(Properties p) &#123; // Since 3.5.2, changed to default method</span><br><span class="line">    // NOP</span><br><span class="line">  &#125;</span><br><span class="line">  String getDatabaseId(DataSource dataSource) throws SQLException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mappers"><a href="#mappers" class="headerlink" title="mappers"></a>mappers</h3><p>​          Now that the behavior of MyBatis is configured with the above          configuration elements, we’re ready to define our mapped SQL          statements. But first, we need to tell MyBatis where to find them.          Java doesn’t really provide any good means of auto-discovery in          this regard, so the best way to do it is to simply tell MyBatis          where to find the mapping files. You can use classpath relative          resource references, fully qualified url references          (including <code>file:///</code> URLs), class names or package names.          For example:        </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Using classpath relative resources --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;mapper resource=&quot;org/mybatis/builder/AuthorMapper.xml&quot;/&gt;</span><br><span class="line">  &lt;mapper resource=&quot;org/mybatis/builder/BlogMapper.xml&quot;/&gt;</span><br><span class="line">  &lt;mapper resource=&quot;org/mybatis/builder/PostMapper.xml&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line">&lt;!-- Using url fully qualified paths --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;mapper url=&quot;file:///var/mappers/AuthorMapper.xml&quot;/&gt;</span><br><span class="line">  &lt;mapper url=&quot;file:///var/mappers/BlogMapper.xml&quot;/&gt;</span><br><span class="line">  &lt;mapper url=&quot;file:///var/mappers/PostMapper.xml&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line">&lt;!-- Using mapper interface classes --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;mapper class=&quot;org.mybatis.builder.AuthorMapper&quot;/&gt;</span><br><span class="line">  &lt;mapper class=&quot;org.mybatis.builder.BlogMapper&quot;/&gt;</span><br><span class="line">  &lt;mapper class=&quot;org.mybatis.builder.PostMapper&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br><span class="line">&lt;!-- Register all interfaces in a package as mappers --&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">  &lt;package name=&quot;org.mybatis.builder&quot;/&gt;</span><br><span class="line">&lt;/mappers&gt;</span><br></pre></td></tr></table></figure><p>​          These statement simply tell MyBatis where to go from here. The          rest of the details are in each of the SQL Mapping files, and that’s          exactly what the next section will discuss.        </p><hr><p>Copyright ©      2009–2021<a href="https://www.mybatis.org/">MyBatis.org</a>. .</p>]]></content>
      
      
      <categories>
          
          <category> javase </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javase </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
